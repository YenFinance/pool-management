{"version":3,"sources":["assets/images/circle.svg","assets/images/dropdown.svg","assets/images/dropup.svg","assets/images/question.svg","assets/images/external-link.svg","assets/images/x.svg","stores/Provider.ts","provider/UncheckedJsonRpcSigner.ts","stores/actions/actions.ts","provider/Web3Window.ts","provider/connectors.ts","utils/bignumber.ts","utils/helpers.tsx","stores/Transaction.ts","stores/actions/fetch.ts","provider/subgraph.ts","stores/Token.ts","stores/BlockchainFetch.ts","utils/tokenColorPicker.ts","stores/Pool.ts","stores/Dropdown.ts","stores/AppSettings.ts","stores/ContractMetadata.ts","stores/Proxy.ts","provider/market.ts","stores/actions/validators.ts","stores/Market.ts","stores/AddLiquidityForm.ts","stores/RemoveLiquidityForm.ts","utils/math.ts","stores/CreatePoolForm.ts","stores/SwapsTable.ts","stores/Root.ts","contexts/storesContext.tsx","components/Web3Manager/index.tsx","utils/helperHooks.ts","components/WalletDropdown/Transaction.tsx","components/WalletDropdown/TransactionPanel.tsx","components/WalletDropdown/index.tsx","components/Common/Identicon.tsx","components/Common/Button.tsx","components/Wallet/index.tsx","components/Common/Header.tsx","utils/chartFormatter.ts","components/Home/LiquidityPanel.tsx","components/Home/MyLiquidity.tsx","components/Common/WrapEth.tsx","components/Common/WalletBalances.tsx","components/Filters/AssetOptions.tsx","components/Filters/SelectAssetModal.tsx","components/Filters/index.tsx","components/Home/SharedPools.tsx","views/Home.tsx","components/Home/PrivatePools.tsx","views/Private.tsx","components/Pool/PoolAssetChartPanel.tsx","components/Pool/AddRemovePanel.tsx","components/Pool/InfoPanel.tsx","components/Common/PoolOverview.tsx","components/Common/Checkbox.tsx","components/Common/SingleMultiToggle.tsx","components/Common/RadioButton.tsx","components/AddLiquidity/AddAssetTable.tsx","components/AddLiquidity/AddLiquidityModal.tsx","components/RemoveLiquidity/RemoveAssetTable.tsx","components/RemoveLiquidity/RemoveLiquidityModal.tsx","components/Pool/BalancesTable.tsx","components/Pool/SwapsTable.tsx","components/Pool/PoolTabs.tsx","views/Pool.tsx","components/CreatePool/CreatePoolTable.tsx","components/CreatePool/AssetOptions.tsx","components/CreatePool/SelectAssetModal.tsx","components/Home/NewPool.tsx","views/New.tsx","views/Setup.tsx","components/Common/LeftNav.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","ContractTypes","UncheckedJsonRpcSigner","signer","ethers","defineReadOnly","provider","this","getAddress","transaction","sendUncheckedTransaction","then","hash","nonce","gasLimit","gasPrice","data","value","chainId","confirmations","from","wait","waitForTransaction","message","signMessage","preLog","params","console","debug","action","contract","sender","overrides","sendAction","a","actionResponse","txResponse","undefined","error","result","web3Window","window","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","REACT_APP_INFURA_ID","portis","Portis","id","web3Modal","Web3Modal","theme","background","main","secondary","border","hover","supportedChainId","Number","chainNameById","isChainIdSupported","backupUrls","1","3","42","ERRORS","schema","BPool","require","abi","BActions","BFactory","DSProxy","DSProxyRegistry","TestToken","ExchangeProxy","ExchangeProxyCallable","Weth","Multicall","ProviderStore","rootStore","chainData","currentBlockNumber","providerStatus","active","injectedLoaded","injectedActive","backUpLoaded","activeProvider","handleNetworkChanged","bind","handleClose","handleAccountsChanged","connect","log","loadWeb3","blockNumber","library","account","getSigner","type","address","signerAccount","Contract","getProviderOrSigner","networkId","blockchainFetchStore","setFetchLoop","accounts","addLiquidityFormStore","removeLiquidityFormStore","closeModal","length","on","removeListener","close","web3","providers","Web3Provider","isMetaMask","autoRefreshOnNetworkChange","getNetwork","network","listAccounts","injectedChainId","injectedWeb3","ethereum","loadProvider","JsonRpcProvider","activeChainId","backUpWeb3","Error","NoWeb3","fetchUserBlockchainData","observable","transactionStore","tokenStore","contractMetadataStore","checkPendingTransactions","fetchTokenBalances","getTrackedTokenAddresses","contractType","contractAddress","BlockchainActionNoAccount","BlockchainActionNoChainId","getContract","estimate","gasLimitNumber","toNumber","safeGasLimit","Math","floor","response","warn","addTransactionRecord","BlockchainActionNoResponse","BigNumber","config","EXPONENTIAL_AT","ROUNDING_MODE","ROUND_DOWN","DECIMAL_PLACES","utils","bigNumberify","MAX_UINT","constants","MaxUint256","toChecksum","bnum","val","toString","scale","input","decimalPlaces","scalePow","scaleMul","pow","times","toWei","integerValue","hasMaxApproval","amount","gte","isEmpty","str","tinyAddress","digits","isAddress","substring","shortenAddress","toLowerCase","formatFee","fee","formatPercentage","decimals","useLowerLimit","lte","gt","toFormat","ETHERSCAN_PREFIXES","4","5","getEtherscanLink","prefix","fromPercentage","div","FetchCode","formatNormalizedTokenValue","normalizedBalance","displayPrecision","truncateAt","eq","toFixed","padToDecimalPlaces","formatBalanceTruncated","balance","precision","formatBalance","formatCurrency","decimalSeparator","groupSeparator","groupSize","minDecimals","split","zerosToPad","pad","i","isTxReverted","code","AsyncStatus","TransactionStore","txRecords","filter","isTxPending","getPendingTransactions","providerStore","currentBlock","getCurrentBlockNumber","forEach","isStale","getTransactionReceipt","receipt","blockNumberChecked","catch","SUCCESS","record","txHash","records","find","push","txRecord","QueryType","UserAllowanceFetch","status","request","payload","tokenAbi","TokenStore","hasApproval","tokenAddress","spender","allowance","getAllowance","helpers","chainApprovals","allowances","tokenApprovals","userApprovals","getTotalSupplyLastFetched","totalSupplies","totalSupply","lastFetched","getAllowanceLastFetched","balances","tokenAddresses","approvals","getAllowances","Object","keys","calls","multiAddress","getMultiAddress","multi","iface","Interface","functions","encode","aggregate","map","setAllowances","FAILURE","tokens","owner","fetchBlock","approval","index","isAllowanceFetched","isAllowanceStale","blockFetched","supplies","fetchedSupplies","supply","isSupplyFetched","isSupplyStale","fetchedBalances","isBalanceFetched","isBalanceStale","tokenBalances","getTokenMetadata","sendTransaction","tokensToTrack","decode","setTotalSupplies","promises","balanceOf","getEthBalance","Promise","all","ethBalance","unshift","setBalances","parseEther","token","STALE","BlockchainFetchStore","fetchActivePoolAllowances","poolAddresses","poolStore","getContributedPools","pool","fetchTotalSupplies","proxyStore","fetchInstance","hasInstance","trackedTokenAddresses","addresses","proxyAddress","getInstanceAddress","fetchAccountApprovals","appSettingsStore","poolAddress","getActivePoolAddress","getPoolTokens","forceFetch","getBlockNumber","lastCheckedBlock","fetchProxyData","setCurrentBlockNumber","fetchPools","hasActivePool","fetchPrivatePools","fetchContributedPools","fetchPoolTotalSupplies","fetchPoolUserBalances","SUBGRAPH_URL","fetchSharedPools","pageIncrement","skip","query","getPoolQuery","SHARED_POOLS","rawPools","pools","processPools","PRIVATE_POOLS","CONTRIBUTED_POOLS","fetchPool","SINGLE_POOL","fetchPoolSwaps","fetch","method","headers","Accept","body","JSON","stringify","json","swaps","ts","round","Date","getTime","tsYesterday","tokenStr","poolFields","EXPONENTIAL_BACKOFF_FACTOR","delay","errors","sleep","poolShares","poolShare","poolId","tokensList","publicSwap","finalized","swapFee","totalWeight","totalShares","totalSwapVolume","denormWeight","denormWeightProportion","symbol","shares","swap","tokenIn","tokenAmountIn","tokenInSym","tokenOut","tokenAmountOut","tokenOutSym","poolTotalSwapVolume","lastSwapVolume","minus","ms","resolve","setTimeout","colors","colorIndex","getNextTokenColor","color","PoolStore","graphSkip","selectedAssets","privatePools","contributedPools","defaultPrecision","getDefaultPrecision","hasTokenMetadata","getBalance","addTokenMetadata","chartColor","ticker","iconAddress","isSupported","pageLoading","processUnknownTokens","setPools","setPrivatePools","setContributedPools","activePool","next","blockLastFetched","getPool","userProportion","getUserShareProportion","getPoolTokenBalance","userShare","getTotalSupply","poolValue","marketStore","getPortfolioValue","key","ratio","totalPoolTokens","buffer","percentage","userPoolTokens","poolAmountIn","minAmountsOut","minAmountOut","poolAmountOut","maxAmountsIn","dsProxyAddress","bActionsAddress","getBActionsAddress","wrapTransaction","minPoolAmountOut","DropdownStore","walletDropdownVisible","visible","AppSettingsStore","darkMode","activePoolAddress","ContractMetadataStore","contractMetadata","loadWhitelistedTokenMetadata","tokenSymbols","getWhitelistedTokenMetadata","tickerSymbols","tokenIndex","symbolToAddressMap","addressToSymbolMap","chainName","metadata","parse","deployed","tokenMetadata","default","bFactory","bActions","dsProxyRegistry","proxy","weth","multicall","warnings","tokenContract","dsProxyRegistryAddress","getTrackedTokenMetadata","element","findIndex","getTokenMetadataIndex","filteredMetadata","valueString","includes","Proxy","instance","isDeploying","deploying","proxyRegistryAddress","getDsProxyRegistryAddress","proxyRegistry","proxies","pricesBackup","listBackup","conflictSymbols","MARKET_API_URL","fetchAssetPrices","symbolsToFetch","assetData","idToSymbolMap","idQueryString","priceMap","prices","price","usd","currency","fetchAssetList","assets","formatAsset","asset","name","toUpperCase","assetSymbol","match","ValidationStatus","MarketStore","assetsLoaded","setAssetPrices","assetPricesLoaded","setAssetList","hasAssetPrice","sumValue","sumWeight","portfolioValue","tokenValue","getValue","plus","isGreaterThan","volumeTotal","DepositType","validateTokenValue","substr","ValidationRules","EMPTY","isFloat","NOT_FLOAT","parseFloat","ZERO","isPositive","NEGATIVE","limitDigits","some","test","MAX_DIGITS_EXCEEDED","VALID","AddLiquidityFormStore","resetApprovalCheckboxStatusMap","resetJoinInputs","validationStatus","modalOpen","depositType","MULTI_ASSET","confirmation","checked","touched","activeToken","activeAccount","hasTransactionError","initializeCheckboxes","initializeInputs","checkboxes","inputs","activeInputKey","checkboxesLoaded","joinInputs","inputBalance","accountBalance","normalizeBalance","INSUFFICIENT_BALANCE","requireValidAddress","validation","assetAddress","validate","activeInputAddress","activeInputAmount","joinRatio","isTokenActive","isActiveInputValid","requiredBalance","getInputValidationStatus","setJoinInputParam","valueForJoin","setInputValue","amountInput","getInput","INSUFFICIENT_LIQUIDITY","denormalizeBalance","initApprovalCheckbox","setApprovalCheckboxChecked","BONE","EXIT_FEE","BPOW_PRECISION","idiv","calcPoolOutGivenSingleIn","tokenBalanceIn","tokenWeightIn","poolSupply","normalizedWeight","bdiv","zaz","bmul","tokenAmountInAfterFee","bpow","calcSingleOutGivenPoolIn","tokenBalanceOut","tokenWeightOut","poolAmountInAfterExitFee","newTokenBalanceOut","tokenAmountOutBeforeSwapFee","b","btoi","bsubSign","res","bool","base","exp","whole","remain","wholePow","n","z","modulo","bpowi","partialResult","x","xneg","term","sum","negative","bigK","c","cneg","bpowApprox","RemoveLiquidityFormStore","resetModal","shareToWithdraw","MAX_VALUE_EXCEEDED","SINGLE_ASSET","tokenOutAddress","getShareToWithdraw","getUserTokenPercentage","CreatePoolFormStore","weights","amounts","setDefaults","initializeTokenInputs","initializeCheckbox","splice","assetModal","activeTokenIndex","BAD_FEE","open","inputValue","BAD_WEIGHT","totalValue","getAssetPrice","isNaN","feeInput","getAmountInput","reduce","weightInput","getWeightInput","inputAmount","denormalizedBalance","lt","MINIMUM_BALANCE","weight","daiToken","addToken","setTokenWeight","refreshWeights","usdcToken","setFee","SwapsTableStore","isLoaded","newSwaps","concat","RootStore","dropdownStore","createPoolFormStore","swapsTableStore","ProxyStore","asyncSetup","e","storesContext","React","createContext","root","useStores","useContext","Circle","MessageWrapper","styled","rotate","keyframes","Spinner","img","Web3Manager","observer","children","useState","showLoader","setShowLoader","useEffect","timeout","clearTimeout","callback","savedCallback","useRef","current","setInterval","clearInterval","useInterval","src","TransactionStatusWrapper","TransactionWrapper","TransactionState","pending","Transaction","size","href","target","rel","TransactionListWrapper","Panel","TransactionHeader","TransactionPanel","confirmed","renderTransactions","transactions","getConfirmedTransactions","StyledLink","Lightbox","Wrapper","WALLET_VIEWS","WalletDropdown","walletView","setWalletView","walletDropdownOpen","toggleWalletDropdown","activePrevious","ref","usePrevious","loadWeb3Modal","onClick","loadWalletDropdown","StyledIdenticon","Identicon","innerHTML","appendChild","Jazzicon","parseInt","slice","Container","Button","button","props","small","primary","ButtonComponent","isActive","isPrimary","isSmall","text","disabled","Dropdown","Dropup","WarningIcon","Address","WalletButton","ErrorMessage","span","NetworkIcon","Activity","SpinnerWrapper","Wallet","hasPendingTransactions","alt","getStatusIcon","HeaderFrame","HeaderElement","AppName","Link","Header","to","formatPoolAssetChartData","datasets","getPoolTokenWeights","borderAlign","backgroundColor","getPoolTokenColors","borderColor","borderWidth","LiquidityPanelDataSource","Messages","HeaderRow","PoolLink","PoolRow","TableCell","width","TableCellHideMobile","AssetCell","TableCellRight","TableCellRightHideMobile","IdenticonText","PieChartWrapper","BreakdownContainer","AssetPercentageContainer","AssetPercentageText","AssetDot","dotColor","LiquidityPanel","dataSource","animation","duration","maintainAspectRatio","legend","display","tooltips","enabled","renderPoolsChart","poolsShown","sort","Fragment","liquidityText","volumeText","userLiquidityText","poolLiquidity","userLiquidity","calcUserLiquidity","sortedTokens","getTokenColor","renderAssetPercentages","ALL","noAccountPools","noAccount","HeaderWrapper","CreateLink","MyLiquidity","ACCOUNT","ButtonAction","ButtonContainer","WrapHeader","Advice","EthInputWrapper","errorBorders","WethInputWrapper","WrapElement","MaxLink","WrapEth","ethAmount","setEthAmount","wethAmount","setWethAmount","wethAddress","getWethAddress","handleMaxLinkClick","maxValue","actionButtonHandler","WRAP","UNWRAP","amountToUnwrap","onChange","placeholder","BuildVersion","BuildLink","BalanceHeader","BalanceElement","IconAndNameContainer","NotSupported","TokenIconAddress","TokenIcon","TokenName","TokenBalance","WalletBalances","buildId","REACT_APP_COMMIT_REF","renderBalance","iconUrl","tokenName","tokenBalance","whitelistedTokens","balanceToDisplay","returnBalance","userBalance","renderWalletBalances","AssetPanelContainer","AssetPanel","AssetWrapper","ErrorLabel","AssetOptions","assetModalInput","search","fetchTokenMetadata","fetchToken","isInvalidToken","getTokenErrors","noBool","transferFee","buckets","withBalance","withoutBalance","sortAssetOptions","filteredWhitelistedTokenMetadata","getFilteredTokenMetadata","isEther","alreadySelected","filteredWhitelistedTokens","userBalances","getAccountBalances","getAssetOptions","onSelectAsset","ModalContent","AssetSelectorHeader","HeaderContent","ExitComponent","InputContainer","SelectAssetModal","setSearch","handler","handleClick","event","contains","handleKeyUp","document","addEventListener","removeEventListener","useOnClickOutside","onClose","selectAsset","style","focus","Topic","TopicAction","TopicDelete","Filters","setModalOpen","setSelectedAssets","start","end","toAddressStub","getAssetName","String","removeAsset","Pagination","Page","SharedPools","getPublicPools","page","pagePools","HomeWrapper","Home","PrivatePools","getPrivatePools","PrivateWrapper","Private","PoolAssetChartPanel","LeftColumn","RightColumn","Spacer","AddressContainer","InformationContainer","AddRemovePanel","isFinalized","isZero","openModal","InfoPanelText","InfoPanelSubText","InfoPanel","subText","PoolInfo","ChartAndBreakdownWrapper","PoolOverview","shareText","getUserShareText","feeText","future","currentShare","futureShare","Input","Checkbox","OptionBase","OptionInactive","OptionActive","Option","SingleMultiToggle","onSelect","Background","BackgroundCircle","RadioButton","TableRow","inactive","DepositAmount","RadioButtonWrapper","Toggle","label","ToggleInput","ToggleSlider","InputWrapper","AddAssetTable","accountApprovalsLoaded","areAccountApprovalsLoaded","setActiveInputKey","calcRatio","setJoinRatio","refreshInputAmounts","handleCheckboxChange","setApprovalCheckboxTouched","approveMax","revokeApproval","handleInputChange","visuallyChecked","checkbox","getCheckbox","userBalanceToDisplay","inactiveToken","hasError","setActiveToken","renderAssetTable","AddLiquidityHeader","AddLiquidityBody","AddLiquidityContent","Message","Warning","Notification","Check","Icon","Content","LowerAmountLink","CheckboxWrapper","ButtonWrapper","AddLiquidityModal","findFrontrunnableToken","hasValidInput","maxAmountToBalanceRatio","maxRatioToken","denormAmount","amountToBalanceRatio","hasToken","history","useHistory","hasProxyInstance","hasConfirmed","tokenErrors","hasTokenError","currentTotal","addedTokens","calcPoolTokensByRatio","tokenInAddress","ROUND_UP","futureTotal","calculateUserShare","loading","lockedToken","findLockedToken","UNLOCK","ADD_LIQUIDITY","poolTokens","poolTotal","tokenAmountsIn","inputAmountIn","balanceAmountIn","min","formatInputsForJoin","ratioCalc","joinPool","setTransactionError","joinswapExternAmountIn","setDepositType","errorText","renderError","hasSnx","synth","hasSynth","aToken","hasAToken","cToken","hasCToken","renderTransferError","renderTokenError","every","toggleConfirmation","renderConfirmation","tokenWarnings","getTokenWarnings","renderTokenWarning","safeAmount","normalizedAmount","handleLowerAmountButton","renderFrontrunningWarning","expectedPoolAmountOut","slippage","renderLiquidityWarning","renderNotification","WithdrawAmount","WithdrawWrapper","WithdrawAmountWrapper","RemoveAssetsTable","setShareToWithdraw","poolBalanceToDisplay","getPoolToken","withdrawPreviewBalanceText","getTokenPrecision","userLiquidityContribution","getUserLiquidityContribution","tokensToWithdraw","tokenAmountNormalized","existingShare","showMaxLink","handleShareToWithdrawChange","renderWithdrawInput","RemoveLiquidityHeader","RemoveLiquidityBody","RemoveLiquidityContent","RemoveLiquidityModal","removedTokens","handleRemoveLiquidity","exitPool","formatZeroMinAmountsOut","exitswapPoolAmountIn","RemoveAssetTable","warning","expectedTokenAmountOut","hasSupply","renderActionButton","TableWrapper","BalancesTable","valueToDisplay","userBalanceValue","renderBalanceTable","ExternalLink","TableRowLoad","TableCellLoad","TableCellTokenHeader","TableCellTokenIn","TableCellTokenOut","TokenIconOut","TokenIconIn","TokenSymbol","TableCellAmountIn","TableCellAmountOut","TableCellTxHeader","TableCellTxDetails","ExternalIcon","SwapsTable","swapsLoaded","renderBottomRow","pagePoolSwaps","bottomRow","tokenInIcon","tokenInMetadata","tokenOutMetadata","tokenOutIcon","err","tx","amountOut","amountIn","timestamp","getTimezoneOffset","iso","toISOString","replace","formatDate","renderSwapsTable","STabs","Tabs","STabList","TabList","STab","Tab","STabPanel","TabPanel","PoolTabs","PoolViewWrapper","InfoPanelWrapper","PoolView","warningModalOpen","setWarningModalOpen","clearPoolSwaps","fetchActivePool","setActivePoolAddress","onActivePoolChanged","withRouter","Cross","WeightAmount","ValueLabel","DropdownIcon","CloseIcon","CreatePoolTable","handleWeightInputChange","refreshAmounts","handleAmountInputChange","setTokenAmount","handleChangeClick","handleRemoveClick","removeToken","tokenValues","NaN","valueText","hasWeightError","hasAmountError","relativeWeight","getRelativeWeight","formatRelativeWeight","setToken","setModalInputValue","SingleElement","Section","NewPool","hasFeeError","handleAddButtonClick","newToken","alreadyExists","handleCreateButtonClick","factory","getBFactoryAddress","denorms","handleUnlockButtonClick","renderUnlockButton","NewWrapper","SetupWrapper","SectionWrapper","Explainer","Setup","handleButtonClick","isInstanceReady","goBack","setDeploying","NavContainer","NavLink","LeftNav","exact","activeClassName","LeftContainer","App","className","path","component","New","Pool","Boolean","location","hostname","Root","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f221292f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circle.2d975615.svg\";","module.exports = __webpack_public_path__ + \"static/media/dropdown.7d32d2fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/dropup.0155fd07.svg\";","module.exports = __webpack_public_path__ + \"static/media/question.cc0a2451.svg\";","module.exports = __webpack_public_path__ + \"static/media/external-link.160dfcc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/x.32fa2ee9.svg\";","import { action, observable, ObservableMap } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { ethers } from 'ethers';\nimport UncheckedJsonRpcSigner from 'provider/UncheckedJsonRpcSigner';\nimport { ActionResponse, sendAction } from './actions/actions';\nimport { web3Window as window } from 'provider/Web3Window';\nimport { backupUrls, supportedChainId, web3Modal } from 'provider/connectors';\n\nexport enum ContractTypes {\n    BPool = 'BPool',\n    BActions = 'BActions',\n    BFactory = 'BFactory',\n    DSProxy = 'DSProxy',\n    DSProxyRegistry = 'DSProxyRegistry',\n    TestToken = 'TestToken',\n    ExchangeProxy = 'ExchangeProxy',\n    ExchangeProxyCallable = 'ExchangeProxyCallable',\n    Weth = 'Weth',\n    Multicall = 'Multicall',\n}\n\nexport const schema = {\n    BPool: require('../abi/BPool').abi,\n    BActions: require('../abi/BActions').abi,\n    BFactory: require('../abi/BFactory').abi,\n    DSProxy: require('../abi/DSProxy').abi,\n    DSProxyRegistry: require('../abi/DSProxyRegistry').abi,\n    TestToken: require('../abi/TestToken').abi,\n    ExchangeProxy: require('../abi/ExchangeProxy').abi,\n    ExchangeProxyCallable: require('../abi/ExchangeProxyCallable').abi,\n    Weth: require('../abi/Weth').abi,\n    Multicall: require('../abi/Multicall').abi,\n};\n\nexport interface ChainData {\n    currentBlockNumber: number;\n}\n\nenum ERRORS {\n    UntrackedChainId = 'Attempting to access data for untracked chainId',\n    ContextNotFound = 'Specified context name note stored',\n    BlockchainActionNoAccount = 'Attempting to do blockchain transaction with no account',\n    BlockchainActionNoChainId = 'Attempting to do blockchain transaction with no chainId',\n    BlockchainActionNoResponse = 'No error or response received from blockchain action',\n    NoWeb3 = 'Error Loading Web3',\n}\n\ntype ChainDataMap = ObservableMap<number, ChainData>;\n\nexport interface ProviderStatus {\n    activeChainId: number;\n    account: string;\n    library: any;\n    active: boolean;\n    injectedLoaded: boolean;\n    injectedActive: boolean;\n    injectedChainId: number;\n    injectedWeb3: any;\n    backUpLoaded: boolean;\n    backUpWeb3: any;\n    error: Error;\n    activeProvider: any;\n}\n\nconst GAS_LIMIT_BUFFER = 0.1;\n\nexport default class ProviderStore {\n    @observable chainData: ChainData;\n    @observable providerStatus: ProviderStatus;\n    web3Modal: any;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.chainData = { currentBlockNumber: -1 } as ChainData;\n        this.web3Modal = web3Modal;\n        this.providerStatus = {} as ProviderStatus;\n        this.providerStatus.active = false;\n        this.providerStatus.injectedLoaded = false;\n        this.providerStatus.injectedActive = false;\n        this.providerStatus.backUpLoaded = false;\n        this.providerStatus.activeProvider = null;\n        this.handleNetworkChanged = this.handleNetworkChanged.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\n    }\n\n    getCurrentBlockNumber(): number {\n        return this.chainData.currentBlockNumber;\n    }\n\n    async loadWeb3Modal(): Promise<void> {\n        let provider = await this.web3Modal.connect();\n        console.log(`[Provider] Web3Modal`);\n        if (provider) await this.loadWeb3(provider);\n    }\n\n    @action setCurrentBlockNumber(blockNumber): void {\n        this.chainData.currentBlockNumber = blockNumber;\n    }\n\n    @action fetchUserBlockchainData = async (account: string) => {\n        const {\n            transactionStore,\n            tokenStore,\n            contractMetadataStore,\n        } = this.rootStore;\n\n        console.debug('[Provider] fetchUserBlockchainData', {\n            account,\n        });\n\n        transactionStore.checkPendingTransactions(account);\n        tokenStore\n            .fetchTokenBalances(\n                account,\n                contractMetadataStore.getTrackedTokenAddresses()\n            )\n            .then(result => {\n                console.debug('[Fetch End - User Blockchain Data]', {\n                    account,\n                });\n            });\n    };\n\n    // account is optional\n    getProviderOrSigner(library, account) {\n        console.debug('[getProviderOrSigner', {\n            library,\n            account,\n            signer: library.getSigner(account),\n        });\n\n        return account\n            ? new UncheckedJsonRpcSigner(library.getSigner(account))\n            : library;\n    }\n\n    getContract(\n        type: ContractTypes,\n        address: string,\n        signerAccount?: string\n    ): ethers.Contract {\n        const library = this.providerStatus.library;\n\n        if (signerAccount) {\n            return new ethers.Contract(\n                address,\n                schema[type],\n                this.getProviderOrSigner(\n                    this.providerStatus.library,\n                    signerAccount\n                )\n            );\n        }\n\n        return new ethers.Contract(address, schema[type], library);\n    }\n\n    @action sendTransaction = async (\n        contractType: ContractTypes,\n        contractAddress: string,\n        action: string,\n        params: any[],\n        overrides?: any\n    ): Promise<ActionResponse> => {\n        const { transactionStore } = this.rootStore;\n        const chainId = this.providerStatus.activeChainId;\n        const account = this.providerStatus.account;\n\n        overrides = overrides ? overrides : {};\n\n        if (!account) {\n            throw new Error(ERRORS.BlockchainActionNoAccount);\n        }\n\n        if (!chainId) {\n            throw new Error(ERRORS.BlockchainActionNoChainId);\n        }\n\n        const contract = this.getContract(\n            contractType,\n            contractAddress,\n            account\n        );\n\n        const gasLimitNumber = await contract.estimate[action](\n            ...params,\n            overrides\n        );\n        const gasLimit = gasLimitNumber.toNumber();\n        const safeGasLimit = Math.floor(gasLimit * (1 + GAS_LIMIT_BUFFER));\n        overrides.gasLimit = safeGasLimit;\n\n        const response = await sendAction({\n            contract,\n            action,\n            sender: account,\n            data: params,\n            overrides,\n        });\n\n        const { error, txResponse } = response;\n\n        if (error) {\n            console.warn('[Send Transaction Error', error);\n        } else if (txResponse) {\n            transactionStore.addTransactionRecord(account, txResponse);\n        } else {\n            throw new Error(ERRORS.BlockchainActionNoResponse);\n        }\n\n        return response;\n    };\n\n    @action async handleNetworkChanged(\n        networkId: string | number\n    ): Promise<void> {\n        console.log(\n            `[Provider] Network change: ${networkId} ${this.providerStatus.active}`\n        );\n        // network change could mean switching from injected to backup or vice-versa\n        if (this.providerStatus.active) {\n            await this.loadWeb3();\n            const { blockchainFetchStore } = this.rootStore;\n            blockchainFetchStore.setFetchLoop(true);\n        }\n    }\n\n    @action async handleClose(): Promise<void> {\n        console.log(`[Provider] HandleClose() ${this.providerStatus.active}`);\n\n        if (this.providerStatus.active) await this.loadWeb3();\n    }\n\n    @action handleAccountsChanged(accounts: string[]): void {\n        console.log(`[Provider] Accounts changed`);\n        const {\n            blockchainFetchStore,\n            addLiquidityFormStore,\n            removeLiquidityFormStore,\n        } = this.rootStore;\n        addLiquidityFormStore.closeModal();\n        removeLiquidityFormStore.closeModal();\n\n        if (accounts.length === 0) {\n            this.handleClose();\n        } else {\n            this.providerStatus.account = accounts[0];\n            // Loads pool & balance data for account\n            blockchainFetchStore.setFetchLoop(true);\n        }\n    }\n\n    @action async loadProvider(provider) {\n        try {\n            // remove any old listeners\n            if (\n                this.providerStatus.activeProvider &&\n                this.providerStatus.activeProvider.on\n            ) {\n                console.log(`[Provider] Removing Old Listeners`);\n                this.providerStatus.activeProvider.removeListener(\n                    'chainChanged',\n                    this.handleNetworkChanged\n                );\n                this.providerStatus.activeProvider.removeListener(\n                    'accountsChanged',\n                    this.handleAccountsChanged\n                );\n                this.providerStatus.activeProvider.removeListener(\n                    'close',\n                    this.handleClose\n                );\n                this.providerStatus.activeProvider.removeListener(\n                    'networkChanged',\n                    this.handleNetworkChanged\n                );\n            }\n\n            if (\n                this.providerStatus.library &&\n                this.providerStatus.library.close\n            ) {\n                console.log(`[Provider] Closing Old Library.`);\n                await this.providerStatus.library.close();\n            }\n\n            let web3 = new ethers.providers.Web3Provider(provider);\n\n            if ((provider as any).isMetaMask) {\n                console.log(`[Provider] MetaMask Auto Refresh Off`);\n                (provider as any).autoRefreshOnNetworkChange = false;\n            }\n\n            if (provider.on) {\n                console.log(`[Provider] Subscribing Listeners`);\n                provider.on('chainChanged', this.handleNetworkChanged); // For now assume network/chain ids are same thing as only rare case when they don't match\n                provider.on('accountsChanged', this.handleAccountsChanged);\n                provider.on('close', this.handleClose);\n                provider.on('networkChanged', this.handleNetworkChanged);\n            }\n\n            let network = await web3.getNetwork();\n\n            const accounts = await web3.listAccounts();\n            let account = null;\n            if (accounts.length > 0) account = accounts[0];\n\n            this.providerStatus.injectedLoaded = true;\n            this.providerStatus.injectedChainId = network.chainId;\n            this.providerStatus.account = account;\n            this.providerStatus.injectedWeb3 = web3;\n            this.providerStatus.activeProvider = provider;\n            console.log(`[Provider] Provider loaded.`);\n        } catch (err) {\n            console.error(`[Provider] Loading Error`, err);\n            this.providerStatus.injectedLoaded = false;\n            this.providerStatus.injectedChainId = null;\n            this.providerStatus.account = null;\n            this.providerStatus.library = null;\n            this.providerStatus.active = false;\n            this.providerStatus.activeProvider = null;\n        }\n    }\n\n    @action async loadWeb3(provider = null) {\n        /*\n        Handles loading web3 provider.\n        Injected web3 loaded and active if chain Id matches.\n        Backup web3 loaded and active if no injected or injected chain Id not correct.\n        */\n        if (provider === null && window.ethereum) {\n            console.log(`[Provider] Loading Injected Provider`);\n            await this.loadProvider(window.ethereum);\n        } else if (provider) {\n            console.log(`[Provider] Loading Provider`);\n            await this.loadProvider(provider);\n        }\n\n        // If no injected provider or inject provider is wrong chain fall back to Infura\n        if (\n            !this.providerStatus.injectedLoaded ||\n            this.providerStatus.injectedChainId !== supportedChainId\n        ) {\n            console.log(\n                `[Provider] Reverting To Backup Provider.`,\n                this.providerStatus\n            );\n            try {\n                let web3 = new ethers.providers.JsonRpcProvider(\n                    backupUrls[supportedChainId]\n                );\n                let network = await web3.getNetwork();\n                this.providerStatus.injectedActive = false;\n                this.providerStatus.backUpLoaded = true;\n                this.providerStatus.account = null;\n                this.providerStatus.activeChainId = network.chainId;\n                this.providerStatus.backUpWeb3 = web3;\n                this.providerStatus.library = web3;\n                this.providerStatus.activeProvider =\n                    backupUrls[supportedChainId];\n                console.log(`[Provider] BackUp Provider Loaded & Active`);\n            } catch (err) {\n                console.error(`[Provider] loadWeb3 BackUp Error`, err);\n                this.providerStatus.injectedActive = false;\n                this.providerStatus.backUpLoaded = false;\n                this.providerStatus.account = null;\n                this.providerStatus.activeChainId = null;\n                this.providerStatus.backUpWeb3 = null;\n                this.providerStatus.library = null;\n                this.providerStatus.active = false;\n                this.providerStatus.activeProvider = null;\n                this.providerStatus.error = new Error(ERRORS.NoWeb3);\n                return;\n            }\n        } else {\n            console.log(`[Provider] Injected provider active.`);\n            this.providerStatus.library = this.providerStatus.injectedWeb3;\n            this.providerStatus.activeChainId = this.providerStatus.injectedChainId;\n            this.providerStatus.injectedActive = true;\n            if (this.providerStatus.account)\n                this.fetchUserBlockchainData(this.providerStatus.account);\n        }\n\n        this.providerStatus.active = true;\n        console.log(`[Provider] Provider Active.`, this.providerStatus);\n    }\n}\n","import * as ethers from 'ethers';\n\nclass UncheckedJsonRpcSigner extends ethers.Signer {\n    signer: any;\n\n    constructor(signer) {\n        super();\n        ethers.utils.defineReadOnly(this, 'signer', signer);\n        ethers.utils.defineReadOnly(this, 'provider', signer.provider);\n    }\n\n    getAddress() {\n        return this.signer.getAddress();\n    }\n\n    sendTransaction(transaction) {\n        return this.signer.sendUncheckedTransaction(transaction).then(hash => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: confirmations => {\n                    return this.signer.provider.waitForTransaction(\n                        hash,\n                        confirmations\n                    );\n                },\n            };\n        });\n    }\n\n    signMessage(message) {\n        return this.signer.signMessage(message);\n    }\n}\n\nexport default UncheckedJsonRpcSigner;\n","import { Contract } from 'ethers';\nimport { TransactionResponse } from 'ethers/providers';\n\ninterface ActionRequest {\n    contract: Contract;\n    action: string;\n    sender: string;\n    data: any[];\n    overrides: any;\n}\n\nexport interface ActionResponse {\n    contract: Contract;\n    action: string;\n    sender: string;\n    data: object;\n    txResponse: TransactionResponse | undefined;\n    error: any | undefined;\n}\n\nconst preLog = (params: ActionRequest) => {\n    console.debug(`[@action start: ${params.action}]`, {\n        contract: params.contract,\n        action: params.action,\n        sender: params.sender,\n        data: params.data,\n        overrides: params.overrides,\n    });\n};\n\nconst postLog = (result: ActionResponse) => {\n    console.debug(`[@action end: ${result.action}]`, {\n        contract: result.contract,\n        action: result.action,\n        sender: result.sender,\n        data: result.data,\n        result: result.txResponse,\n        error: result.error,\n    });\n};\n\nexport const sendAction = async (\n    params: ActionRequest\n): Promise<ActionResponse> => {\n    const { contract, action, sender, data, overrides } = params;\n    preLog(params);\n\n    const actionResponse: ActionResponse = {\n        contract,\n        action,\n        sender,\n        data,\n        txResponse: undefined,\n        error: undefined,\n    };\n\n    try {\n        actionResponse.txResponse = await contract[action](...data, overrides);\n    } catch (e) {\n        actionResponse.error = e;\n    }\n\n    postLog(actionResponse);\n    return actionResponse;\n};\n","// @ts-ignore\ninterface Web3Window extends Window {\n    readonly web3?: any;\n    readonly ethereum?: any;\n}\n\nconst web3Window = window as Web3Window;\nexport { web3Window };\n","import Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport Portis from '@portis/web3';\n\nconst providerOptions = {\n    walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n            infuraId: process.env.REACT_APP_INFURA_ID,\n        },\n    },\n    portis: {\n        package: Portis,\n        options: {\n            id: '3f1c3cfc-7dd5-4e8a-aa03-71ff7396d9fe',\n        },\n    },\n};\n\nexport const web3Modal = new Web3Modal({\n    providerOptions: providerOptions,\n    theme: {\n        background: '#282932',\n        main: '#282932',\n        secondary: '#90a4ae',\n        border: '#41476b',\n        hover: '#21222c',\n    },\n});\n\nexport const supportedChainId = Number(\n    process.env.REACT_APP_SUPPORTED_NETWORK_ID\n);\n\nexport const getSupportedChainId = () => {\n    return supportedChainId;\n};\n\nexport const getSupportedChainName = () => {\n    return chainNameById[supportedChainId];\n};\n\nexport const chainNameById = {\n    '1': 'mainnet',\n    '3': 'ropsten',\n    '42': 'kovan',\n};\n\nexport const isChainIdSupported = (chainId: number): boolean => {\n    return supportedChainId === chainId;\n};\n\nconst RPC_URLS: { [chainId: number]: string } = {\n    1: process.env.REACT_APP_RPC_URL_1 as string,\n    3: process.env.REACT_APP_RPC_URL_3 as string,\n    42: process.env.REACT_APP_RPC_URL_42 as string,\n};\n\nexport const SUBGRAPH_URLS: { [chainId: number]: string } = {\n    1: process.env.REACT_APP_SUBGRAPH_URL_1 as string,\n    3: process.env.REACT_APP_SUBGRAPH_URL_3 as string,\n    42: process.env.REACT_APP_SUBGRAPH_URL_42 as string,\n};\n\nexport const backupUrls = {};\nbackupUrls[supportedChainId] = RPC_URLS[supportedChainId];\n","import { BigNumber } from 'bignumber.js';\n\nBigNumber.config({\n    EXPONENTIAL_AT: [-100, 100],\n    ROUNDING_MODE: BigNumber.ROUND_DOWN,\n    DECIMAL_PLACES: 18,\n});\n\nexport { BigNumber };\n","// Libraries\nimport React from 'react';\nimport jazzicon from 'jazzicon';\nimport { ethers, utils } from 'ethers';\nimport { BigNumber } from 'utils/bignumber';\nimport { Pool } from '../types';\n\n// Utils\nexport const MAX_GAS = utils.bigNumberify('0xffffffff');\nexport const MAX_UINT = utils.bigNumberify(ethers.constants.MaxUint256);\nexport const POOL_TOKENS_DECIMALS = 18;\n\nexport function toChecksum(address) {\n    return utils.getAddress(address);\n}\n\nexport const formatDate = timestamp => {\n    const date = new Date(timestamp * 1000);\n    return `${date.toDateString()} ${addZero(date.getHours())}:${addZero(\n        date.getMinutes()\n    )}:${addZero(date.getSeconds())}`;\n};\n\nexport const addZero = value => {\n    return value > 9 ? value : `0${value}`;\n};\n\nexport function bnum(\n    val: string | number | utils.BigNumber | BigNumber\n): BigNumber {\n    return new BigNumber(val.toString());\n}\n\nexport function scale(input: BigNumber, decimalPlaces: number): BigNumber {\n    const scalePow = new BigNumber(decimalPlaces.toString());\n    const scaleMul = new BigNumber(10).pow(scalePow);\n    return input.times(scaleMul);\n}\n\nexport function fromWei(val: string | utils.BigNumber | BigNumber): string {\n    return utils.formatEther(val.toString());\n}\n\nexport function toWei(val: string | utils.BigNumber | BigNumber): BigNumber {\n    return scale(bnum(val.toString()), 18).integerValue();\n}\n\nexport function setPropertyToMaxUintIfEmpty(value?): string {\n    if (!value || value === 0 || value === '') {\n        value = MAX_UINT.toString();\n    }\n    return value;\n}\n\nexport function setPropertyToZeroIfEmpty(value?): string {\n    if (!value || value === '') {\n        value = '0';\n    }\n    return value;\n}\n\nexport function hasApproval(amount: BigNumber): boolean {\n    return amount.gt(bnum('0'));\n}\n\nexport function hasMaxApproval(amount: BigNumber): boolean {\n    return amount.gte(bnum('79228162514264337593543950335')); // uint96(-1)\n}\n\nexport function toAddressStub(address) {\n    const start = address.slice(0, 5);\n    const end = address.slice(-3);\n\n    return `${start}...${end}`;\n}\n\nexport function isEmpty(str: string): boolean {\n    return !str || 0 === str.length;\n}\n\nexport function roundValue(value, decimals = 4): string {\n    const decimalPoint = value.indexOf('.');\n    if (decimalPoint === -1) {\n        return value;\n    }\n    return value.slice(0, decimalPoint + decimals + 1);\n}\n\nexport function str(value: any): string {\n    return value.toString();\n}\n\nexport function tinyAddress(address, digits = 4) {\n    if (!isAddress(address)) {\n        throw Error(`Invalid 'address' parameter '${address}'.`);\n    }\n    return `${address.substring(0, digits + 2)}..${address.substring(\n        42 - digits\n    )}`;\n}\n\nexport function shortenAddress(address, digits = 4) {\n    if (!isAddress(address)) {\n        throw Error(`Invalid 'address' parameter '${address}'.`);\n    }\n    return `${address.substring(0, digits + 2)}...${address.substring(\n        42 - digits\n    )}`;\n}\n\nexport function shortenTransactionHash(hash, digits = 4) {\n    return `${hash.substring(0, digits + 2)}...${hash.substring(66 - digits)}`;\n}\n\nexport function isAddress(value) {\n    try {\n        return ethers.utils.getAddress(value.toLowerCase());\n    } catch {\n        return false;\n    }\n}\n\nexport function formatFee(fee: BigNumber) {\n    return fee.times(100).toString() + '%';\n}\n\nexport function formatPercentage(\n    value: BigNumber,\n    decimals: number,\n    useLowerLimit = true\n): string {\n    if (value.lte(0.0001) && value.gt(0) && useLowerLimit) {\n        return '<0.01%';\n    }\n\n    return `${value.times(100).toFormat(decimals, BigNumber.ROUND_DOWN)}%`;\n}\n\nconst ETHERSCAN_PREFIXES = {\n    1: '',\n    3: 'ropsten.',\n    4: 'rinkeby.',\n    5: 'goerli.',\n    42: 'kovan.',\n};\n\nexport function getEtherscanLink(networkId, data, type) {\n    const prefix = `https://${ETHERSCAN_PREFIXES[networkId] ||\n        ETHERSCAN_PREFIXES[1]}etherscan.io`;\n\n    switch (type) {\n        case 'transaction': {\n            return `${prefix}/tx/${data}`;\n        }\n        case 'address':\n        default: {\n            return `${prefix}/address/${data}`;\n        }\n    }\n}\n\nexport function fromPercentage(value: BigNumber | string): BigNumber {\n    const bn = bnum(value.toString());\n    return bn.div(100);\n}\n\nexport function toPercentage(value: BigNumber | string): BigNumber {\n    const bn = bnum(value.toString());\n    return bn.times(100);\n}\n\nexport function getQueryParam(windowLocation, name) {\n    var q = windowLocation.search.match(\n        new RegExp('[?&]' + name + '=([^&#?]*)')\n    );\n    return q && q[1];\n}\n\nexport const copyToClipboard = e => {\n    const value = e.target.title.replace(',', '');\n    var aux = document.createElement('input');\n    aux.setAttribute('value', value);\n    document.body.appendChild(aux);\n    aux.select();\n    document.execCommand('copy');\n    document.body.removeChild(aux);\n    alert(`Value: \"${value}\" copied to clipboard`);\n};\n\nexport const etherscanUrl = network => {\n    return `https://${network !== 'main' ? `${network}.` : ''}etherscan.io`;\n};\n\nexport const etherscanAddress = (network, text, address) => {\n    return (\n        <a\n            className=\"address\"\n            href={`${etherscanUrl(network)}/address/${address}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            {text}\n        </a>\n    );\n};\n\nexport const etherscanTx = (network, text, tx) => {\n    return (\n        <a\n            href={`${etherscanUrl(network)}/tx/${tx}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            {text}\n        </a>\n    );\n};\n\nexport const etherscanToken = (network, text, token, holder = false) => {\n    return (\n        <a\n            href={`${etherscanUrl(network)}/token/${token}${\n                holder ? `?a=${holder}` : ''\n            }`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            {text}\n        </a>\n    );\n};\n\nexport const generateIcon = address => {\n    return jazzicon(28, address.substr(0, 10));\n};\n\nexport const normalizePriceValues = (\n    inputValue: BigNumber,\n    outputValue: BigNumber\n): {\n    normalizedInput: BigNumber;\n    normalizedOutput: BigNumber;\n} => {\n    const multiplier = bnum(1).div(inputValue);\n    return {\n        normalizedInput: bnum(1),\n        normalizedOutput: outputValue.times(multiplier),\n    };\n};\n\nexport const formatNormalizedTokenValue = (\n    normalizedBalance: BigNumber,\n    displayPrecision: number,\n    truncateAt?: number\n): string => {\n    if (normalizedBalance.eq(0)) {\n        return bnum(0).toFixed(2);\n    }\n\n    let result = bnum(normalizedBalance)\n        .decimalPlaces(displayPrecision, BigNumber.ROUND_DOWN)\n        .toString();\n\n    result = padToDecimalPlaces(result, 2);\n\n    if (truncateAt && result.length > truncateAt) {\n        return result.substring(0, 20) + '...';\n    } else {\n        return result;\n    }\n};\n\nexport const formatBalanceTruncated = (\n    balance: BigNumber,\n    decimals: number,\n    precision: number,\n    truncateAt: number\n): string => {\n    const result = formatBalance(balance, decimals, precision);\n    if (result.length > truncateAt) {\n        return result.substring(0, 20) + '...';\n    } else {\n        return result;\n    }\n};\n\nexport const formatCurrency = (balance: BigNumber): string => {\n    const fmt = {\n        decimalSeparator: '.',\n        groupSeparator: ',',\n        groupSize: 3,\n    };\n    return balance.toFormat(2, BigNumber.ROUND_DOWN, fmt);\n};\n\nexport const formatBalance = (\n    balance: BigNumber,\n    decimals: number,\n    precision: number\n): string => {\n    if (balance.eq(0)) {\n        return bnum(0).toFixed(2);\n    }\n\n    const result = scale(balance, -decimals)\n        .decimalPlaces(precision, BigNumber.ROUND_DOWN)\n        .toString();\n\n    return padToDecimalPlaces(result, 2);\n};\n\nexport const padToDecimalPlaces = (\n    value: string,\n    minDecimals: number\n): string => {\n    const split = value.split('.');\n    const zerosToPad = split[1] ? minDecimals - split[1].length : minDecimals;\n\n    if (zerosToPad > 0) {\n        let pad = '';\n\n        // Add decimal point if no decimal portion in original number\n        if (zerosToPad === minDecimals) {\n            pad += '.';\n        }\n        for (let i = 0; i < zerosToPad; i++) {\n            pad += '0';\n        }\n        return value + pad;\n    }\n    return value;\n};\n\nexport const isTxReverted = response => {\n    const { error } = response;\n    if (!error) {\n        return false;\n    }\n    return error.code === -32016;\n};\n\nexport const getGasPriceFromETHGasStation = () => {\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n            reject('Request timed out!');\n        }, 3000);\n\n        fetch('https://ethgasstation.info/json/ethgasAPI.json').then(\n            stream => {\n                stream.json().then(price => {\n                    clearTimeout(timeout);\n                    resolve(price);\n                });\n            },\n            e => {\n                clearTimeout(timeout);\n                reject(e);\n            }\n        );\n    });\n};\n\nexport const printPool = (pool: Pool) => {\n    console.log('pool', pool.address, pool);\n};\n","import { action, observable } from 'mobx';\nimport { providers } from 'ethers';\nimport RootStore from 'stores/Root';\nimport { TransactionResponse } from 'ethers/providers';\n\nexport interface TransactionRecord {\n    hash: string;\n    response: providers.TransactionResponse;\n    blockNumberChecked: number;\n    receipt: providers.TransactionReceipt | undefined;\n}\n\nconst ERRORS = {\n    unknownTxHash: 'Transaction hash is not stored',\n    unknownNetworkId: 'NetworkID specified is not tracked',\n    txHashAlreadyExists: 'Transaction hash already exists for network',\n    txHasNoHash: 'Attempting to add transaction record without hash',\n};\n\nexport enum FetchCode {\n    SUCCESS,\n    FAILURE,\n    STALE,\n}\n\nexport interface TransactionRecordMap {\n    [index: string]: TransactionRecord[];\n}\n\nexport default class TransactionStore {\n    @observable txRecords: TransactionRecordMap;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.txRecords = {} as TransactionRecordMap;\n    }\n\n    // @dev Transactions are pending if we haven't seen their receipt yet\n    getPendingTransactions(account: string): TransactionRecord[] {\n        if (this.txRecords[account]) {\n            const records = this.txRecords[account];\n            return records.filter(value => {\n                return this.isTxPending(value);\n            });\n        }\n\n        return [] as TransactionRecord[];\n    }\n\n    getConfirmedTransactions(account: string): TransactionRecord[] {\n        if (this.txRecords[account]) {\n            const records = this.txRecords[account];\n            return records.filter(value => {\n                return !this.isTxPending(value);\n            });\n        }\n\n        return [] as TransactionRecord[];\n    }\n\n    hasPendingTransactions(account: string): boolean {\n        let pending = this.getPendingTransactions(account);\n        if (pending.length > 0) return true;\n        return false;\n    }\n\n    @action async checkPendingTransactions(account): Promise<FetchCode> {\n        const { providerStore } = this.rootStore;\n        const currentBlock = providerStore.getCurrentBlockNumber();\n\n        const library = providerStore.providerStatus.library;\n        if (this.txRecords[account]) {\n            const records = this.txRecords[account];\n            records.forEach(value => {\n                if (\n                    this.isTxPending(value) &&\n                    this.isStale(value, currentBlock)\n                ) {\n                    library\n                        .getTransactionReceipt(value.hash)\n                        .then(receipt => {\n                            value.blockNumberChecked = currentBlock;\n                            if (receipt) {\n                                value.receipt = receipt;\n                            }\n                        })\n                        .catch(() => {\n                            value.blockNumberChecked = currentBlock;\n                        });\n                }\n            });\n        }\n\n        return FetchCode.SUCCESS;\n    }\n\n    // @dev Add transaction record. It's in a pending state until mined.\n    @action addTransactionRecord(\n        account: string,\n        txResponse: TransactionResponse\n    ) {\n        const record: TransactionRecord = {\n            hash: txResponse.hash,\n            response: txResponse,\n            blockNumberChecked: 0,\n            receipt: undefined,\n        };\n\n        const txHash = txResponse.hash;\n\n        if (!txHash) {\n            throw new Error(\n                'Attempting to add transaction record without hash'\n            );\n        }\n\n        let records = this.txRecords[account];\n\n        if (records) {\n            const duplicate = records.find(value => value.hash === txHash);\n            if (!!duplicate) {\n                throw new Error(ERRORS.txHashAlreadyExists);\n            }\n            this.txRecords[account].push(record);\n        } else {\n            this.txRecords[account] = [] as TransactionRecord[];\n            this.txRecords[account].push(record);\n        }\n    }\n\n    private isTxPending(txRecord: TransactionRecord): boolean {\n        return !txRecord.receipt;\n    }\n\n    private isStale(txRecord: TransactionRecord, currentBlock: number) {\n        return txRecord.blockNumberChecked < currentBlock;\n    }\n}\n","import { TokenBalance, TotalSupply, UserAllowance } from '../Token';\n\nexport enum AsyncStatus {\n    SUCCESS,\n    STALE,\n    TIMEOUT,\n    FAILURE,\n}\n\nexport interface TokenBalanceFetchRequest {\n    tokenAddress: string;\n    account: string;\n    fetchBlock: number;\n}\n\nexport class Fetch {\n    status: AsyncStatus;\n    request: any;\n    payload: any;\n\n    constructor({ status, request, payload }) {\n        this.status = status;\n        this.request = request;\n        this.payload = payload;\n    }\n}\n\nexport class TokenBalanceFetch {\n    status: AsyncStatus;\n    request: TokenBalanceFetchRequest;\n    payload: TokenBalance | undefined;\n\n    constructor({ status, request, payload }) {\n        this.status = status;\n        this.request = request;\n        this.payload = payload;\n    }\n}\n\nexport interface UserAllowanceFetchRequest {\n    tokenAddress: string;\n    owner: string;\n    spender: string;\n    fetchBlock: number;\n}\n\nexport class UserAllowanceFetch {\n    status: AsyncStatus;\n    request: UserAllowanceFetchRequest;\n    payload: UserAllowance | undefined;\n    error?: string;\n\n    constructor(params) {\n        this.status = params.status;\n        this.request = params.request;\n        this.payload = params.payload;\n        if (params.error) {\n            this.error = params.error;\n        }\n    }\n}\n\nexport interface TotalSupplyFetchRequest {\n    tokenAddress: string;\n    fetchBlock: number;\n}\n\nexport class TotalSupplyFetch {\n    status: AsyncStatus;\n    request: TotalSupplyFetchRequest;\n    payload: TotalSupply | undefined;\n    error?: string;\n\n    constructor(params) {\n        this.status = params.status;\n        this.request = params.request;\n        this.payload = params.payload;\n        if (params.error) {\n            this.error = params.error;\n        }\n    }\n}\n","import fetch from 'isomorphic-fetch';\nimport { getAddress } from 'ethers/utils';\nimport { Pool, PoolToken, Swap } from '../types';\nimport { bnum } from '../utils/helpers';\nimport { getSupportedChainId, SUBGRAPH_URLS } from './connectors';\n\nconst chainId = getSupportedChainId();\nconst SUBGRAPH_URL = SUBGRAPH_URLS[chainId];\n\nenum QueryType {\n    SHARED_POOLS,\n    PRIVATE_POOLS,\n    CONTRIBUTED_POOLS,\n    SINGLE_POOL,\n}\n\nclass QueryParams {\n    pageIncrement?: number;\n    skip?: number;\n    account?: string;\n    tokens?: string[];\n    address?: string;\n}\n\nexport async function fetchSharedPools(\n    pageIncrement: number,\n    skip: number,\n    tokens?: string[]\n): Promise<Pool[]> {\n    const params = {\n        pageIncrement,\n        skip,\n        tokens,\n    };\n    const query = getPoolQuery(QueryType.SHARED_POOLS, params);\n    const rawPools = await fetchPools(query);\n    const pools = processPools(rawPools);\n    return pools;\n}\n\nexport async function fetchPrivatePools(): Promise<Pool[]> {\n    const params = {\n        pageIncrement: 100,\n        skip: 0,\n    };\n    const query = getPoolQuery(QueryType.PRIVATE_POOLS, params);\n    const rawPools = await fetchPools(query);\n    const pools = processPools(rawPools);\n    return pools;\n}\n\nexport async function fetchContributedPools(account: string): Promise<Pool[]> {\n    const params = {\n        pageIncrement: 100,\n        skip: 0,\n        account,\n    };\n    const query = getPoolQuery(QueryType.CONTRIBUTED_POOLS, params);\n    const rawPools = await fetchPools(query);\n    const pools = processPools(rawPools);\n    return pools;\n}\n\nexport async function fetchPool(address: string): Promise<Pool> {\n    const params = {\n        address,\n    };\n    const query = getPoolQuery(QueryType.SINGLE_POOL, params);\n    const rawPools = await fetchPools(query);\n    const pools = processPools(rawPools);\n    return pools[0];\n}\n\nexport async function fetchPoolSwaps(\n    poolAddress: string,\n    pageIncrement: number,\n    skip: number\n): Promise<any[]> {\n    const query = `\n        {\n            swaps(where: {poolAddress: \"${poolAddress.toLowerCase()}\"}, first: ${pageIncrement} , skip: ${skip}, orderBy: timestamp, orderDirection: desc) {\n                id\n                timestamp\n                tokenIn\n                tokenInSym\n                tokenAmountIn\n                tokenOut\n                tokenOutSym\n                tokenAmountOut\n            }\n        }\n    `;\n\n    const response = await fetch(SUBGRAPH_URL, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            query,\n        }),\n    });\n\n    const { data } = await response.json();\n    return data.swaps;\n}\n\nfunction getPoolQuery(type: QueryType, params: QueryParams): string {\n    const ts = Math.round(new Date().getTime() / 1000);\n    const tsYesterday = Math.round((ts - 24 * 3600) / 1000) * 1000;\n    const { tokens } = params;\n    const tokenStr = tokens\n        ? `, tokensList_contains: ${JSON.stringify(\n              tokens.map(token => token.toLowerCase())\n          )}`\n        : '';\n    const poolFields = `\n        id\n        publicSwap\n        finalized\n        swapFee\n        totalWeight\n        totalShares\n        totalSwapVolume\n        tokensList\n        tokens {\n            id\n            address\n            balance\n            decimals\n            symbol\n            denormWeight\n        }\n        swaps (\n            first: 1,\n            orderBy: timestamp,\n            orderDirection: desc,\n            where: {\n                timestamp_lt: ${tsYesterday}\n            }\n        ) {\n            tokenIn\n            tokenInSym\n            tokenAmountIn\n            tokenOut\n            tokenOutSym\n            tokenAmountOut\n            poolTotalSwapVolume\n        }\n    `;\n    if (type === QueryType.SHARED_POOLS) {\n        const { pageIncrement, skip } = params;\n        return `\n            {\n                pools (\n                    first: ${pageIncrement},\n                    skip: ${skip},\n                    where: {\n                        finalized: true,\n                        tokensList_not: []\n                        ${tokenStr}\n                    },\n                    orderBy: liquidity,\n                    orderDirection: desc,\n                ) {\n                    ${poolFields}\n                }\n            }\n        `;\n    }\n    if (type === QueryType.PRIVATE_POOLS) {\n        const { pageIncrement, skip } = params;\n        return `\n            {\n                pools (\n                    first: ${pageIncrement},\n                    skip: ${skip},\n                    where: {\n                        finalized: false,\n                        tokensList_not: []\n                    },\n                    orderBy: liquidity,\n                    orderDirection: desc,\n                ) {\n                    ${poolFields}\n                }\n            }\n        `;\n    }\n    if (type === QueryType.CONTRIBUTED_POOLS) {\n        const { account } = params;\n        return `\n            {\n                poolShares(where: {\n                    userAddress: \"${account.toLowerCase()}\"\n                }) {\n                    poolId {\n                        ${poolFields}\n                    }\n                }\n            }\n        `;\n    }\n    if (type === QueryType.SINGLE_POOL) {\n        const { address } = params;\n        return `\n            {\n                pool(id: \"${address.toLowerCase()}\") {\n                    ${poolFields}\n                }\n            }\n        `;\n    }\n}\n\nasync function fetchPools(query: string) {\n    const EXPONENTIAL_BACKOFF_FACTOR = 2;\n    let delay = 1000;\n\n    let pools;\n    while (!pools) {\n        const response = await fetch(SUBGRAPH_URL, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                query,\n            }),\n        });\n\n        const payload = await response.json();\n        if (payload.errors) {\n            await sleep(delay);\n            delay *= EXPONENTIAL_BACKOFF_FACTOR;\n            continue;\n        }\n        const { data } = payload;\n        if (data.pools) {\n            pools = data.pools;\n        }\n        if (data.poolShares) {\n            pools = data.poolShares.map(poolShare => poolShare.poolId);\n        }\n        if (data.pool) {\n            pools = [data.pool];\n        }\n    }\n    return pools;\n}\n\nfunction processPools(rawPools): Pool[] {\n    return rawPools.map(pool => {\n        const tokensList = pool.tokensList\n            ? pool.tokensList.map(tokenAddress => {\n                  return getAddress(tokenAddress);\n              })\n            : [];\n        const processedPool: Pool = {\n            address: getAddress(pool.id),\n            publicSwap: pool.publicSwap,\n            finalized: pool.finalized,\n            swapFee: bnum(pool.swapFee),\n            totalWeight: bnum(pool.totalWeight),\n            totalShares: bnum(pool.totalShares),\n            totalSwapVolume: bnum(pool.totalSwapVolume),\n            tokensList,\n            tokens: pool.tokens.map(token => {\n                return {\n                    address: getAddress(token.address),\n                    balance: bnum(token.balance),\n                    decimals: token.decimals,\n                    denormWeight: bnum(token.denormWeight),\n                    denormWeightProportion: bnum(token.denormWeight).div(\n                        bnum(pool.totalWeight)\n                    ),\n                    symbol: token.symbol,\n                } as PoolToken;\n            }),\n            shares: [],\n            swaps: pool.swaps.map(swap => {\n                return {\n                    tokenIn: getAddress(swap.tokenIn),\n                    tokenAmountIn: bnum(swap.tokenAmountIn),\n                    tokenInSym: swap.tokenInSym,\n                    tokenOut: getAddress(swap.tokenOut),\n                    tokenAmountOut: bnum(swap.tokenAmountOut),\n                    tokenOutSym: swap.tokenOutSym,\n                    poolTotalSwapVolume: bnum(swap.poolTotalSwapVolume),\n                } as Swap;\n            }),\n            lastSwapVolume: pool.swaps[0]\n                ? bnum(pool.totalSwapVolume).minus(\n                      pool.swaps[0].poolTotalSwapVolume\n                  )\n                : bnum(pool.totalSwapVolume),\n        };\n\n        return processedPool;\n    });\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { ContractTypes } from 'stores/Provider';\nimport * as helpers from 'utils/helpers';\nimport { bnum, scale } from 'utils/helpers';\nimport { parseEther, Interface } from 'ethers/utils';\nimport { FetchCode } from './Transaction';\nimport { BigNumber } from 'utils/bignumber';\nimport { AsyncStatus, UserAllowanceFetch } from './actions/fetch';\nimport { BigNumberMap } from '../types';\nimport { ActionResponse } from './actions/actions';\n\nconst tokenAbi = require('../abi/TestToken').abi;\n\nexport interface ContractMetadata {\n    bFactory: string;\n    proxy: string;\n    weth: string;\n    tokens: TokenMetadata[];\n}\n\nexport interface TokenBalance {\n    balance: BigNumber;\n    lastFetched: number;\n}\n\nexport interface UserAllowance {\n    allowance: BigNumber;\n    lastFetched: number;\n}\n\nexport interface TotalSupply {\n    totalSupply: BigNumber;\n    lastFetched: number;\n}\n\ninterface TotalSupplyMap {\n    [index: string]: TotalSupply;\n}\n\ninterface TokenBalanceMap {\n    [index: string]: {\n        [index: string]: TokenBalance;\n    };\n}\n\nexport interface TokenMetadata {\n    address: string;\n    symbol: string;\n    decimals: number;\n    iconAddress: string;\n    precision: number;\n}\n\ninterface BlockNumberMap {\n    [index: number]: {\n        [index: string]: number;\n    };\n}\n\ninterface UserAllowanceMap {\n    [index: string]: {\n        [index: string]: {\n            [index: string]: UserAllowance;\n        };\n    };\n}\n\nexport const EtherKey = 'ether';\n\nexport default class TokenStore {\n    @observable symbols = {};\n    @observable balances: TokenBalanceMap;\n    @observable allowances: UserAllowanceMap;\n    @observable totalSupplies: TotalSupplyMap;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.balances = {} as TokenBalanceMap;\n        this.allowances = {} as UserAllowanceMap;\n        this.totalSupplies = {} as TotalSupplyMap;\n    }\n\n    getAccountBalances(\n        tokenAddresses: string[],\n        account: string\n    ): BigNumberMap {\n        const result: BigNumberMap = {};\n        tokenAddresses.forEach(tokenAddress => {\n            if (\n                this.balances[tokenAddress] &&\n                this.balances[tokenAddress][account]\n            ) {\n                result[tokenAddress] = this.balances[tokenAddress][\n                    account\n                ].balance;\n            }\n        });\n\n        return result;\n    }\n\n    areAccountApprovalsLoaded(\n        tokenAddresses: string[],\n        account: string,\n        spender: string\n    ): boolean {\n        const approvals = this.getAllowances(tokenAddresses, account, spender);\n        return Object.keys(approvals).length === tokenAddresses.length;\n    }\n\n    @action async fetchAccountApprovals(\n        tokenAddresses: string[],\n        account: string,\n        spender: string\n    ) {\n        const { providerStore, contractMetadataStore } = this.rootStore;\n        const calls = [];\n\n        const multiAddress = contractMetadataStore.getMultiAddress();\n        const multi = providerStore.getContract(\n            ContractTypes.Multicall,\n            multiAddress\n        );\n\n        const iface = new Interface(tokenAbi);\n\n        tokenAddresses.forEach(value => {\n            calls.push([\n                value,\n                iface.functions.allowance.encode([account, spender]),\n            ]);\n        });\n\n        try {\n            const [blockNumber, response] = await multi.aggregate(calls);\n            const allowances = response.map(value => bnum(value));\n\n            this.setAllowances(\n                tokenAddresses,\n                account,\n                spender,\n                allowances,\n                blockNumber.toNumber()\n            );\n        } catch (e) {\n            console.error(\n                '[Fetch Account Approvals] Failure in one or more fetches',\n                { error: e }\n            );\n            return FetchCode.FAILURE;\n        }\n\n        return FetchCode.SUCCESS;\n    }\n\n    getAllowances(\n        tokenAddresses: string[],\n        account: string,\n        spender: string\n    ): BigNumberMap {\n        const result: BigNumberMap = {};\n        tokenAddresses.forEach(tokenAddress => {\n            if (\n                this.allowances[tokenAddress] &&\n                this.allowances[tokenAddress][account] &&\n                this.allowances[tokenAddress][account][spender]\n            ) {\n                result[tokenAddress] = this.allowances[tokenAddress][account][\n                    spender\n                ].allowance;\n            }\n        });\n\n        return result;\n    }\n\n    private setAllowances(\n        tokens: string[],\n        owner: string,\n        spender: string,\n        approvals: BigNumber[],\n        fetchBlock: number\n    ) {\n        const chainApprovals = this.allowances;\n\n        approvals.forEach((approval, index) => {\n            const tokenAddress = tokens[index];\n\n            if (\n                (this.isAllowanceFetched(tokenAddress, owner, spender) &&\n                    this.isAllowanceStale(\n                        tokenAddress,\n                        owner,\n                        spender,\n                        fetchBlock\n                    )) ||\n                !this.isAllowanceFetched(tokenAddress, owner, spender)\n            ) {\n                if (!chainApprovals[tokenAddress]) {\n                    chainApprovals[tokenAddress] = {};\n                }\n\n                if (!chainApprovals[tokenAddress][owner]) {\n                    chainApprovals[tokenAddress][owner] = {};\n                }\n\n                chainApprovals[tokenAddress][owner][spender] = {\n                    allowance: approval,\n                    lastFetched: fetchBlock,\n                };\n            }\n        });\n\n        this.allowances = {\n            ...this.allowances,\n            ...chainApprovals,\n        };\n    }\n\n    private setAllowanceProperty(\n        tokenAddress: string,\n        owner: string,\n        spender: string,\n        approval: BigNumber,\n        blockFetched: number\n    ): void {\n        const chainApprovals = this.allowances;\n\n        if (!chainApprovals[tokenAddress]) {\n            chainApprovals[tokenAddress] = {};\n        }\n\n        if (!chainApprovals[tokenAddress][owner]) {\n            chainApprovals[tokenAddress][owner] = {};\n        }\n\n        chainApprovals[tokenAddress][owner][spender] = {\n            allowance: approval,\n            lastFetched: blockFetched,\n        };\n\n        this.allowances = chainApprovals;\n    }\n\n    isBalanceFetched(tokenAddress: string, account: string) {\n        return (\n            !!this.balances[tokenAddress] &&\n            !!this.balances[tokenAddress][account]\n        );\n    }\n\n    isBalanceStale(tokenAddress: string, account: string, blockNumber: number) {\n        return this.balances[tokenAddress][account].lastFetched < blockNumber;\n    }\n\n    isSupplyFetched(tokenAddress: string) {\n        return !!this.totalSupplies[tokenAddress];\n    }\n\n    isSupplyStale(tokenAddress: string, blockNumber: number): boolean {\n        return this.totalSupplies[tokenAddress].lastFetched < blockNumber;\n    }\n\n    @action private setTotalSupplies(\n        tokens: string[],\n        supplies: BigNumber[],\n        fetchBlock: number\n    ) {\n        const fetchedSupplies: TotalSupplyMap = {};\n\n        supplies.forEach((supply, index) => {\n            const tokenAddress = tokens[index];\n\n            if (\n                (this.isSupplyFetched(tokenAddress) &&\n                    this.isSupplyStale(tokenAddress, fetchBlock)) ||\n                !this.isSupplyFetched(tokenAddress)\n            ) {\n                fetchedSupplies[tokenAddress] = {\n                    totalSupply: supply,\n                    lastFetched: fetchBlock,\n                };\n            }\n        });\n\n        this.totalSupplies = {\n            ...this.totalSupplies,\n            ...fetchedSupplies,\n        };\n    }\n\n    @action private setBalances(\n        tokens: string[],\n        balances: BigNumber[],\n        account: string,\n        fetchBlock: number\n    ) {\n        const fetchedBalances: TokenBalanceMap = {};\n\n        balances.forEach((balance, index) => {\n            const tokenAddress = tokens[index];\n\n            if (\n                (this.isBalanceFetched(tokenAddress, account) &&\n                    this.isBalanceStale(tokenAddress, account, fetchBlock)) ||\n                !this.isBalanceFetched(tokenAddress, account)\n            ) {\n                if (this.balances[tokenAddress]) {\n                    fetchedBalances[tokenAddress] = this.balances[tokenAddress];\n                } else {\n                    fetchedBalances[tokenAddress] = {};\n                }\n\n                fetchedBalances[tokenAddress][account] = {\n                    balance: balance,\n                    lastFetched: fetchBlock,\n                };\n            }\n        });\n\n        this.balances = {\n            ...this.balances,\n            ...fetchedBalances,\n        };\n    }\n\n    getTotalSupply(tokenAddress: string): BigNumber | undefined {\n        if (this.totalSupplies[tokenAddress]) {\n            return this.totalSupplies[tokenAddress].totalSupply;\n        } else {\n            return undefined;\n        }\n    }\n\n    getBalance(tokenAddress: string, account: string): BigNumber | undefined {\n        const tokenBalances = this.balances[tokenAddress];\n        if (tokenBalances) {\n            const balance = tokenBalances[account];\n            if (balance) {\n                if (balance.balance) {\n                    return balance.balance;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    private getBalanceLastFetched(\n        tokenAddress: string,\n        account: string\n    ): number | undefined {\n        const tokenBalances = this.balances[tokenAddress];\n        if (tokenBalances) {\n            const balance = tokenBalances[account];\n            if (balance) {\n                if (balance.lastFetched) {\n                    return balance.lastFetched;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    @action approveMax = async (\n        tokenAddress,\n        spender\n    ): Promise<ActionResponse> => {\n        const { providerStore } = this.rootStore;\n        return await providerStore.sendTransaction(\n            ContractTypes.TestToken,\n            tokenAddress,\n            'approve',\n            [spender, helpers.MAX_UINT.toString()]\n        );\n    };\n\n    @action revokeApproval = async (\n        tokenAddress,\n        spender\n    ): Promise<ActionResponse> => {\n        const { providerStore } = this.rootStore;\n        return await providerStore.sendTransaction(\n            ContractTypes.TestToken,\n            tokenAddress,\n            'approve',\n            [spender, 0]\n        );\n    };\n\n    @action fetchTotalSupplies = async (\n        tokensToTrack: string[]\n    ): Promise<FetchCode> => {\n        const { providerStore, contractMetadataStore } = this.rootStore;\n        const calls = [];\n        const fetchBlock = providerStore.getCurrentBlockNumber();\n\n        const stale =\n            fetchBlock <= this.getTotalSupplyLastFetched(tokensToTrack[0]);\n        if (!stale) {\n            const multiAddress = contractMetadataStore.getMultiAddress();\n            const multi = providerStore.getContract(\n                ContractTypes.Multicall,\n                multiAddress\n            );\n\n            const iface = new Interface(tokenAbi);\n\n            tokensToTrack.forEach(value => {\n                calls.push([value, iface.functions.totalSupply.encode([])]);\n            });\n\n            try {\n                const [blockNumber, response] = await multi.aggregate(calls);\n                const supplies = response.map(value =>\n                    bnum(iface.functions.totalSupply.decode(value))\n                );\n\n                this.setTotalSupplies(\n                    tokensToTrack,\n                    supplies,\n                    blockNumber.toNumber()\n                );\n                console.debug('[All Fetches Success]');\n            } catch (e) {\n                console.error('[Fetch] Total Supply Data', { error: e });\n                return FetchCode.FAILURE;\n            }\n        }\n        return FetchCode.SUCCESS;\n    };\n\n    @action fetchTokenBalances = async (\n        account: string,\n        tokensToTrack: string[]\n    ): Promise<FetchCode> => {\n        const { providerStore, contractMetadataStore } = this.rootStore;\n        const calls = [];\n        const promises: Promise<any>[] = [];\n\n        const multiAddress = contractMetadataStore.getMultiAddress();\n        const multi = providerStore.getContract(\n            ContractTypes.Multicall,\n            multiAddress\n        );\n\n        const iface = new Interface(tokenAbi);\n\n        tokensToTrack.forEach(value => {\n            if (value !== EtherKey) {\n                calls.push([\n                    value,\n                    iface.functions.balanceOf.encode([account]),\n                ]);\n            }\n        });\n\n        promises.push(multi.aggregate(calls));\n        promises.push(multi.getEthBalance(account));\n\n        try {\n            const [[blockNumber, response], ethBalance] = await Promise.all(\n                promises\n            );\n            const balances = response.map(value =>\n                bnum(iface.functions.balanceOf.decode(value))\n            );\n            if (tokensToTrack[0] === EtherKey) {\n                balances.unshift(bnum(ethBalance));\n            }\n\n            this.setBalances(\n                tokensToTrack,\n                balances,\n                account,\n                blockNumber.toNumber()\n            );\n\n            console.debug('[All Fetches Success]');\n        } catch (e) {\n            console.error('[Fetch] Balancer Token Data', { error: e });\n            return FetchCode.FAILURE;\n        }\n    };\n\n    @action mint = async (tokenAddress: string, amount: string) => {\n        const { providerStore } = this.rootStore;\n        await providerStore.sendTransaction(\n            ContractTypes.TestToken,\n            tokenAddress,\n            'mint',\n            [parseEther(amount).toString()]\n        );\n    };\n\n    isAllowanceFetched(tokenAddress: string, owner: string, spender: string) {\n        const chainApprovals = this.allowances;\n        return (\n            !!chainApprovals[tokenAddress] &&\n            !!chainApprovals[tokenAddress][owner] &&\n            !!chainApprovals[tokenAddress][owner][spender]\n        );\n    }\n\n    isAllowanceStale(\n        tokenAddress: string,\n        owner: string,\n        spender: string,\n        blockNumber: number\n    ) {\n        const chainApprovals = this.allowances;\n        return (\n            chainApprovals[tokenAddress][owner][spender].lastFetched <\n            blockNumber\n        );\n    }\n\n    @action fetchAllowance = async (\n        tokenAddress: string,\n        owner: string,\n        spender: string,\n        fetchBlock: number\n    ): Promise<UserAllowanceFetch> => {\n        const { providerStore } = this.rootStore;\n\n        // Always max allowance for Ether\n        if (tokenAddress === EtherKey) {\n            return new UserAllowanceFetch({\n                status: AsyncStatus.SUCCESS,\n                request: {\n                    tokenAddress,\n                    owner,\n                    spender,\n                    fetchBlock,\n                },\n                payload: {\n                    allowance: bnum(helpers.setPropertyToMaxUintIfEmpty()),\n                    lastFetched: fetchBlock,\n                },\n            });\n        }\n\n        const token = providerStore.getContract(\n            ContractTypes.TestToken,\n            tokenAddress\n        );\n\n        /* Before and after the network operation, check for staleness\n            If the fetch is stale, don't do network call\n            If the fetch is stale after network call, don't set DB variable\n        */\n        const stale =\n            fetchBlock <=\n            this.getAllowanceLastFetched(tokenAddress, owner, spender);\n        if (!stale) {\n            try {\n                const allowance = bnum(await token.allowance(owner, spender));\n\n                const stale =\n                    fetchBlock <=\n                    this.getAllowanceLastFetched(tokenAddress, owner, spender);\n                if (!stale) {\n                    console.debug('[Allowance Fetch]', {\n                        tokenAddress,\n                        owner,\n                        spender,\n                        allowance: allowance.toString(),\n                        fetchBlock,\n                    });\n                    return new UserAllowanceFetch({\n                        status: AsyncStatus.SUCCESS,\n                        request: {\n                            tokenAddress,\n                            owner,\n                            spender,\n                            fetchBlock,\n                        },\n                        payload: {\n                            allowance,\n                            lastFetched: fetchBlock,\n                        },\n                    });\n                }\n            } catch (e) {\n                return new UserAllowanceFetch({\n                    status: AsyncStatus.FAILURE,\n                    request: {\n                        tokenAddress,\n                        owner,\n                        spender,\n                        fetchBlock,\n                    },\n                    payload: undefined,\n                    error: e.message,\n                });\n            }\n        } else {\n            console.debug('[Allowance Fetch] - Stale', {\n                tokenAddress,\n                owner,\n                spender,\n                fetchBlock,\n            });\n            return new UserAllowanceFetch({\n                status: AsyncStatus.STALE,\n                request: {\n                    tokenAddress,\n                    owner,\n                    spender,\n                    fetchBlock,\n                },\n                payload: undefined,\n            });\n        }\n    };\n\n    // Token Scale -> Wei Scale\n    denormalizeBalance(amount: BigNumber, tokenAddress: string): BigNumber {\n        const { contractMetadataStore } = this.rootStore;\n        return scale(\n            bnum(amount),\n            contractMetadataStore.getTokenMetadata(tokenAddress).decimals\n        );\n    }\n\n    // Wei Scale -> Token Scale\n    normalizeBalance(amount: BigNumber, tokenAddress: string): BigNumber {\n        const { contractMetadataStore } = this.rootStore;\n        return scale(\n            bnum(amount),\n            -contractMetadataStore.getTokenMetadata(tokenAddress).decimals\n        );\n    }\n\n    hasApproval = (tokenAddress, account, spender): boolean => {\n        const allowance = this.getAllowance(tokenAddress, account, spender);\n        if (!allowance) {\n            throw new Error(\n                `Allowance not loaded for ${tokenAddress} ${account} ${spender}`\n            );\n        }\n        return helpers.hasApproval(allowance);\n    };\n\n    hasMaxApproval = (tokenAddress, account, spender): boolean => {\n        const allowance = this.getAllowance(tokenAddress, account, spender);\n        if (!allowance) {\n            throw new Error(\n                `Allowance not loaded for ${tokenAddress} ${account} ${spender}`\n            );\n        }\n        return helpers.hasMaxApproval(allowance);\n    };\n\n    getAllowance = (tokenAddress, account, spender): BigNumber | undefined => {\n        const chainApprovals = this.allowances;\n        if (chainApprovals) {\n            const tokenApprovals = chainApprovals[tokenAddress];\n            if (tokenApprovals) {\n                const userApprovals = tokenApprovals[account];\n                if (userApprovals) {\n                    if (userApprovals[spender]) {\n                        return userApprovals[spender].allowance;\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n\n    getTotalSupplyLastFetched = (tokenAddress): number | undefined => {\n        const totalSupplies = this.totalSupplies;\n        if (totalSupplies) {\n            const totalSupply = totalSupplies[tokenAddress];\n            if (totalSupply) {\n                return totalSupply.lastFetched;\n            }\n        }\n        return undefined;\n    };\n\n    getAllowanceLastFetched = (\n        tokenAddress,\n        account,\n        spender\n    ): number | undefined => {\n        const chainApprovals = this.allowances;\n        if (chainApprovals) {\n            const tokenApprovals = chainApprovals[tokenAddress];\n            if (tokenApprovals) {\n                const userApprovals = tokenApprovals[account];\n                if (userApprovals) {\n                    if (userApprovals[spender]) {\n                        return userApprovals[spender].lastFetched;\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { supportedChainId } from '../provider/connectors';\nimport { EtherKey } from './Token';\n\nexport default class BlockchainFetchStore {\n    @observable activeFetchLoop: any;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @action onActivePoolChanged() {\n        const { providerStore } = this.rootStore;\n\n        if (\n            providerStore.providerStatus.active &&\n            providerStore.providerStatus.account &&\n            providerStore.providerStatus.activeChainId === supportedChainId\n        ) {\n            this.fetchActivePoolAllowances();\n        }\n    }\n\n    @action fetchPoolTotalSupplies() {\n        const { tokenStore, poolStore } = this.rootStore;\n        const poolAddresses = poolStore\n            .getContributedPools()\n            .map(pool => pool.address);\n        tokenStore.fetchTotalSupplies(poolAddresses);\n    }\n\n    @action fetchPoolUserBalances() {\n        const { tokenStore, poolStore, providerStore } = this.rootStore;\n        const account = providerStore.providerStatus.account;\n        const poolAddresses = poolStore\n            .getContributedPools()\n            .map(pool => pool.address);\n        tokenStore.fetchTokenBalances(account, poolAddresses);\n    }\n\n    @action async fetchProxyData() {\n        const {\n            tokenStore,\n            proxyStore,\n            providerStore,\n            contractMetadataStore,\n        } = this.rootStore;\n\n        const account = providerStore.providerStatus.account;\n        await proxyStore.fetchInstance(account);\n\n        if (!proxyStore.hasInstance()) {\n            return;\n        }\n        const trackedTokenAddresses = contractMetadataStore.getTrackedTokenAddresses();\n        const addresses = trackedTokenAddresses.filter(\n            address => address !== EtherKey\n        );\n        const proxyAddress = proxyStore.getInstanceAddress();\n        tokenStore.fetchAccountApprovals(addresses, account, proxyAddress);\n    }\n\n    @action async fetchActivePoolAllowances() {\n        const { providerStore } = this.rootStore;\n\n        const account = providerStore.providerStatus.account;\n        const { appSettingsStore, poolStore, tokenStore } = this.rootStore;\n        const poolAddress = appSettingsStore.getActivePoolAddress();\n        const tokenAddresses = poolStore.getPoolTokens(poolAddress);\n        await tokenStore.fetchAccountApprovals(\n            tokenAddresses,\n            account,\n            poolAddress\n        );\n    }\n\n    @action setFetchLoop(forceFetch?: boolean) {\n        const { providerStore } = this.rootStore;\n\n        const active = providerStore.providerStatus.active;\n        const chainId = providerStore.providerStatus.activeChainId;\n        const library = providerStore.providerStatus.library;\n        const account = providerStore.providerStatus.account;\n\n        if (active && chainId === supportedChainId) {\n            const { poolStore, appSettingsStore } = this.rootStore;\n\n            library\n                .getBlockNumber()\n                .then(blockNumber => {\n                    const lastCheckedBlock = providerStore.getCurrentBlockNumber();\n\n                    if (account) {\n                        this.fetchProxyData();\n                    }\n\n                    const doFetch =\n                        blockNumber >= lastCheckedBlock + 10 || forceFetch;\n\n                    if (doFetch) {\n                        console.debug('[Fetch Loop] Fetch Blockchain Data', {\n                            blockNumber,\n                            account,\n                        });\n\n                        // Set block number\n                        providerStore.setCurrentBlockNumber(blockNumber);\n\n                        // Fetch pools\n                        poolStore.fetchPools().then(() => {\n                            // Fetch user pool shares after pools loaded\n                            // this.fetchPoolTotalSupplies();\n\n                            if (account && appSettingsStore.hasActivePool()) {\n                                this.fetchActivePoolAllowances();\n                            }\n                        });\n\n                        poolStore.fetchPrivatePools();\n\n                        poolStore.fetchContributedPools().then(() => {\n                            if (account) {\n                                this.fetchPoolTotalSupplies();\n                                this.fetchPoolUserBalances();\n                            }\n                        });\n\n                        // Get user-specific blockchain data\n                        if (account) {\n                            providerStore.fetchUserBlockchainData(account);\n                        }\n                    }\n                })\n                .catch(error => {\n                    console.error('[Fetch Loop Failure]', {\n                        providerStore,\n                        forceFetch,\n                        chainId,\n                        account,\n                        library,\n                        error,\n                    });\n                    providerStore.setCurrentBlockNumber(undefined);\n                });\n        }\n    }\n}\n","const colors: string[] = [\n    '#6f6776',\n    '#9a9a97',\n    '#c5ccb8',\n    '#c38890',\n    '#a593a5',\n    '#666092',\n    '#9a4f50',\n    '#c28d75',\n];\n\nlet colorIndex = 0;\n\nexport function getNextTokenColor(): string {\n    const color = colors[colorIndex];\n    colorIndex = colorIndex + 1;\n    if (colorIndex >= colors.length) {\n        colorIndex = 0;\n    }\n    return color;\n}\n","import RootStore from 'stores/Root';\nimport { action, observable } from 'mobx';\nimport {\n    fetchPool,\n    fetchSharedPools,\n    fetchPrivatePools,\n    fetchContributedPools,\n} from 'provider/subgraph';\nimport { Pool, PoolToken } from 'types';\nimport { BigNumber } from '../utils/bignumber';\nimport { bnum, fromPercentage, tinyAddress } from '../utils/helpers';\nimport { ContractTypes } from './Provider';\nimport { getNextTokenColor } from '../utils/tokenColorPicker';\n\ninterface PoolData {\n    blockLastFetched: number;\n    data: Pool;\n}\n\ninterface PoolMap {\n    [index: string]: PoolData;\n}\n\nexport const SUBGRAPH_SKIP_STEP = 12;\n\nexport default class PoolStore {\n    @observable pools: PoolMap;\n    @observable privatePools: PoolMap;\n    @observable contributedPools: PoolMap;\n    @observable activePool: Pool;\n    @observable pageLoading: boolean;\n    graphSkip: number;\n    selectedAssets: string[];\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.pools = {} as PoolMap;\n        this.privatePools = {} as PoolMap;\n        this.contributedPools = {} as PoolMap;\n        this.graphSkip = 0;\n    }\n\n    @action processUnknownTokens(pool: Pool) {\n        const {\n            contractMetadataStore,\n            tokenStore,\n            providerStore,\n        } = this.rootStore;\n        const account = providerStore.providerStatus.account;\n        const defaultPrecision = contractMetadataStore.getDefaultPrecision();\n\n        pool.tokens.forEach((token, index) => {\n            if (!contractMetadataStore.hasTokenMetadata(token.address)) {\n                pool.tokens[token.symbol] = tinyAddress(token.address, 3);\n\n                // We just discovered a new token, so should do an initial fetch for it outside of loop\n                if (account && !tokenStore.getBalance(token.address, account)) {\n                    tokenStore.fetchTokenBalances(account, [token.address]);\n                }\n\n                contractMetadataStore.addTokenMetadata(token.address, {\n                    address: token.address,\n                    precision: defaultPrecision,\n                    chartColor: getNextTokenColor(),\n                    decimals: token.decimals,\n                    symbol: tinyAddress(token.address, 3),\n                    ticker: '',\n                    iconAddress: token.address,\n                    isSupported: false,\n                });\n            }\n        });\n    }\n\n    @action async fetchPools() {\n        const { providerStore } = this.rootStore;\n        // The subgraph and local block could be out of sync\n        const currentBlock = providerStore.getCurrentBlockNumber();\n\n        console.debug('[fetchPools] Fetch pools');\n        this.pageLoading = true;\n        const pools = await fetchSharedPools(\n            SUBGRAPH_SKIP_STEP,\n            this.graphSkip,\n            this.selectedAssets\n        );\n\n        pools.forEach(pool => {\n            this.processUnknownTokens(pool);\n        });\n        this.setPools(pools, currentBlock);\n        this.pageLoading = false;\n\n        console.debug('[fetchPools] Pools fetched & stored');\n    }\n\n    @action async fetchPrivatePools() {\n        const { providerStore } = this.rootStore;\n        // The subgraph and local block could be out of sync\n        const currentBlock = providerStore.getCurrentBlockNumber();\n\n        console.debug('[fetchPrivatePools] Fetch pools');\n        const pools = await fetchPrivatePools();\n\n        pools.forEach(pool => {\n            this.processUnknownTokens(pool);\n        });\n        this.setPrivatePools(pools, currentBlock);\n\n        console.debug('[fetchPrivatePools] Pools fetched & stored');\n    }\n\n    @action async fetchContributedPools() {\n        const { providerStore } = this.rootStore;\n        // The subgraph and local block could be out of sync\n        const currentBlock = providerStore.getCurrentBlockNumber();\n        const account = providerStore.providerStatus.account;\n\n        if (!account) {\n            return;\n        }\n\n        console.debug('[fetchContributedPools] Fetch pools');\n        const pools = await fetchContributedPools(account);\n\n        pools.forEach(pool => {\n            this.processUnknownTokens(pool);\n        });\n        this.setContributedPools(pools, currentBlock);\n\n        console.debug('[fetchContributedPools] Pools fetched & stored');\n    }\n\n    @action async fetchActivePool(poolAddress: string) {\n        console.debug('[fetchActivePool] Fetch pool');\n        const pool = await fetchPool(poolAddress);\n        this.processUnknownTokens(pool);\n        this.activePool = pool;\n    }\n\n    @action async pagePools(next: boolean) {\n        if (next) {\n            this.graphSkip += SUBGRAPH_SKIP_STEP;\n        } else {\n            this.graphSkip -= SUBGRAPH_SKIP_STEP;\n            if (this.graphSkip < 0) {\n                this.graphSkip = 0;\n            }\n        }\n        this.fetchPools();\n    }\n\n    @action async setSelectedAssets(selectedAssets: string[]) {\n        if (\n            JSON.stringify(selectedAssets) !==\n            JSON.stringify(this.selectedAssets)\n        ) {\n            this.selectedAssets = selectedAssets;\n            this.pools = {};\n            this.fetchPools();\n        }\n    }\n\n    @action private setPools(pools: Pool[], blockFetched: number) {\n        this.pools = {};\n        for (const pool of pools) {\n            this.pools[pool.address] = {\n                blockLastFetched: blockFetched,\n                data: pool,\n            };\n        }\n    }\n\n    @action private setPrivatePools(pools: Pool[], blockFetched: number) {\n        this.privatePools = {};\n        for (const pool of pools) {\n            this.privatePools[pool.address] = {\n                blockLastFetched: blockFetched,\n                data: pool,\n            };\n        }\n    }\n\n    @action private setContributedPools(pools: Pool[], blockFetched: number) {\n        this.contributedPools = {};\n        for (const pool of pools) {\n            this.contributedPools[pool.address] = {\n                blockLastFetched: blockFetched,\n                data: pool,\n            };\n        }\n    }\n\n    getPoolToken(poolAddress: string, tokenAddress: string): PoolToken {\n        return this.getPool(poolAddress).tokens.find(\n            token => token.address === tokenAddress\n        );\n    }\n\n    getPoolTokenBalance(poolAddress: string, tokenAddress: string): BigNumber {\n        const token = this.getPool(poolAddress).tokens.find(\n            token => token.address === tokenAddress\n        );\n        if (!token) {\n            throw new Error(\n                `Token ${tokenAddress} not found in pool ${poolAddress}`\n            );\n        }\n        return token.balance;\n    }\n\n    getUserLiquidityContribution(\n        poolAddress: string,\n        tokenAddress: string,\n        account: string\n    ): BigNumber {\n        const userProportion = this.getUserShareProportion(\n            poolAddress,\n            account\n        );\n        const poolTokenBalance = this.getPoolTokenBalance(\n            poolAddress,\n            tokenAddress\n        );\n\n        return poolTokenBalance.times(userProportion);\n    }\n\n    getUserShare(poolAddress: string, account: string): BigNumber | undefined {\n        const { tokenStore } = this.rootStore;\n        const userShare = tokenStore.getBalance(poolAddress, account);\n\n        if (userShare) {\n            return userShare;\n        } else {\n            return undefined;\n        }\n    }\n\n    getUserShareProportion(\n        poolAddress: string,\n        account: string\n    ): BigNumber | undefined {\n        const { tokenStore } = this.rootStore;\n\n        const userShare = tokenStore.getBalance(poolAddress, account);\n        const totalShares = tokenStore.getTotalSupply(poolAddress);\n\n        if (userShare && totalShares) {\n            return userShare.div(totalShares);\n        } else {\n            return undefined;\n        }\n    }\n\n    formatZeroMinAmountsOut(poolAddress: string): string[] {\n        const pool = this.getPool(poolAddress);\n        return pool.tokens.map(token => '0');\n    }\n\n    calcUserLiquidity(\n        poolAddress: string,\n        account: string\n    ): BigNumber | undefined {\n        const { marketStore } = this.rootStore;\n        const poolValue = marketStore.getPortfolioValue(\n            this.getPool(poolAddress)\n        );\n        const userProportion = this.getUserShareProportion(\n            poolAddress,\n            account\n        );\n        if (userProportion) {\n            return userProportion.times(poolValue);\n        } else {\n            return undefined;\n        }\n    }\n\n    getPoolSymbols(poolAddress: string): string[] {\n        return this.getPool(poolAddress).tokens.map(token => token.symbol);\n    }\n\n    getPoolBalances(poolAddress: string): BigNumber[] {\n        return this.getPool(poolAddress).tokens.map(token => token.balance);\n    }\n\n    getPublicPools(): Pool[] {\n        const pools: Pool[] = [];\n        Object.keys(this.pools).forEach(key => {\n            if (this.pools[key].data.finalized) {\n                pools.push(this.pools[key].data);\n            }\n        });\n        return pools;\n    }\n\n    getPrivatePools(): Pool[] {\n        const pools: Pool[] = [];\n        Object.keys(this.privatePools).forEach(key => {\n            if (!this.privatePools[key].data.finalized) {\n                pools.push(this.privatePools[key].data);\n            }\n        });\n        return pools;\n    }\n\n    getContributedPools(): Pool[] {\n        const pools: Pool[] = [];\n        Object.keys(this.contributedPools).forEach(key => {\n            pools.push(this.contributedPools[key].data);\n        });\n        return pools;\n    }\n\n    getPool(poolAddress: string): Pool | undefined {\n        if (this.pools[poolAddress]) {\n            return this.pools[poolAddress].data;\n        }\n        if (this.privatePools[poolAddress]) {\n            return this.privatePools[poolAddress].data;\n        }\n        if (this.contributedPools[poolAddress]) {\n            return this.contributedPools[poolAddress].data;\n        }\n        if (this.activePool && this.activePool.address === poolAddress) {\n            return this.activePool;\n        }\n        return undefined;\n    }\n\n    calcPoolTokensByRatio(pool: Pool, ratio: BigNumber): BigNumber {\n        const { tokenStore } = this.rootStore;\n        const totalPoolTokens = tokenStore.getTotalSupply(pool.address);\n        // TODO - fix calcs so no buffer is needed\n        const buffer = bnum(100);\n        return ratio\n            .times(totalPoolTokens)\n            .integerValue(BigNumber.ROUND_DOWN)\n            .minus(buffer);\n    }\n\n    getUserTokenPercentage(\n        poolAddress: string,\n        account: string,\n        percentage: string\n    ) {\n        const { tokenStore } = this.rootStore;\n        const userPoolTokens = tokenStore.getBalance(poolAddress, account);\n        return bnum(fromPercentage(percentage)).times(userPoolTokens);\n    }\n\n    getPoolTokens(poolAddress: string): string[] {\n        const pool = this.getPool(poolAddress);\n        if (!pool) {\n            throw new Error(`Pool ${poolAddress} not loaded`);\n        }\n        return pool.tokensList;\n    }\n\n    @action exitPool = async (\n        poolAddress: string,\n        poolAmountIn: string,\n        minAmountsOut: string[]\n    ) => {\n        const { providerStore } = this.rootStore;\n\n        console.debug('exitPool', {\n            poolAddress,\n            poolAmountIn,\n            minAmountsOut,\n        });\n\n        await providerStore.sendTransaction(\n            ContractTypes.BPool,\n            poolAddress,\n            'exitPool',\n            [poolAmountIn, minAmountsOut]\n        );\n    };\n\n    @action exitswapPoolAmountIn = async (\n        poolAddress: string,\n        tokenOut: string,\n        poolAmountIn: string,\n        minAmountOut: string\n    ) => {\n        const { providerStore } = this.rootStore;\n\n        console.debug('exitswapPoolAmountIn', {\n            poolAddress,\n            tokenOut,\n            poolAmountIn,\n            minAmountOut,\n        });\n\n        await providerStore.sendTransaction(\n            ContractTypes.BPool,\n            poolAddress,\n            'exitswapPoolAmountIn',\n            [tokenOut, poolAmountIn, minAmountOut]\n        );\n    };\n\n    @action joinPool = async (\n        poolAddress: string,\n        poolAmountOut: string,\n        maxAmountsIn: string[]\n    ) => {\n        const {\n            contractMetadataStore,\n            providerStore,\n            proxyStore,\n        } = this.rootStore;\n\n        const dsProxyAddress = proxyStore.getInstanceAddress();\n        const bActionsAddress = contractMetadataStore.getBActionsAddress();\n\n        const data = proxyStore.wrapTransaction(\n            ContractTypes.BActions,\n            'joinPool',\n            [poolAddress, poolAmountOut.toString(), maxAmountsIn]\n        );\n        return await providerStore.sendTransaction(\n            ContractTypes.DSProxy,\n            dsProxyAddress,\n            'execute',\n            [bActionsAddress, data]\n        );\n    };\n\n    @action joinswapExternAmountIn = async (\n        poolAddress: string,\n        tokenIn: string,\n        tokenAmountIn: string,\n        minPoolAmountOut: string\n    ) => {\n        const {\n            contractMetadataStore,\n            providerStore,\n            proxyStore,\n        } = this.rootStore;\n\n        const dsProxyAddress = proxyStore.getInstanceAddress();\n        const bActionsAddress = contractMetadataStore.getBActionsAddress();\n\n        const data = proxyStore.wrapTransaction(\n            ContractTypes.BActions,\n            'joinswapExternAmountIn',\n            [poolAddress, tokenIn, tokenAmountIn, minPoolAmountOut]\n        );\n        return await providerStore.sendTransaction(\n            ContractTypes.DSProxy,\n            dsProxyAddress,\n            'execute',\n            [bActionsAddress, data]\n        );\n    };\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\n\nexport default class DropdownStore {\n    @observable walletDropdownVisible: boolean;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.walletDropdownVisible = false;\n    }\n\n    @action toggleWalletDropdown() {\n        this.walletDropdownVisible = !this.walletDropdownVisible;\n    }\n\n    @action setWalletDropdownVisible(visible: boolean) {\n        this.walletDropdownVisible = visible;\n    }\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\n\nexport default class AppSettingsStore {\n    @observable darkMode: boolean;\n    @observable activePoolAddress: string;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.darkMode = false;\n    }\n\n    hasActivePool(): boolean {\n        return !!this.activePoolAddress;\n    }\n\n    getActivePoolAddress() {\n        return this.activePoolAddress;\n    }\n\n    @action setActivePoolAddress(poolAddress) {\n        this.activePoolAddress = poolAddress;\n    }\n\n    @action toggleDarkMode() {\n        this.darkMode = !this.darkMode;\n    }\n\n    @action setDarkMode(visible: boolean) {\n        this.darkMode = visible;\n    }\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { ContractTypes } from 'stores/Provider';\nimport * as deployed from 'deployed.json';\nimport { isAddress, toChecksum } from '../utils/helpers';\nimport { NumberMap, StringMap, TokenErrors } from '../types';\nimport { getSupportedChainName } from '../provider/connectors';\n\nexport interface ContractMetadata {\n    bFactory: string;\n    bActions: string;\n    dsProxyRegistry: string;\n    proxy: string;\n    weth: string;\n    multicall: string;\n    defaultPrecision: number;\n    warnings: string[];\n    errors: TokenErrors;\n    tokens: TokenMetadata[];\n}\n\nexport interface TokenMetadata {\n    address: string;\n    symbol: string;\n    ticker: string;\n    decimals: number;\n    iconAddress: string;\n    precision: number;\n    chartColor: string;\n    isSupported: boolean;\n}\n\nexport default class ContractMetadataStore {\n    @observable contractMetadata: ContractMetadata;\n    @observable tokenSymbols: string[];\n    @observable tickerSymbols: string[];\n    @observable tokenIndex: NumberMap;\n    @observable symbolToAddressMap: StringMap;\n    @observable addressToSymbolMap: StringMap;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.contractMetadata = {} as ContractMetadata;\n        this.loadWhitelistedTokenMetadata();\n\n        this.tokenSymbols = this.getWhitelistedTokenMetadata().map(value => {\n            return value.symbol;\n        });\n\n        this.tickerSymbols = this.getWhitelistedTokenMetadata().map(value => {\n            return value.ticker;\n        });\n\n        this.tokenIndex = {} as NumberMap;\n        this.symbolToAddressMap = {} as StringMap;\n        this.addressToSymbolMap = {} as StringMap;\n\n        this.getWhitelistedTokenMetadata().forEach((value, index) => {\n            this.symbolToAddressMap[value.symbol] = value.address;\n            this.addressToSymbolMap[value.address] = value.symbol;\n            this.tokenIndex[value.symbol] = index;\n        });\n    }\n\n    getTokenIndex(symbol: string) {\n        return this.tokenIndex[symbol] ? this.tokenIndex[symbol] : -1;\n    }\n\n    // Take the data from the JSON and get it into the store, so we access it just like other data\n    @action loadWhitelistedTokenMetadata() {\n        const chainName = getSupportedChainName();\n        const metadata = JSON.parse(JSON.stringify(deployed));\n        const tokenMetadata = metadata.default[chainName].tokens;\n\n        const contractMetadata = {\n            bFactory: metadata.default[chainName].bFactory,\n            bActions: metadata.default[chainName].bActions,\n            dsProxyRegistry: metadata.default[chainName].dsProxyRegistry,\n            proxy: metadata.default[chainName].proxy,\n            weth: metadata.default[chainName].weth,\n            multicall: metadata.default[chainName].multicall,\n            defaultPrecision: metadata.default[chainName].defaultPrecision,\n            warnings: metadata.default[chainName].warnings,\n            errors: metadata.default[chainName].errors,\n            tokens: [] as TokenMetadata[],\n        };\n\n        tokenMetadata.forEach(token => {\n            const {\n                address,\n                symbol,\n                ticker,\n                decimals,\n                iconAddress,\n                precision,\n                chartColor,\n            } = token;\n            contractMetadata.tokens.push({\n                address,\n                symbol,\n                ticker,\n                decimals,\n                iconAddress,\n                precision,\n                chartColor,\n                isSupported: true,\n            });\n        });\n\n        this.contractMetadata = contractMetadata;\n    }\n\n    async fetchTokenMetadata(\n        address: string,\n        account: string\n    ): Promise<TokenMetadata | undefined> {\n        console.log(`[ContractMetadata] fetchTokenMetadata: ${address}`);\n\n        const { contractMetadataStore, providerStore } = this.rootStore;\n\n        try {\n            // symbol/decimal call will fail if not an actual token.\n            const tokenContract = providerStore.getContract(\n                ContractTypes.TestToken,\n                address\n            );\n\n            const defaultPrecision = contractMetadataStore.getDefaultPrecision();\n            const symbol = await tokenContract.symbol();\n            const decimals = await tokenContract.decimals();\n\n            const tokenMetadata = {\n                address,\n                symbol,\n                ticker: symbol,\n                decimals,\n                iconAddress: address,\n                precision: defaultPrecision,\n                chartColor: '#828384',\n                isSupported: true,\n            };\n\n            return tokenMetadata;\n        } catch (error) {\n            return;\n        }\n    }\n\n    getTokenColor(tokenAddress: string): string {\n        return this.getTokenMetadata(tokenAddress).chartColor;\n    }\n\n    getDefaultPrecision(): number {\n        return this.contractMetadata.defaultPrecision;\n    }\n\n    isSupported(tokenAddress: string): boolean {\n        const metadata = this.getTokenMetadata(tokenAddress);\n        return metadata.isSupported;\n    }\n\n    getBFactoryAddress(): string {\n        const proxyAddress = this.contractMetadata.bFactory;\n        if (!proxyAddress) {\n            throw new Error(\n                '[Invariant] Trying to get non-loaded static address'\n            );\n        }\n        return proxyAddress;\n    }\n\n    getBActionsAddress(): string {\n        const proxyAddress = this.contractMetadata.bActions;\n        if (!proxyAddress) {\n            throw new Error(\n                '[Invariant] Trying to get non-loaded static address'\n            );\n        }\n        return proxyAddress;\n    }\n\n    getDsProxyRegistryAddress(): string {\n        const dsProxyRegistryAddress = this.contractMetadata.dsProxyRegistry;\n        if (!dsProxyRegistryAddress) {\n            throw new Error(\n                '[Invariant] Trying to get non-loaded static address'\n            );\n        }\n        return dsProxyRegistryAddress;\n    }\n\n    getProxyAddress(): string {\n        const proxyAddress = this.contractMetadata.proxy;\n        if (!proxyAddress) {\n            throw new Error(\n                '[Invariant] Trying to get non-loaded static address'\n            );\n        }\n        return proxyAddress;\n    }\n\n    getMultiAddress(): string {\n        const multiAddress = this.contractMetadata.multicall;\n        if (!multiAddress) {\n            throw new Error(\n                '[Invariant] Trying to get non-loaded static address'\n            );\n        }\n        return multiAddress;\n    }\n\n    getWethAddress(): string {\n        const address = this.contractMetadata.weth;\n        if (!address) {\n            throw new Error(\n                '[Invariant] Trying to get non-loaded static address'\n            );\n        }\n        return address;\n    }\n\n    getTokenWarnings(): string[] {\n        const tokens = this.contractMetadata.warnings;\n        if (!tokens) {\n            throw new Error(\n                '[Invariant] Trying to get non-loaded static address'\n            );\n        }\n        return tokens;\n    }\n\n    getTokenErrors(): TokenErrors {\n        const tokens = this.contractMetadata.errors;\n        if (!tokens) {\n            throw new Error(\n                '[Invariant] Trying to get non-loaded static address'\n            );\n        }\n        return tokens;\n    }\n\n    getWhiteListedTokenAddresses(): string[] {\n        const whitelisted = this.getWhitelistedTokenMetadata();\n        return whitelisted.map(token => token.address);\n    }\n\n    getTrackedTokenAddresses(): string[] {\n        const tokens = this.getTrackedTokenMetadata();\n        return tokens.map(token => token.address);\n    }\n\n    getTrackedTokenMetadata(): TokenMetadata[] {\n        return this.contractMetadata.tokens;\n    }\n\n    getWhitelistedTokenMetadata(): TokenMetadata[] {\n        return this.contractMetadata.tokens.filter(token => token.isSupported);\n    }\n\n    getTokenPrecision(address: string): number {\n        const tokenMetadata = this.contractMetadata.tokens.find(\n            element => element.address === address\n        );\n\n        return tokenMetadata.precision;\n    }\n\n    hasTokenMetadata(address: string): boolean {\n        const tokenMetadata = this.contractMetadata.tokens.find(\n            element => element.address === address\n        );\n\n        return !!tokenMetadata;\n    }\n\n    getTokenMetadataIndex(address: string): number | undefined {\n        const index = this.contractMetadata.tokens.findIndex(\n            element => element.address === address\n        );\n\n        if (index !== -1) {\n            return index;\n        } else {\n            return undefined;\n        }\n    }\n\n    @action addTokenMetadata(address: string, metadata: TokenMetadata) {\n        const existingIndex = this.getTokenMetadataIndex(address);\n        if (existingIndex) {\n            throw new Error('Attempting to add metadata for existing token');\n        }\n        this.contractMetadata.tokens.push(metadata);\n    }\n\n    getTokenMetadata(address: string): TokenMetadata {\n        const tokenMetadata = this.contractMetadata.tokens.find(\n            element => element.address === address\n        );\n\n        if (!tokenMetadata) {\n            throw new Error(\n                'Attempting to get metadata for untracked token address'\n            );\n        }\n\n        return tokenMetadata;\n    }\n\n    getFilteredTokenMetadata(filter: string): TokenMetadata[] {\n        const tokens = this.contractMetadata.tokens || undefined;\n\n        if (!tokens) {\n            throw new Error(\n                'Attempting to get user balances for untracked chainId'\n            );\n        }\n\n        let filteredMetadata: TokenMetadata[] = [];\n\n        if (isAddress(filter)) {\n            const address = toChecksum(filter);\n            //Search by address\n            filteredMetadata = tokens.filter(value => {\n                return value.address === address;\n            });\n        } else {\n            //Search by symbol\n            filteredMetadata = tokens.filter(value => {\n                const valueString = value.symbol.toLowerCase();\n                filter = filter.toLowerCase();\n                return valueString.includes(filter);\n            });\n        }\n\n        return filteredMetadata;\n    }\n}\n","import { action, observable } from 'mobx';\nimport { Interface } from 'ethers/utils';\nimport RootStore from './Root';\nimport { ContractTypes, schema } from './Provider';\nimport { FetchCode } from './Transaction';\n\nexport default class Proxy {\n    @observable instance: string;\n    @observable deploying: boolean;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.deploying = false;\n    }\n\n    @action fetchInstance = async (account: string): Promise<FetchCode> => {\n        const { contractMetadataStore, providerStore } = this.rootStore;\n\n        const proxyRegistryAddress = contractMetadataStore.getDsProxyRegistryAddress();\n\n        const proxyRegistry = providerStore.getContract(\n            ContractTypes.DSProxyRegistry,\n            proxyRegistryAddress\n        );\n\n        try {\n            const instance = await proxyRegistry.proxies(account);\n            this.instance = instance;\n        } catch (e) {\n            console.error('[Fetch Proxy Instance] Failure in fetch', {\n                error: e,\n            });\n            return FetchCode.FAILURE;\n        }\n\n        return FetchCode.SUCCESS;\n    };\n\n    @action setDeploying = (deploying: boolean) => {\n        this.deploying = deploying;\n    };\n\n    getInstanceAddress = (): string => {\n        return this.instance;\n    };\n\n    hasInstance = (): boolean => {\n        return this.instance !== '0x0000000000000000000000000000000000000000';\n    };\n\n    isDeploying = (): boolean => {\n        return this.deploying;\n    };\n\n    wrapTransaction(\n        contractType: ContractTypes,\n        action: string,\n        params: any[]\n    ): string {\n        const abi = schema[contractType];\n        const iface = new Interface(abi);\n        const data = iface.functions[action].encode(params);\n        return data;\n    }\n}\n","import fetch from 'isomorphic-fetch';\nimport { MarketAsset, MarketAssetPriceMap, StringMap } from '../types';\nimport { MarketAssetMap } from '../stores/Market';\nimport { bnum } from '../utils/helpers';\nconst pricesBackup = require('./pricesBackup.json');\nconst listBackup = require('./listBackup.json');\n\nconst conflictSymbols = [\n    'master-usd',\n    'compound-coin',\n    'blazecoin',\n    'ong',\n    'swapcash',\n    'swaps-network',\n    'swap-token',\n];\n\nconst MARKET_API_URL =\n    process.env.REACT_APP_MARKET_API_URL || 'https://api.coingecko.com/api/v3';\n\nexport async function fetchAssetPrices(\n    symbolsToFetch: string[],\n    assetData: MarketAssetMap,\n    idToSymbolMap: StringMap\n): Promise<MarketAssetPriceMap> {\n    let idQueryString = '';\n    symbolsToFetch.forEach((symbol, index) => {\n        if (symbol !== '' && assetData[symbol] !== undefined) {\n            if (index === symbolsToFetch.length - 1) {\n                idQueryString += `${assetData[symbol].id}`;\n            } else {\n                idQueryString += `${assetData[symbol].id}%2C`;\n            }\n        }\n    });\n\n    const query = `simple/price?ids=${idQueryString}&vs_currencies=usd&include_market_cap=false&include_last_updated_at=false`;\n    let priceMap: MarketAssetPriceMap = {};\n    let prices = {};\n    try {\n        const response = await fetch(`${MARKET_API_URL}/${query}`, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n        });\n\n        prices = await response.json();\n    } catch (err) {\n        console.log(`Coingecko call error. Using backup prices.`);\n        prices = pricesBackup;\n    }\n\n    Object.keys(prices).forEach(key => {\n        const price = prices[key].usd;\n        const symbol = idToSymbolMap[key];\n        priceMap[symbol] = {\n            value: bnum(price),\n            currency: 'usd',\n        };\n    });\n\n    return priceMap;\n}\n\nexport async function fetchAssetList(\n    symbolsToFetch: string[]\n): Promise<MarketAssetMap> {\n    const query = `coins/list`;\n\n    let assets = [];\n\n    try {\n        const response = await fetch(`${MARKET_API_URL}/${query}`, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n        });\n\n        assets = await response.json();\n    } catch (err) {\n        console.log(`Coingecko call error. Using backup prices.`);\n        assets = listBackup;\n    }\n\n    const formatAsset = (asset): MarketAsset => {\n        return {\n            id: asset.id,\n            name: asset.name,\n            symbol: asset.symbol.toUpperCase(),\n        } as MarketAsset;\n    };\n\n    // Only store assets that map to deployed.json approved assets\n    // toUpperCase symbol, compare to symbols in list, store if match\n\n    const result: MarketAssetMap = {};\n    symbolsToFetch.forEach(assetSymbol => {\n        const match = assets.find(\n            value =>\n                value.symbol.toUpperCase() === assetSymbol.toUpperCase() &&\n                !conflictSymbols.includes(value.id)\n        );\n        if (match) {\n            result[assetSymbol] = formatAsset(match);\n        }\n    });\n\n    return result;\n}\n","import { ValidationRules } from 'react-form-validator-core';\n\nexport enum ValidationStatus {\n    VALID = 'Valid',\n    EMPTY = 'Empty',\n    ZERO = 'Zero',\n    NOT_FLOAT = 'Not Float',\n    NEGATIVE = 'Negative',\n    INSUFFICIENT_BALANCE = 'Insufficient Balance',\n    MINIMUM_BALANCE = 'Minimum Balance',\n    INSUFFICIENT_LIQUIDITY = 'Insufficient Liquidity',\n    BAD_WEIGHT = 'Invalid weight',\n    BAD_FEE = 'Invalid fee',\n    NO_POOLS = 'There are no Pools with selected tokens',\n    MAX_DIGITS_EXCEEDED = 'Maximum Digits Exceeded',\n    MAX_VALUE_EXCEEDED = 'Maximum Value Exceeded',\n}\n\nexport const validateTokenValue = (\n    value: string,\n    options?: {\n        limitDigits?: boolean;\n    }\n): ValidationStatus => {\n    if (value.substr(0, 1) === '.') {\n        value = '0' + value;\n    }\n\n    if (ValidationRules.isEmpty(value)) {\n        return ValidationStatus.EMPTY;\n    }\n\n    if (!ValidationRules.isFloat(value)) {\n        return ValidationStatus.NOT_FLOAT;\n    }\n\n    if (parseFloat(value).toString() === '0') {\n        return ValidationStatus.ZERO;\n    }\n\n    if (!ValidationRules.isPositive(value)) {\n        return ValidationStatus.NEGATIVE;\n    }\n\n    if (options && options.limitDigits) {\n        // restrict to 2 decimal places\n        const acceptableValues = [/^$/, /^\\d{1,2}$/, /^\\d{0,2}\\.\\d{0,2}$/];\n        // if its within accepted decimal limit, update the input state\n        if (!acceptableValues.some(a => a.test(value))) {\n            return ValidationStatus.MAX_DIGITS_EXCEEDED;\n        }\n    }\n\n    return ValidationStatus.VALID;\n};\n","import RootStore from 'stores/Root';\nimport { action, observable } from 'mobx';\nimport { MarketAsset, MarketAssetPriceMap, Pool, StringMap } from 'types';\nimport { fetchAssetList, fetchAssetPrices } from 'provider/market';\nimport { BigNumber } from 'utils/bignumber';\nimport { bnum } from '../utils/helpers';\n\n// Index by symbol\nexport interface MarketAssetMap {\n    [index: string]: MarketAsset;\n}\n\nexport default class MarketStore {\n    @observable assets: MarketAssetMap;\n    @observable assetsLoaded: boolean = false;\n    @observable assetPricesLoaded: boolean = false;\n    @observable idToSymbolMap: StringMap;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.assets = {} as MarketAssetMap;\n        this.idToSymbolMap = {} as StringMap;\n    }\n\n    @action async fetchAssetPrices(symbolsToFetch: string[]) {\n        if (!this.assetsLoaded || !this.assets[symbolsToFetch[0]]) {\n            throw new Error('Data not initialized to fetch asset prices');\n        }\n        const response = await fetchAssetPrices(\n            symbolsToFetch,\n            this.assets,\n            this.idToSymbolMap\n        );\n\n        this.setAssetPrices(response);\n        this.assetPricesLoaded = true;\n    }\n\n    @action async fetchAssetList(symbolsToFetch: string[]) {\n        const response = await fetchAssetList(symbolsToFetch);\n\n        this.setAssetList(response);\n    }\n\n    @action setAssetPrices(prices: MarketAssetPriceMap) {\n        Object.keys(this.assets).forEach(key => {\n            this.assets[key].price = prices[key.toUpperCase()];\n        });\n    }\n\n    @action setAssetList(assets: MarketAssetMap) {\n        this.assets = assets;\n        Object.keys(this.assets).forEach(key => {\n            const asset = this.assets[key];\n            this.idToSymbolMap[asset.id] = asset.symbol;\n        });\n        this.assetsLoaded = true;\n    }\n\n    getSymbolById(id: string): string {\n        if (!this.idToSymbolMap[id]) {\n            throw new Error('No Symbol found for specified ID');\n        }\n        return this.idToSymbolMap[id];\n    }\n\n    // Tokens with unknown symbol have 0 value\n    getValue(symbol: string, balance: BigNumber): BigNumber {\n        if (!this.hasAssetPrice(symbol)) {\n            // console.warn('Symbol price not found for ' + symbol);\n            return bnum(0);\n        }\n\n        return this.assets[symbol].price.value.times(balance);\n    }\n\n    getPortfolioValue(pool: Pool): BigNumber {\n        const { contractMetadataStore } = this.rootStore;\n        let sumValue = bnum(0);\n        let sumWeight = bnum(0);\n        let portfolioValue = bnum(0);\n        pool.tokens.forEach((token, index) => {\n            if (contractMetadataStore.isSupported(token.address)) {\n                let ticker = contractMetadataStore.getTokenMetadata(\n                    token.address\n                ).ticker;\n                let tokenValue = this.getValue(ticker, token.balance);\n                sumValue = sumValue.plus(tokenValue);\n                if (tokenValue.isGreaterThan(bnum(0))) {\n                    sumWeight = sumWeight.plus(token.denormWeightProportion);\n                }\n            }\n        });\n\n        if (sumWeight.isGreaterThan(bnum(0))) {\n            portfolioValue = sumValue.div(sumWeight);\n        }\n\n        return portfolioValue;\n    }\n\n    getPoolVolume(pool: Pool): BigNumber | undefined {\n        const { contractMetadataStore } = this.rootStore;\n        let volumeTotal = bnum(0);\n\n        pool.swaps.forEach(swap => {\n            if (contractMetadataStore.hasTokenMetadata(swap.tokenIn)) {\n                let ticker = contractMetadataStore.getTokenMetadata(\n                    swap.tokenIn\n                ).ticker;\n                volumeTotal = volumeTotal.plus(\n                    this.getValue(ticker, swap.tokenAmountIn)\n                );\n            } else if (contractMetadataStore.hasTokenMetadata(swap.tokenOut)) {\n                let ticker = contractMetadataStore.getTokenMetadata(\n                    swap.tokenOut\n                ).ticker;\n                volumeTotal = volumeTotal.plus(\n                    this.getValue(ticker, swap.tokenAmountOut)\n                );\n            }\n        });\n\n        return volumeTotal;\n    }\n\n    getAssetPrice(assetSymbol: string): BigNumber | undefined {\n        if (!this.assets[assetSymbol]) {\n            throw new Error(`Asset ${assetSymbol} not fetched`);\n        }\n\n        return this.assets[assetSymbol].price\n            ? this.assets[assetSymbol].price.value\n            : undefined;\n    }\n\n    hasAssetPrice(assetSymbol: string): boolean {\n        return !!this.assets[assetSymbol] && !!this.assets[assetSymbol].price;\n    }\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport {\n    BigNumberMap,\n    Checkbox,\n    CheckboxMap,\n    Input,\n    InputMap,\n    Pool,\n} from '../types';\nimport { bnum, hasMaxApproval, MAX_UINT } from '../utils/helpers';\nimport { validateTokenValue, ValidationStatus } from './actions/validators';\nimport { BigNumber } from 'utils/bignumber';\n\nexport enum DepositType {\n    MULTI_ASSET,\n    SINGLE_ASSET,\n}\n\nexport default class AddLiquidityFormStore {\n    @observable checkboxes: CheckboxMap;\n    @observable checkboxesLoaded: boolean;\n    @observable inputs: InputMap;\n    @observable joinInputs: BigNumberMap;\n    @observable confirmation: Checkbox;\n    @observable activeInputKey: string | undefined;\n    @observable activeToken: string;\n    @observable activePool: string;\n    @observable activeAccount: string | undefined = undefined;\n    @observable modalOpen: boolean;\n    @observable hasTransactionError: boolean;\n    @observable depositType: DepositType;\n    @observable joinRatio: BigNumber;\n    @observable validationStatus: ValidationStatus;\n\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.resetApprovalCheckboxStatusMap();\n        this.resetJoinInputs();\n        this.validationStatus = ValidationStatus.EMPTY;\n    }\n\n    @action openModal(poolAddress, account, tokenAddresses: string[]) {\n        this.modalOpen = true;\n        this.depositType = DepositType.MULTI_ASSET;\n        this.resetApprovalCheckboxStatusMap();\n        this.confirmation = {\n            checked: false,\n            touched: false,\n        };\n        this.activeToken = tokenAddresses[0];\n        this.activePool = poolAddress;\n        this.activeAccount = account;\n        this.hasTransactionError = false;\n        this.initializeCheckboxes(tokenAddresses);\n        this.initializeInputs(tokenAddresses);\n        this.validationStatus = ValidationStatus.EMPTY;\n    }\n\n    @action closeModal() {\n        this.modalOpen = false;\n        this.resetApprovalCheckboxStatusMap();\n    }\n\n    @action resetApprovalCheckboxStatusMap() {\n        this.checkboxes = {} as CheckboxMap;\n        this.inputs = {} as InputMap;\n        this.activeInputKey = undefined;\n        this.checkboxesLoaded = false;\n    }\n\n    @action resetJoinInputs() {\n        this.joinInputs = {} as BigNumberMap;\n    }\n\n    // Assumes balances are loaded - don't execute without that condition already met\n    private getInputValidationStatus(\n        tokenAddress: string,\n        account: string | undefined,\n        inputBalance: BigNumber\n    ): ValidationStatus {\n        const { tokenStore } = this.rootStore;\n\n        // Always valid if no account\n        if (!account) {\n            return ValidationStatus.VALID;\n        }\n\n        const accountBalance = tokenStore.normalizeBalance(\n            tokenStore.getBalance(tokenAddress, account),\n            tokenAddress\n        );\n\n        let status = validateTokenValue(inputBalance.toString());\n\n        if (status === ValidationStatus.VALID) {\n            status = inputBalance.lte(accountBalance)\n                ? ValidationStatus.VALID\n                : ValidationStatus.INSUFFICIENT_BALANCE;\n        }\n\n        return status;\n    }\n\n    private requireValidAddress(tokenAddress) {\n        if (!this.inputs[tokenAddress]) {\n            throw new Error(`Amount input for ${tokenAddress} not initialized`);\n        }\n    }\n\n    getInput(tokenAddress): Input {\n        this.requireValidAddress(tokenAddress);\n        return this.inputs[tokenAddress];\n    }\n\n    @action setInputValue(tokenAddress: string, value: string) {\n        this.requireValidAddress(tokenAddress);\n        this.inputs[tokenAddress].value = value;\n        this.inputs[tokenAddress].validation = validateTokenValue(value);\n    }\n\n    @action setActiveInputKey(tokenAddress: string) {\n        this.activeInputKey = tokenAddress;\n    }\n\n    @action setInputTouched(tokenAddress: string, touched: boolean) {\n        this.requireValidAddress(tokenAddress);\n        this.inputs[tokenAddress].touched = touched;\n    }\n\n    hasValidInput(): boolean {\n        return this.validationStatus === ValidationStatus.VALID;\n    }\n\n    getCheckbox(tokenAddress: string): Checkbox {\n        if (!this.checkboxes[tokenAddress]) {\n            throw new Error(\n                `No checkbox found for tokenAddress ${tokenAddress}`\n            );\n        }\n        return this.checkboxes[tokenAddress];\n    }\n\n    isCheckboxChecked(tokenAddress: string) {\n        if (this.checkboxes[tokenAddress]) {\n            return this.checkboxes[tokenAddress].checked;\n        } else {\n            return false;\n        }\n    }\n\n    isCheckboxTouched(tokenAddress: string) {\n        if (this.checkboxes[tokenAddress]) {\n            return this.checkboxes[tokenAddress].touched;\n        } else {\n            return false;\n        }\n    }\n\n    @action setActiveToken(assetAddress) {\n        this.activeToken = assetAddress;\n        this.validate();\n    }\n\n    @action setActivePool(poolAddress) {\n        this.activePool = poolAddress;\n    }\n\n    @action setActiveAccount(account) {\n        this.activeAccount = account;\n    }\n\n    initApprovalCheckbox(): Checkbox {\n        return {\n            checked: false,\n            touched: false,\n        };\n    }\n\n    setDepositType(depositType: DepositType) {\n        this.depositType = depositType;\n        this.validate();\n    }\n\n    @action setTransactionError() {\n        this.hasTransactionError = true;\n    }\n\n    calcRatio(\n        pool: Pool,\n        activeInputAddress: string,\n        activeInputAmount: string\n    ): BigNumber {\n        const activeToken = pool.tokens.find(\n            token => token.address === activeInputAddress\n        );\n\n        return bnum(activeInputAmount).div(activeToken.balance);\n    }\n\n    setJoinRatio(ratio: BigNumber) {\n        this.joinRatio = ratio;\n    }\n\n    @action refreshInputAmounts(pool: Pool, account: string, ratio: BigNumber) {\n        this.resetJoinInputs();\n\n        pool.tokens.forEach(token => {\n            const isTokenActive = token.address === this.activeInputKey;\n            const isActiveInputValid =\n                this.inputs[this.activeInputKey].validation ===\n                ValidationStatus.VALID;\n            const isMultiAsset = this.depositType === DepositType.MULTI_ASSET;\n\n            if (!isMultiAsset && !isTokenActive) {\n                return;\n            }\n\n            /* Only calculate other token balances if\n                2. This token is not for the active input field\n                3. The active input is valid\n             */\n            if (!isTokenActive && isActiveInputValid) {\n                const requiredBalance = token.balance.times(ratio);\n                this.inputs[token.address].value = requiredBalance.toString();\n\n                const validationStatus = this.getInputValidationStatus(\n                    token.address,\n                    account,\n                    requiredBalance\n                );\n\n                this.inputs[token.address].validation = validationStatus;\n\n                this.setJoinInputParam(token.address, requiredBalance);\n            }\n\n            // Reset other input fields on invalid active input\n            else if (!isTokenActive && !isActiveInputValid) {\n                this.setInputValue(token.address, '');\n            }\n\n            // Check for insufficent balance on active valid input if user logged in\n            else if (isTokenActive && isActiveInputValid) {\n                const { validation, value } = this.inputs[token.address];\n\n                if (validation === ValidationStatus.VALID && account) {\n                    const requiredBalance = token.balance.times(ratio);\n\n                    const validation = this.getInputValidationStatus(\n                        token.address,\n                        account,\n                        bnum(value)\n                    );\n\n                    this.inputs[token.address].validation = validation;\n\n                    const valueForJoin = requiredBalance.gt(bnum(value))\n                        ? requiredBalance\n                        : bnum(value);\n\n                    this.setJoinInputParam(token.address, valueForJoin);\n                }\n            }\n        });\n\n        this.validate();\n    }\n\n    private validate() {\n        const { poolStore } = this.rootStore;\n        const pool = poolStore.getPool(this.activePool);\n\n        this.validationStatus = ValidationStatus.VALID;\n        // amount\n        if (this.depositType === DepositType.MULTI_ASSET) {\n            for (const token of pool.tokens) {\n                const amountInput = this.getInput(token.address);\n                if (amountInput.validation !== ValidationStatus.VALID) {\n                    this.validationStatus = amountInput.validation;\n                }\n            }\n        } else {\n            const amountInput = this.getInput(this.activeToken);\n            if (amountInput.validation !== ValidationStatus.VALID) {\n                this.validationStatus = amountInput.validation;\n            } else {\n                const maxInRatio = 0.5;\n                const amount = bnum(amountInput.value);\n                const tokenIn = pool.tokens.find(\n                    token => token.address === this.activeToken\n                );\n                if (amount.div(tokenIn.balance).gt(maxInRatio)) {\n                    this.validationStatus =\n                        ValidationStatus.INSUFFICIENT_LIQUIDITY;\n                }\n            }\n        }\n    }\n\n    setJoinInputParam(tokenAddress: string, amount: BigNumber) {\n        this.joinInputs[tokenAddress] = amount;\n    }\n\n    formatInputsForJoin(): string[] {\n        const { tokenStore } = this.rootStore;\n        return Object.keys(this.joinInputs).map(key => {\n            const tokenAddress = key;\n            return tokenStore\n                .denormalizeBalance(\n                    bnum(this.joinInputs[tokenAddress]),\n                    tokenAddress\n                )\n                .integerValue(BigNumber.ROUND_DOWN)\n                .toString();\n        });\n    }\n\n    maxUintInputAmounts(): string[] {\n        return Object.keys(this.joinInputs).map(key => {\n            return MAX_UINT.toString();\n        });\n    }\n\n    @action setApprovalCheckboxTouched(tokenAddress: string, touched: boolean) {\n        if (!this.checkboxes[tokenAddress]) {\n            this.checkboxes[tokenAddress] = this.initApprovalCheckbox();\n        }\n\n        this.checkboxes[tokenAddress].touched = touched;\n    }\n\n    @action setApprovalCheckboxChecked(tokenAddress: string, checked: boolean) {\n        if (!this.checkboxes[tokenAddress]) {\n            this.checkboxes[tokenAddress] = this.initApprovalCheckbox();\n        }\n\n        this.checkboxes[tokenAddress].checked = checked;\n    }\n\n    @action setBulkApprovalCheckboxStatusByApprovals(\n        poolAddress: string,\n        tokenAddresses: string[],\n        approvals: BigNumberMap\n    ) {\n        tokenAddresses.forEach((tokenAddress, index) => {\n            if (!approvals[tokenAddress]) {\n                throw new Error('Missing token address in approvals input');\n            }\n\n            this.setApprovalCheckboxChecked(\n                tokenAddress,\n                hasMaxApproval(approvals[tokenAddress])\n            );\n        });\n\n        this.checkboxesLoaded = true;\n    }\n\n    @action toggleConfirmation() {\n        const checked = !this.confirmation.checked;\n        this.confirmation = {\n            checked,\n            touched: true,\n        };\n    }\n\n    @action initializeCheckboxes(tokenAddresses: string[]) {\n        tokenAddresses.forEach(tokenAddress => {\n            this.checkboxes[tokenAddress] = {\n                checked: false,\n                touched: false,\n            };\n        });\n        this.checkboxesLoaded = true;\n    }\n\n    @action initializeInputs(tokenAddresses: string[]) {\n        tokenAddresses.forEach(tokenAddress => {\n            this.inputs[tokenAddress] = {\n                value: '',\n                touched: false,\n                validation: ValidationStatus.EMPTY,\n            };\n        });\n    }\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { EtherKey } from './Token';\nimport { Input } from '../types';\nimport { validateTokenValue, ValidationStatus } from './actions/validators';\nimport { bnum } from '../utils/helpers';\nimport { calcSingleOutGivenPoolIn } from '../utils/math';\n\nexport enum DepositType {\n    MULTI_ASSET,\n    SINGLE_ASSET,\n}\n\nexport default class RemoveLiquidityFormStore {\n    @observable activeToken: string;\n    @observable activePool: string;\n    @observable activeAccount: string | undefined = undefined;\n    @observable modalOpen: boolean;\n    @observable shareToWithdraw: Input;\n    @observable depositType: DepositType;\n    @observable validationStatus: ValidationStatus;\n\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.resetModal();\n        this.validationStatus = ValidationStatus.EMPTY;\n    }\n\n    @action openModal(poolAddress, account, tokenAddresses: string[]) {\n        this.modalOpen = true;\n        this.activeToken = tokenAddresses[0];\n        this.activePool = poolAddress;\n        this.activeAccount = account;\n        this.depositType = DepositType.MULTI_ASSET;\n        this.validationStatus = ValidationStatus.EMPTY;\n    }\n\n    setShareToWithdraw(value: string) {\n        this.shareToWithdraw.value = value;\n        this.shareToWithdraw.validation = validateTokenValue(value);\n        if (bnum(value).gt(100)) {\n            this.shareToWithdraw.validation =\n                ValidationStatus.MAX_VALUE_EXCEEDED;\n        }\n        this.validate();\n    }\n\n    setDepositType(depositType: DepositType) {\n        this.depositType = depositType;\n        this.validate();\n    }\n\n    setActiveToken(asset: string) {\n        this.activeToken = asset;\n        this.validate();\n    }\n\n    getShareToWithdraw() {\n        return this.shareToWithdraw.value;\n    }\n\n    hasValidInput() {\n        return this.validationStatus === ValidationStatus.VALID;\n    }\n\n    private validate() {\n        const { tokenStore, poolStore } = this.rootStore;\n        const pool = poolStore.getPool(this.activePool);\n\n        this.validationStatus = ValidationStatus.VALID;\n        if (this.shareToWithdraw.validation !== ValidationStatus.VALID) {\n            this.validationStatus = this.shareToWithdraw.validation;\n        }\n        if (this.depositType === DepositType.SINGLE_ASSET) {\n            const tokenOutAddress = this.activeToken;\n            const tokenOut = pool.tokens.find(\n                token => token.address === tokenOutAddress\n            );\n\n            const maxOutRatio = 1 / 3;\n            const shareToWithdraw = this.getShareToWithdraw();\n            const amount = poolStore.getUserTokenPercentage(\n                pool.address,\n                this.activeAccount,\n                shareToWithdraw\n            );\n\n            const tokenBalanceOut = tokenStore.denormalizeBalance(\n                tokenOut.balance,\n                tokenOutAddress\n            );\n            const tokenWeightOut = tokenOut.denormWeight;\n            const poolSupply = tokenStore.denormalizeBalance(\n                pool.totalShares,\n                EtherKey\n            );\n            const totalWeight = pool.totalWeight;\n            const swapFee = pool.swapFee;\n\n            if (amount.div(poolSupply).gt(0.99)) {\n                // Invalidate user's attempt to withdraw the entire pool supply in a single token\n                // At amounts close to 100%, solidity math freaks out\n                this.validationStatus = ValidationStatus.INSUFFICIENT_LIQUIDITY;\n                return;\n            }\n\n            const tokenAmountOut = calcSingleOutGivenPoolIn(\n                tokenBalanceOut,\n                tokenWeightOut,\n                poolSupply,\n                totalWeight,\n                amount,\n                swapFee\n            );\n            if (tokenAmountOut.div(tokenBalanceOut).gt(maxOutRatio)) {\n                this.validationStatus = ValidationStatus.INSUFFICIENT_LIQUIDITY;\n            }\n        }\n    }\n\n    @action closeModal() {\n        this.modalOpen = false;\n        this.resetModal();\n    }\n\n    resetModal() {\n        this.shareToWithdraw = {\n            value: '',\n            touched: false,\n            validation: ValidationStatus.EMPTY,\n        };\n    }\n}\n","import { BigNumber } from './bignumber';\n\nconst BONE = new BigNumber(10).pow(18);\nconst EXIT_FEE = new BigNumber(0);\nconst BPOW_PRECISION = BONE.idiv(new BigNumber(10).pow(10));\n\nexport function calcOutGivenIn(\n    tokenBalanceIn: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenBalanceOut: BigNumber,\n    tokenWeightOut: BigNumber,\n    tokenAmountIn: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    let weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\n    let adjustedIn = BONE.minus(swapFee);\n    adjustedIn = bmul(tokenAmountIn, adjustedIn);\n    let y = bdiv(tokenBalanceIn, tokenBalanceIn.plus(adjustedIn));\n    let foo = bpow(y, weightRatio);\n    let bar = BONE.minus(foo);\n    let tokenAmountOut = bmul(tokenBalanceOut, bar);\n    return tokenAmountOut;\n}\n\nexport function calcInGivenOut(\n    tokenBalanceIn: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenBalanceOut: BigNumber,\n    tokenWeightOut: BigNumber,\n    tokenAmountOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    let weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\n    let diff = tokenBalanceOut.minus(tokenAmountOut);\n    let y = bdiv(tokenBalanceOut, diff);\n    let foo = bpow(y, weightRatio);\n    foo = foo.minus(BONE);\n    let tokenAmountIn = BONE.minus(swapFee);\n    tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\n    return tokenAmountIn;\n}\n\nexport function calcSpotPrice(\n    tokenBalanceIn: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenBalanceOut: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    const numer = bdiv(tokenBalanceIn, tokenWeightIn);\n    const denom = bdiv(tokenBalanceOut, tokenWeightOut);\n    const ratio = bdiv(numer, denom);\n    const scale = bdiv(BONE, bsubSign(BONE, swapFee).res);\n    return bmul(ratio, scale);\n}\n\nexport function calcPoolOutGivenSingleIn(\n    tokenBalanceIn: BigNumber,\n    tokenWeightIn: BigNumber,\n    poolSupply: BigNumber,\n    totalWeight: BigNumber,\n    tokenAmountIn: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    const normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n    const zaz = bmul(BONE.minus(normalizedWeight), swapFee);\n    const tokenAmountInAfterFee = bmul(tokenAmountIn, BONE.minus(zaz));\n\n    const newTokenBalanceIn = tokenBalanceIn.plus(tokenAmountInAfterFee);\n    const tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\n\n    const poolRatio = bpow(tokenInRatio, normalizedWeight);\n    const newPoolSupply = bmul(poolRatio, poolSupply);\n    const poolAmountOut = newPoolSupply.minus(poolSupply);\n    return poolAmountOut;\n}\n\nexport function calcPoolInGivenSingleOut(\n    tokenBalanceOut: BigNumber,\n    tokenWeightOut: BigNumber,\n    poolSupply: BigNumber,\n    totalWeight: BigNumber,\n    tokenAmountOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    const normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n    const zoo = BONE.minus(normalizedWeight);\n    const zar = bmul(zoo, swapFee);\n    const tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, BONE.minus(zar));\n\n    const newTokenBalanceOut = tokenBalanceOut.minus(\n        tokenAmountOutBeforeSwapFee\n    );\n    const tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\n\n    const poolRatio = bpow(tokenOutRatio, normalizedWeight);\n    const newPoolSupply = bmul(poolRatio, poolSupply);\n    const poolAmountInAfterExitFee = poolSupply.minus(newPoolSupply);\n\n    const poolAmountIn = bdiv(poolAmountInAfterExitFee, BONE.minus(EXIT_FEE));\n    return poolAmountIn;\n}\n\nexport function calcSingleInGivenPoolOut(\n    tokenBalanceIn: BigNumber,\n    tokenWeightIn: BigNumber,\n    poolSupply: BigNumber,\n    totalWeight: BigNumber,\n    poolAmountOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    const normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n    const newPoolSupply = poolSupply.plus(poolAmountOut);\n    const poolRatio = bdiv(newPoolSupply, poolSupply);\n\n    const boo = bdiv(BONE, normalizedWeight);\n    const tokenInRatio = bpow(poolRatio, boo);\n    const newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\n    const tokenAmountInAfterFee = newTokenBalanceIn.minus(tokenBalanceIn);\n\n    const zar = bmul(BONE.minus(normalizedWeight), swapFee);\n    const tokenAmountIn = bdiv(tokenAmountInAfterFee, BONE.minus(zar));\n    return tokenAmountIn;\n}\n\nexport function calcSingleOutGivenPoolIn(\n    tokenBalanceOut: BigNumber,\n    tokenWeightOut: BigNumber,\n    poolSupply: BigNumber,\n    totalWeight: BigNumber,\n    poolAmountIn: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    const normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n    const poolAmountInAfterExitFee = bmul(poolAmountIn, BONE.minus(EXIT_FEE));\n    const newPoolSupply = poolSupply.minus(poolAmountInAfterExitFee);\n    const poolRatio = bdiv(newPoolSupply, poolSupply);\n\n    const tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\n    const newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\n\n    const tokenAmountOutBeforeSwapFee = tokenBalanceOut.minus(\n        newTokenBalanceOut\n    );\n\n    const zaz = bmul(BONE.minus(normalizedWeight), swapFee);\n    const tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, BONE.minus(zaz));\n    return tokenAmountOut;\n}\n\nfunction bmul(a: BigNumber, b: BigNumber): BigNumber {\n    let c0 = a.times(b);\n    let c1 = c0.plus(BONE.div(new BigNumber(2)));\n    let c2 = c1.idiv(BONE);\n    return c2;\n}\n\nfunction bdiv(a: BigNumber, b: BigNumber): BigNumber {\n    let c0 = a.times(BONE);\n    let c1 = c0.plus(b.div(new BigNumber(2)));\n    let c2 = c1.idiv(b);\n    return c2;\n}\n\nfunction btoi(a: BigNumber): BigNumber {\n    return a.idiv(BONE);\n}\n\nfunction bfloor(a: BigNumber): BigNumber {\n    return btoi(a).times(BONE);\n}\n\nfunction bsubSign(\n    a: BigNumber,\n    b: BigNumber\n): { res: BigNumber; bool: boolean } {\n    if (a.gte(b)) {\n        let res = a.minus(b);\n        let bool = false;\n        return { res, bool };\n    } else {\n        let res = b.minus(a);\n        let bool = true;\n        return { res, bool };\n    }\n}\n\nfunction bpowi(a: BigNumber, n: BigNumber): BigNumber {\n    let z = !n.modulo(new BigNumber(2)).eq(new BigNumber(0)) ? a : BONE;\n\n    for (\n        n = n.idiv(new BigNumber(2));\n        !n.eq(new BigNumber(0));\n        n = n.idiv(new BigNumber(2))\n    ) {\n        a = bmul(a, a);\n        if (!n.modulo(new BigNumber(2)).eq(new BigNumber(0))) {\n            z = bmul(z, a);\n        }\n    }\n    return z;\n}\n\nfunction bpow(base: BigNumber, exp: BigNumber): BigNumber {\n    let whole = bfloor(exp);\n    let remain = exp.minus(whole);\n    let wholePow = bpowi(base, btoi(whole));\n    if (remain.eq(new BigNumber(0))) {\n        return wholePow;\n    }\n\n    let partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n    return bmul(wholePow, partialResult);\n}\n\nfunction bpowApprox(\n    base: BigNumber,\n    exp: BigNumber,\n    precision: BigNumber\n): BigNumber {\n    let a = exp;\n    let { res: x, bool: xneg } = bsubSign(base, BONE);\n    let term = BONE;\n    let sum = term;\n    let negative = false;\n\n    for (let i = 1; term.gte(precision); i++) {\n        let bigK = new BigNumber(i).times(BONE);\n        let { res: c, bool: cneg } = bsubSign(a, bigK.minus(BONE));\n        term = bmul(term, bmul(c, x));\n        term = bdiv(term, bigK);\n        if (term.eq(new BigNumber(0))) break;\n\n        if (xneg) negative = !negative;\n        if (cneg) negative = !negative;\n        if (negative) {\n            sum = sum.minus(term);\n        } else {\n            sum = sum.plus(term);\n        }\n    }\n\n    return sum;\n}\n","import { observable, action } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { Checkbox, CheckboxMap, Input, InputMap } from '../types';\nimport { bnum } from '../utils/helpers';\nimport { validateTokenValue, ValidationStatus } from './actions/validators';\nimport { BigNumber } from 'utils/bignumber';\n\nexport default class CreatePoolFormStore {\n    @observable tokens: string[];\n    @observable activeInputKey: string | undefined;\n    @observable checkboxes: CheckboxMap;\n    @observable weights: InputMap;\n    @observable amounts: InputMap;\n    @observable fee: Input;\n    @observable confirmation: Checkbox;\n    @observable assetModal = {\n        open: false,\n        inputValue: '',\n        activeTokenIndex: 0,\n    };\n    @observable validationStatus: ValidationStatus;\n\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.tokens = [];\n        this.checkboxes = {} as CheckboxMap;\n        this.weights = {} as InputMap;\n        this.amounts = {} as InputMap;\n        this.fee = {\n            value: '',\n            touched: false,\n            validation: ValidationStatus.EMPTY,\n        };\n        this.confirmation = {\n            checked: false,\n            touched: false,\n        };\n        this.validationStatus = ValidationStatus.EMPTY;\n        this.setDefaults();\n    }\n\n    @action addToken(token: string) {\n        this.tokens.push(token);\n        this.initializeTokenInputs(token);\n        this.initializeCheckbox(token);\n        this.validate();\n    }\n\n    @action removeToken(tokenAddress: string) {\n        const tokenIndex = this.tokens.findIndex(\n            token => token === tokenAddress\n        );\n        this.tokens.splice(tokenIndex, 1);\n        this.validate();\n    }\n\n    @action setTokenWeight(tokenAddress: string, denormWeight: string) {\n        this.weights[tokenAddress].value = denormWeight;\n    }\n\n    @action setTokenAmount(tokenAddress: string, amount: string) {\n        this.amounts[tokenAddress].value = amount;\n    }\n\n    @action setToken(token: string) {\n        const tokenIndex = this.assetModal.activeTokenIndex;\n        this.tokens[tokenIndex] = token;\n        this.initializeTokenInputs(token);\n        this.initializeCheckbox(token);\n        this.validate();\n    }\n\n    @action setFee(fee: string) {\n        this.fee.value = fee;\n        const validationStatus =\n            bnum(this.fee.value).gte(bnum(0.0001)) &&\n            bnum(this.fee.value).lte(bnum(10))\n                ? ValidationStatus.VALID\n                : ValidationStatus.BAD_FEE;\n        this.fee.validation = validationStatus;\n        this.validate();\n    }\n\n    @action toggleConfirmation() {\n        const checked = !this.confirmation.checked;\n        this.confirmation = {\n            checked,\n            touched: true,\n        };\n    }\n\n    @action setActiveInputKey(tokenAddress: string) {\n        this.activeInputKey = tokenAddress;\n    }\n\n    @action setApprovalCheckboxTouched(tokenAddress: string, touched: boolean) {\n        this.checkboxes[tokenAddress].touched = touched;\n    }\n\n    @action setApprovalCheckboxChecked(tokenAddress: string, checked: boolean) {\n        this.checkboxes[tokenAddress].checked = checked;\n    }\n\n    @action openModal(tokenAddress: string) {\n        const tokenIndex = this.tokens.findIndex(\n            token => token === tokenAddress\n        );\n        this.assetModal = {\n            open: true,\n            inputValue: '',\n            activeTokenIndex: tokenIndex,\n        };\n    }\n\n    @action closeModal() {\n        this.assetModal.open = false;\n    }\n\n    @action setModalInputValue(value: string) {\n        this.assetModal.inputValue = value;\n    }\n\n    @action refreshWeights(token: string) {\n        const validationStatus =\n            bnum(this.weights[token].value).gte(bnum(2)) &&\n            bnum(this.weights[token].value).lte(bnum(98))\n                ? ValidationStatus.VALID\n                : ValidationStatus.BAD_WEIGHT;\n        this.weights[token].validation = validationStatus;\n        this.validate();\n    }\n\n    @action refreshAmounts(token: string, account: string) {\n        const { contractMetadataStore, marketStore } = this.rootStore;\n\n        const amount = bnum(this.amounts[token].value);\n        const tokenMetadata = contractMetadataStore.getTokenMetadata(token);\n\n        if (!marketStore.hasAssetPrice(tokenMetadata.ticker)) {\n            const validationStatus = this.getInputValidationStatus(\n                token,\n                account,\n                amount\n            );\n\n            this.amounts[token].validation = validationStatus;\n            this.validate();\n            return;\n        }\n\n        const tokenValue = marketStore.getValue(tokenMetadata.ticker, amount);\n        const totalValue = tokenValue.div(this.weights[token].value);\n\n        for (const token of this.tokens) {\n            const tokenMetadata = contractMetadataStore.getTokenMetadata(token);\n            const value = totalValue.times(this.weights[token].value);\n            const price = marketStore.hasAssetPrice(tokenMetadata.ticker)\n                ? marketStore.getAssetPrice(tokenMetadata.ticker)\n                : bnum(0);\n            const amount = value.div(price);\n            const inputValue = amount.isNaN() ? '' : amount.toString();\n\n            const validationStatus = this.getInputValidationStatus(\n                token,\n                account,\n                amount\n            );\n\n            if (price.gt(0)) {\n                this.amounts[token].validation = validationStatus;\n                if (token !== this.activeInputKey) {\n                    this.amounts[token].value = inputValue;\n                }\n            }\n        }\n        this.validate();\n    }\n\n    private validate() {\n        // We want these checks to be in specific order\n        // so that validation message shows the error of the highest priority\n        this.validationStatus = ValidationStatus.VALID;\n        // fee\n        const feeInput = this.fee;\n        if (feeInput.validation !== ValidationStatus.VALID) {\n            this.validationStatus = feeInput.validation;\n        }\n        // amount\n        for (const token of this.tokens) {\n            const amountInput = this.getAmountInput(token);\n            if (amountInput.validation !== ValidationStatus.VALID) {\n                this.validationStatus = amountInput.validation;\n            }\n        }\n        // total weight\n        const totalWeight = this.tokens.reduce((totalWeight, token) => {\n            const weightInput = this.getWeightInput(token);\n            return totalWeight.plus(weightInput.value);\n        }, new BigNumber(0));\n        if (totalWeight.gt(bnum(100))) {\n            this.validationStatus = ValidationStatus.BAD_WEIGHT;\n        }\n        // weight\n        for (const token of this.tokens) {\n            const weightInput = this.getWeightInput(token);\n            if (weightInput.validation !== ValidationStatus.VALID) {\n                this.validationStatus = weightInput.validation;\n            }\n        }\n    }\n\n    private getInputValidationStatus(\n        tokenAddress: string,\n        account: string | undefined,\n        inputAmount: BigNumber\n    ): ValidationStatus {\n        const { tokenStore } = this.rootStore;\n\n        // Always valid if no account\n        if (!account) {\n            return ValidationStatus.VALID;\n        }\n\n        const denormalizedBalance = tokenStore.denormalizeBalance(\n            inputAmount,\n            tokenAddress\n        );\n\n        const accountBalance = tokenStore.getBalance(tokenAddress, account);\n\n        let status = validateTokenValue(inputAmount.toString());\n\n        if (status === ValidationStatus.VALID) {\n            if (accountBalance.lt(denormalizedBalance)) {\n                status = ValidationStatus.INSUFFICIENT_BALANCE;\n            } else if (denormalizedBalance.lt(bnum('1000000'))) {\n                status = ValidationStatus.MINIMUM_BALANCE;\n            } else {\n                status = ValidationStatus.VALID;\n            }\n        }\n\n        return status;\n    }\n\n    getWeightInput(tokenAddress): Input {\n        return this.weights[tokenAddress];\n    }\n\n    getAmountInput(tokenAddress): Input {\n        return this.amounts[tokenAddress];\n    }\n\n    getCheckbox(tokenAddress: string): Checkbox {\n        if (!this.checkboxes[tokenAddress]) {\n            throw new Error(\n                `No checkbox found for tokenAddress ${tokenAddress}`\n            );\n        }\n        return this.checkboxes[tokenAddress];\n    }\n\n    getRelativeWeight(tokenAddress): BigNumber {\n        const totalWeight = this.tokens.reduce((totalWeight, token) => {\n            const weight = this.getWeightInput(token);\n            return totalWeight.plus(weight.value);\n        }, new BigNumber(0));\n        const weight = this.getWeightInput(tokenAddress);\n        const weightNumber = new BigNumber(weight.value);\n        return weightNumber.div(totalWeight);\n    }\n\n    hasValidInput(): boolean {\n        return this.validationStatus === ValidationStatus.VALID;\n    }\n\n    private setDefaults() {\n        const { contractMetadataStore } = this.rootStore;\n        const tokenMetadata = contractMetadataStore.getWhitelistedTokenMetadata();\n        const daiToken = tokenMetadata.find(token => token.symbol === 'DAI');\n        this.addToken(daiToken.address);\n        this.setTokenWeight(daiToken.address, '30');\n        this.refreshWeights(daiToken.address);\n        const usdcToken = tokenMetadata.find(token => token.symbol === 'USDC');\n        this.addToken(usdcToken.address);\n        this.setTokenWeight(usdcToken.address, '20');\n        this.refreshWeights(usdcToken.address);\n        this.setFee('0.15');\n    }\n\n    private initializeTokenInputs(tokenAddress: string) {\n        this.weights[tokenAddress] = {\n            value: '',\n            touched: false,\n            validation: ValidationStatus.EMPTY,\n        };\n        this.amounts[tokenAddress] = {\n            value: '',\n            touched: false,\n            validation: ValidationStatus.EMPTY,\n        };\n    }\n\n    private initializeCheckbox(tokenAddress: string) {\n        this.checkboxes[tokenAddress] = {\n            checked: false,\n            touched: false,\n        };\n    }\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { fetchPoolSwaps } from 'provider/subgraph';\n\nexport default class SwapsTableStore {\n    @observable swaps: any[];\n    @observable isLoaded: boolean;\n    pageIncrement: number;\n    graphSkip: number;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.swaps = [];\n        this.isLoaded = false;\n        this.pageIncrement = 50;\n        this.graphSkip = 0;\n    }\n\n    @action async fetchPoolSwaps(poolAddress) {\n        this.isLoaded = true;\n        console.debug('[SwapsTable] Fetching Swaps: ', {\n            poolAddress,\n            pageIncrement: this.pageIncrement,\n            graphSkip: this.graphSkip,\n        });\n\n        const newSwaps = await fetchPoolSwaps(\n            poolAddress,\n            this.pageIncrement,\n            this.graphSkip\n        );\n        this.swaps = this.swaps.concat(newSwaps);\n    }\n\n    @action async pagePoolSwaps(poolAddress) {\n        this.graphSkip += this.pageIncrement;\n\n        console.debug('[SwapsTable] Paging Swaps: ', {\n            poolAddress,\n            pageIncrement: this.pageIncrement,\n            graphSkip: this.graphSkip,\n        });\n\n        this.fetchPoolSwaps(poolAddress);\n    }\n\n    @action async clearPoolSwaps() {\n        console.debug('[SwapsTable] Clearing Old Swaps.');\n        this.swaps = [];\n        this.isLoaded = false;\n        this.graphSkip = 0;\n    }\n}\n","// Stores\nimport ProviderStore from 'stores/Provider';\nimport BlockchainFetchStore from 'stores/BlockchainFetch';\nimport TokenStore from 'stores/Token';\nimport TransactionStore from './Transaction';\nimport PoolStore from './Pool';\nimport DropdownStore from './Dropdown';\nimport AppSettingsStore from './AppSettings';\nimport ContractMetadataStore from './ContractMetadata';\nimport ProxyStore from './Proxy';\nimport MarketStore from './Market';\nimport AddLiquidityFormStore from './AddLiquidityForm';\nimport RemoveLiquidityFormStore from './RemoveLiquidityForm';\nimport CreatePoolFormStore from './CreatePoolForm';\nimport SwapsTableStore from './SwapsTable';\n\nexport default class RootStore {\n    providerStore: ProviderStore;\n    blockchainFetchStore: BlockchainFetchStore;\n    tokenStore: TokenStore;\n    poolStore: PoolStore;\n    marketStore: MarketStore;\n    transactionStore: TransactionStore;\n    dropdownStore: DropdownStore;\n    appSettingsStore: AppSettingsStore;\n    contractMetadataStore: ContractMetadataStore;\n    proxyStore: ProxyStore;\n    addLiquidityFormStore: AddLiquidityFormStore;\n    removeLiquidityFormStore: RemoveLiquidityFormStore;\n    createPoolFormStore: CreatePoolFormStore;\n    swapsTableStore: SwapsTableStore;\n\n    constructor() {\n        this.providerStore = new ProviderStore(this);\n        this.blockchainFetchStore = new BlockchainFetchStore(this);\n        this.tokenStore = new TokenStore(this);\n        this.poolStore = new PoolStore(this);\n        this.marketStore = new MarketStore(this);\n        this.transactionStore = new TransactionStore(this);\n        this.dropdownStore = new DropdownStore(this);\n        this.appSettingsStore = new AppSettingsStore(this);\n        this.contractMetadataStore = new ContractMetadataStore(this);\n        this.proxyStore = new ProxyStore(this);\n        this.addLiquidityFormStore = new AddLiquidityFormStore(this);\n        this.removeLiquidityFormStore = new RemoveLiquidityFormStore(this);\n        this.createPoolFormStore = new CreatePoolFormStore(this);\n        this.swapsTableStore = new SwapsTableStore(this);\n\n        this.asyncSetup().catch(e => {\n            //TODO: Add retry on these fetches\n            throw new Error('Async Setup Failed ' + e);\n        });\n    }\n\n    async asyncSetup() {\n        // !!!!!!! Add web3 stuff here.\n        await this.providerStore.loadWeb3();\n\n        await this.marketStore.fetchAssetList(\n            this.contractMetadataStore.tickerSymbols\n        );\n        await this.marketStore.fetchAssetPrices(\n            this.contractMetadataStore.tickerSymbols\n        );\n    }\n}\n","// src/contexts/index.tsx\nimport React from 'react';\nimport RootStore from 'stores/Root';\n\nexport const storesContext = React.createContext({\n    root: new RootStore(),\n});\n\nexport const useStores = () => React.useContext(storesContext);\n","import React, { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { useStores } from 'contexts/storesContext';\nimport { useInterval } from 'utils/helperHooks';\nimport { observer } from 'mobx-react';\nconst Circle = require('../../assets/images/circle.svg') as string;\n\nconst MessageWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: calc(100vh);\n    background-color: var(--panel-background);\n`;\n\nconst rotate = keyframes`\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst Spinner = styled.img`\n    animation: 2s ${rotate} linear infinite;\n    width: 16px;\n    height: 16px;\n`;\n\nconst Web3Manager = observer(({ children }) => {\n    const {\n        root: { providerStore, blockchainFetchStore },\n    } = useStores();\n\n    // handle delayed loader state\n    const [showLoader, setShowLoader] = useState(true);\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setShowLoader(true);\n        }, 600);\n\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, []);\n\n    //Fetch user blockchain data on an interval using current params\n    useInterval(() => blockchainFetchStore.setFetchLoop(false), 2000);\n    // blockchainFetchStore.setFetchLoop(true)\n\n    // This means no injected web3 and infura backup has failed\n    if (!providerStore.providerStatus.active) {\n        console.debug('[Web3Manager] Render: No active network, show loading');\n        return showLoader ? (\n            <MessageWrapper>\n                <Spinner src={Circle} />\n            </MessageWrapper>\n        ) : null;\n    }\n\n    return children;\n});\n\nexport default Web3Manager;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport copy from 'copy-to-clipboard';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef(null);\n\n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nexport function useCopyClipboard(timeout = 500) {\n    const [isCopied, setIsCopied] = useState(false);\n\n    const staticCopy = useCallback(text => {\n        const didCopy = copy(text);\n        setIsCopied(didCopy);\n    }, []);\n\n    useEffect(() => {\n        if (isCopied) {\n            const hide = setTimeout(() => {\n                setIsCopied(false);\n            }, timeout);\n\n            return () => {\n                clearTimeout(hide);\n            };\n        }\n    }, [isCopied, setIsCopied, timeout]);\n\n    return [isCopied, staticCopy];\n}\n\n// modified from https://usehooks.com/usePrevious/\nexport function usePrevious(value) {\n    // The ref object is a generic container whose current property is mutable ...\n    // ... and can hold any value, similar to an instance property on a class\n    const ref = useRef();\n\n    // Store current value in ref\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); // Only re-run if value changes\n\n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n}\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Check } from 'react-feather';\nimport { observer } from 'mobx-react';\nimport { getEtherscanLink } from 'utils/helpers';\nimport { useStores } from '../../contexts/storesContext';\nconst Circle = require('../../assets/images/circle.svg') as string;\n\nconst TransactionStatusWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    min-width: 12px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    a {\n        color: var(--link-text);\n        font-weight: 500;\n        font-size: 14px;\n    }\n`;\n\nconst TransactionWrapper = styled.div`\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    width: 100%;\n    margin-top: 0.75rem;\n    a {\n        /* flex: 1 1 auto; */\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        min-width: 0;\n        max-width: 250px;\n    }\n`;\n\nconst rotate = keyframes`\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst Spinner = styled.img`\n    animation: 2s ${rotate} linear infinite;\n    width: 16px;\n    height: 16px;\n`;\n\nconst TransactionState = styled.div`\n    display: flex;\n    color: ${({ pending, theme }) => (pending ? '#DC6BE5' : '#27AE60')};\n    padding: 0.5rem 0.75rem;\n    font-weight: 500;\n    font-size: 0.75rem;\n    #pending {\n        animation: 2s ${rotate} linear infinite;\n    }\n`;\n\nconst Transaction = observer(({ hash, pending }) => {\n    const {\n        root: { providerStore },\n    } = useStores();\n\n    const activeChainId = providerStore.providerStatus.activeChainId;\n\n    return (\n        <TransactionWrapper key={hash}>\n            {pending ? (\n                <TransactionState pending={pending}>\n                    <Spinner src={Circle} id=\"pending\" />\n                </TransactionState>\n            ) : (\n                <TransactionState pending={pending}>\n                    <Check size=\"16\" />\n                </TransactionState>\n            )}\n            <TransactionStatusWrapper>\n                <a\n                    href={getEtherscanLink(activeChainId, hash, 'transaction')}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    {hash} ↗{' '}\n                </a>\n            </TransactionStatusWrapper>\n        </TransactionWrapper>\n    );\n});\n\nexport default Transaction;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { useStores } from 'contexts/storesContext';\nimport Transaction from './Transaction';\nimport { TransactionRecord } from 'stores/Transaction';\nimport { isChainIdSupported } from '../../provider/connectors';\n\nconst TransactionListWrapper = styled.div`\n    display: flex;\n    flex-flow: column nowrap;\n`;\n\nconst Panel = styled.div`\n    text-align: left;\n    display: flex;\n    flex-flow: column nowrap;\n    padding-top: 2rem;\n    flex-grow: 1;\n    overflow: auto;\n    background-color: var(--panel-background);\n`;\n\nconst TransactionHeader = styled.div`\n    border-top: 1px solid var(--panel-border);\n    align-items: left;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 18px;\n    padding-top: 14px;\n    color: var(--token-balance-text);\n    text-transform: uppercase;\n`;\n\nconst TransactionPanel = observer(() => {\n    const {\n        root: { transactionStore, providerStore },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n    const activeChainId = providerStore.providerStatus.activeChainId;\n\n    let pending = undefined;\n    let confirmed = undefined;\n\n    if (account && isChainIdSupported(activeChainId)) {\n        pending = transactionStore.getPendingTransactions(account);\n        confirmed = transactionStore.getConfirmedTransactions(account);\n    }\n\n    function renderTransactions(transactions: TransactionRecord[], pending) {\n        return (\n            <TransactionListWrapper>\n                {transactions.map((value, i) => {\n                    return (\n                        <Transaction\n                            key={i}\n                            hash={value.hash}\n                            pending={pending}\n                        />\n                    );\n                })}\n            </TransactionListWrapper>\n        );\n    }\n\n    let hasTx = !!pending.length || !!confirmed.length;\n\n    if (hasTx) {\n        return (\n            <Panel>\n                <TransactionHeader>Recent Transactions</TransactionHeader>\n                {renderTransactions(pending, true)}\n                {renderTransactions(confirmed, false)}\n            </Panel>\n        );\n    }\n\n    return <></>;\n});\n\nexport default TransactionPanel;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { web3Window as window } from 'provider/Web3Window';\nimport { usePrevious } from 'utils/helperHooks';\nimport { useStores } from 'contexts/storesContext';\nimport TransactionPanel from './TransactionPanel';\n\nconst StyledLink = styled.a`\n    color: #ffffff;\n    cursor: pointer;\n`;\n\nconst Lightbox = styled.div`\n    text-align: center;\n    position: fixed;\n    width: 100vw;\n    height: 100vh;\n    margin-left: -50vw;\n    top: 78px;\n    pointer-events: none;\n    left: 50%;\n    z-index: 2;\n    will-change: opacity;\n    background-color: rgba(0, 0, 0, 0.4);\n`;\n\nconst Wrapper = styled.div`\n    background-color: var(--panel-background);\n    position: absolute;\n    top: 0px;\n    right: 25px;\n    padding: 20px;\n    transition: all 0.5s ease;\n    margin: 0;\n    width: 300px;\n    pointer-events: auto;\n    z-index: 100;\n    border: 1px solid var(--panel-border);\n    border-radius: 0 0 4px 4px;\n`;\n\nconst WALLET_VIEWS = {\n    OPTIONS: 'options',\n    OPTIONS_SECONDARY: 'options_secondary',\n    ACCOUNT: 'account',\n    PENDING: 'pending',\n};\n\nconst WalletDropdown = observer(() => {\n    const {\n        root: { dropdownStore, providerStore },\n    } = useStores();\n\n    const active = providerStore.providerStatus.active;\n    const error = providerStore.providerStatus.error;\n    const account = providerStore.providerStatus.account;\n    const injectedActive = providerStore.providerStatus.injectedActive;\n    const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\n\n    const walletDropdownOpen = dropdownStore.walletDropdownVisible;\n\n    const toggleWalletDropdown = () => {\n        dropdownStore.toggleWalletDropdown();\n    };\n\n    // always reset to account view\n    useEffect(() => {\n        if (walletDropdownOpen) {\n            setWalletView(WALLET_VIEWS.ACCOUNT);\n        }\n    }, [walletDropdownOpen]);\n\n    // close modal when a connection is successful\n    const activePrevious = usePrevious(active);\n    useEffect(() => {\n        if (walletDropdownOpen && active && !activePrevious) {\n            setWalletView(WALLET_VIEWS.ACCOUNT);\n        }\n    }, [setWalletView, active, error, walletDropdownOpen, activePrevious]);\n\n    async function loadWalletDropdown() {\n        if (walletDropdownOpen) {\n            toggleWalletDropdown();\n        }\n        setWalletView(WALLET_VIEWS.ACCOUNT);\n        await providerStore.loadWeb3Modal();\n    }\n\n    function getDropdownContent() {\n        if (account && injectedActive && walletView === WALLET_VIEWS.ACCOUNT) {\n            return (\n                <>\n                    <>\n                        {(window.web3 || window.ethereum) && (\n                            <StyledLink\n                                onClick={async () => {\n                                    await providerStore.loadWeb3Modal();\n                                    toggleWalletDropdown();\n                                    // setWalletView(WALLET_VIEWS.OPTIONS)\n                                }}\n                            >\n                                Connect to a different wallet\n                            </StyledLink>\n                        )}\n                    </>\n                    <TransactionPanel />\n                </>\n            );\n        }\n\n        if (walletDropdownOpen) {\n            loadWalletDropdown();\n        }\n        return null;\n    }\n\n    if (walletDropdownOpen) {\n        return (\n            <Lightbox>\n                <Wrapper>{getDropdownContent()}</Wrapper>\n            </Lightbox>\n        );\n    }\n});\n\nexport default WalletDropdown;\n","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Jazzicon from 'jazzicon';\n\nconst StyledIdenticon = styled.div`\n    height: 1rem;\n    width: 1rem;\n    border-radius: 1.125rem;\n`;\n\nconst Identicon = ({ address }) => {\n    const ref = useRef(null);\n\n    useEffect(() => {\n        if (address && ref.current) {\n            ref.current.innerHTML = '';\n            ref.current.appendChild(\n                Jazzicon(16, parseInt(address.slice(2, 10), 16))\n            );\n        }\n    });\n\n    return <StyledIdenticon ref={ref} />;\n};\n\nexport default Identicon;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Button = styled.button`\n    width: ${props => (props.small ? '80px' : '155px')};\n    height: 38px;\n    background: ${props =>\n        props.primary\n            ? 'var(--primary-button-background)'\n            : 'var(--secondary-button-background)'};\n    border: 1px solid;\n    border-color: ${props =>\n        props.primary\n            ? 'var(--primary-button-border)'\n            : 'var(--secondary-button-border)'};\n    border-radius: 4px;\n    color: ${props =>\n        props.primary\n            ? 'var(--primary-button-text)'\n            : 'var(--secondary-button-text)'};\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 16px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    cursor: pointer;\n\n    &:hover {\n        background: ${props =>\n            props.primary\n                ? 'var(--primary-button-background-hover)'\n                : 'var(--secondary-button-background-hover)'};\n    }\n\n    &:disabled {\n        background: var(--disabled-button);\n        border: 1px solid var(--disabled-button);\n        color: var(--disabled-button-text);\n        cursor: not-allowed;\n    }\n`;\n\nconst ButtonComponent = ({\n    isActive = true,\n    isPrimary = false,\n    isSmall = false,\n    onClick,\n    text,\n}) => {\n    return (\n        <Container>\n            <Button\n                onClick={onClick}\n                disabled={!isActive}\n                primary={isPrimary}\n                small={isSmall}\n            >\n                {text}\n            </Button>\n        </Container>\n    );\n};\n\nexport default ButtonComponent;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Activity } from 'react-feather';\nimport { observer } from 'mobx-react';\nimport { shortenAddress } from 'utils/helpers';\nimport WalletDropdown from 'components/WalletDropdown';\nimport Identicon from '../Common/Identicon';\nimport { useStores } from '../../contexts/storesContext';\nimport Button from '../Common/Button';\n\nconst Circle = require('../../assets/images/circle.svg') as string;\nconst Dropdown = require('../../assets/images/dropdown.svg') as string;\nconst Dropup = require('../../assets/images/dropup.svg') as string;\n\nconst WarningIcon = styled.img`\n    width: 22px;\n    height: 26px;\n    margin-right: 0px;\n    color: var(--error);\n`;\n\nconst rotate = keyframes`\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst Spinner = styled.img`\n    animation: 2s ${rotate} linear infinite;\n    width: 16px;\n    height: 16px;\n`;\n\nconst Address = styled.div`\n    color: var(--address-color);\n`;\n\nconst WalletButton = styled.button`\n    background-color: var(--panel);\n    display: flex;\n    flex-flow: row nowrap;\n    border-radius: 4px;\n    padding: 0.5rem;\n    border: 1px solid var(--panel-border);\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 16px;\n    cursor: pointer;\n    justify-content: space-evenly;\n    align-items: center;\n    text-align: center;\n    height: 40px;\n    width: 160px;\n    :focus {\n        outline: none;\n    }\n`;\n\nconst Error = styled.button`\n    background-color: var(--panel);\n    border: 1px solid var(--error);\n    display: flex;\n    flex-flow: row nowrap;\n    width: 100%;\n    font-size: 0.9rem;\n    align-items: center;\n    padding: 0.5rem;\n    border-radius: 4px;\n    box-sizing: border-box;\n    cursor: pointer;\n    user-select: none;\n    :focus {\n        outline: none;\n    }\n    color: #ffffff;\n    font-weight: 500;\n`;\n\nconst ErrorMessage = styled.span`\n    color: var(--error);\n    margin: 0 0.5rem 0 0.25rem;\n    font-size: 0.83rem;\n`;\n\nconst NetworkIcon = styled(Activity)`\n    margin-left: 0.25rem;\n    margin-right: 0.5rem;\n    width: 16px;\n    height: 16px;\n`;\n\nconst SpinnerWrapper = styled(Spinner)`\n    margin: 0 0.25rem 0 0.25rem;\n`;\n\nconst Wallet = observer(() => {\n    const {\n        root: { dropdownStore, transactionStore, providerStore },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n    const activeChainId = providerStore.providerStatus.activeChainId;\n    const active = providerStore.providerStatus.active;\n    const error = providerStore.providerStatus.error;\n    const injectedActive = providerStore.providerStatus.injectedActive;\n    const injectedLoaded = providerStore.providerStatus.injectedLoaded;\n\n    if (!activeChainId && active) {\n        throw new Error(`No chain ID specified ${activeChainId}`);\n    }\n\n    let hasPendingTransactions = transactionStore.hasPendingTransactions(\n        account\n    );\n\n    const toggleWalletDropdown = async () => {\n        dropdownStore.toggleWalletDropdown();\n    };\n\n    // handle the logo we want to show with the account\n    function getStatusIcon(account) {\n        if (injectedActive) {\n            return <Identicon address={account} />;\n        }\n    }\n\n    function getWalletDetails() {\n        // Wrong network\n        if (injectedLoaded && !injectedActive) {\n            return (\n                <Error onClick={toggleWalletDropdown}>\n                    <WarningIcon src=\"ErrorSign.svg\" />\n                    <ErrorMessage>Wrong Network</ErrorMessage>\n                </Error>\n            );\n        } else if (account) {\n            return (\n                <WalletButton onClick={toggleWalletDropdown}>\n                    {hasPendingTransactions && (\n                        <SpinnerWrapper src={Circle} alt=\"loader\" />\n                    )}\n                    {getStatusIcon(account)}\n                    <Address>{shortenAddress(account)}</Address>\n                    {dropdownStore.walletDropdownVisible ? (\n                        <img src={Dropup} alt=\"v\" />\n                    ) : (\n                        <img src={Dropdown} alt=\"^\" />\n                    )}\n                </WalletButton>\n            );\n        } else if (error) {\n            return (\n                <Error onClick={toggleWalletDropdown}>\n                    <NetworkIcon />\n                    <ErrorMessage>Error</ErrorMessage>\n                </Error>\n            );\n        } else {\n            return (\n                <Button\n                    text=\"Connect Wallet\"\n                    onClick={toggleWalletDropdown}\n                    isPrimary={true}\n                />\n            );\n        }\n    }\n\n    return (\n        <>\n            {getWalletDetails()}\n            <WalletDropdown />\n        </>\n    );\n});\n\nexport default Wallet;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Wallet from '../Wallet';\nimport { Link } from 'react-router-dom';\n\nconst HeaderFrame = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    background-color: var(--panel-background);\n    border-bottom: 1px solid var(--panel-border);\n`;\n\nconst HeaderElement = styled.div`\n    margin: 19px 30px;\n    display: flex;\n    min-width: 0;\n    display: flex;\n    align-items: center;\n`;\n\nconst AppName = styled.div`\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 18px;\n    letter-spacing: 1px;\n    color: var(--app-header-text);\n    margin-left: 12px;\n`;\n\nconst StyledLink = styled(Link)`\n    display: flex;\n    text-decoration: none;\n    align-items: center;\n    cursor: pointer;\n    height: 32px;\n    img {\n        font-size: 15px;\n        font-weight: 500;\n        height: 32px;\n        width: 32px;\n    }\n`;\n\nconst Header = () => {\n    return (\n        <HeaderFrame>\n            <HeaderElement>\n                <StyledLink to={`/`}>\n                    <img alt=\"pebbles\" src=\"pebbles-pad.svg\" />\n                    <AppName>Balancer</AppName>\n                </StyledLink>\n            </HeaderElement>\n            <HeaderElement>\n                <Wallet />\n            </HeaderElement>\n        </HeaderFrame>\n    );\n};\n\nexport default Header;\n","import { Pool } from '../types';\nimport { ContractMetadata } from '../stores/ContractMetadata';\n\nexport const formatPoolAssetChartData = (\n    pool: Pool,\n    contractMetadata: ContractMetadata\n) => {\n    const data = getPoolTokenWeights(pool);\n    return {\n        datasets: [\n            {\n                data: data,\n                borderAlign: 'center',\n                backgroundColor: getPoolTokenColors(pool, contractMetadata),\n                borderColor: '#282932',\n                borderWidth: '1',\n            },\n        ],\n    };\n};\n\nconst getPoolTokenColors = (\n    pool: Pool,\n    contractMetadata: ContractMetadata\n): string[] => {\n    return pool.tokens.map(token => {\n        const metadata = contractMetadata.tokens.find(metadata => {\n            return metadata.address === token.address;\n        });\n        return metadata.chartColor;\n    });\n};\n\nconst getPoolTokenWeights = (pool: Pool): number[] => {\n    return pool.tokens.map(token => {\n        return token.denormWeightProportion.times(100).toNumber();\n    });\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Pie } from 'react-chartjs-2';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom';\nimport { useStores } from '../../contexts/storesContext';\nimport { Pool } from '../../types';\nimport {\n    formatCurrency,\n    formatPercentage,\n    shortenAddress,\n    formatFee,\n} from '../../utils/helpers';\nimport { formatPoolAssetChartData } from '../../utils/chartFormatter';\n\nconst Wrapper = styled.div`\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    background: var(--panel-background);\n`;\n\nconst HeaderRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--body-text);\n    border-bottom: 1px solid var(--panel-border);\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst PoolLink = styled(Link)`\n    text-decoration: none;\n`;\n\nconst PoolRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--panel-row-text);\n    text-align: left;\n    border-bottom: 1px solid var(--panel-border);\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n\n    @media screen and (max-width: 1024px) {\n        padding: 20px 5px 20px 5px;\n    }\n\n    &:hover {\n        background: var(--panel-border);\n    }\n`;\n\nconst TableCell = styled.div`\n    display: flex;\n    align-items: center;\n    width: ${props => props.width || '12%'};\n    @media screen and (max-width: 1024px) {\n        width: 30%;\n    }\n`;\n\nconst TableCellHideMobile = styled(TableCell)`\n    @media screen and (max-width: 1024px) {\n        display: none;\n        width: 0%;\n    }\n`;\n\nconst AssetCell = styled(TableCell)`\n    width: 46%;\n\n    @media screen and (max-width: 1024px) {\n        width: 65%;\n    }\n`;\n\nconst TableCellRight = styled(TableCell)`\n    justify-content: flex-end;\n    @media screen and (max-width: 1024px) {\n        width: 33%;\n    }\n`;\n\nconst TableCellRightHideMobile = styled(TableCellRight)`\n    @media screen and (max-width: 1024px) {\n        display: none;\n        width: 0%;\n    }\n`;\n\nconst IdenticonText = styled.div`\n    margin-left: 10px;\n    a {\n        text-decoration: none;\n        color: inherit;\n    }\n`;\n\nconst PieChartWrapper = styled.div`\n    width: 40px;\n    height: 40px;\n`;\n\nconst BreakdownContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    margin-left: 8px;\n`;\n\nconst AssetPercentageContainer = styled.div`\n    display: flex;\n    align-items: center;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 18px;\n    margin-left: 12px;\n`;\n\nconst AssetPercentageText = styled.div`\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 18px;\n    color: var(--panel-row-text);\n    margin-left: 6px;\n`;\n\nconst AssetDot = styled.div`\n    height: 4px;\n    width: 4px;\n    border-radius: 6px;\n    background: ${props => props.dotColor};\n`;\n\ninterface Props {\n    pools: Pool[];\n    dataSource: LiquidityPanelDataSource;\n}\n\nexport enum LiquidityPanelDataSource {\n    ACCOUNT,\n    ALL,\n}\n\nenum Messages {\n    noAccount = 'Connect wallet to see your liquidity',\n    noAccountPools = 'This account has no public liquidity contributions',\n}\n\nconst LiquidityPanel = observer((props: Props) => {\n    const {\n        root: { poolStore, providerStore, marketStore, contractMetadataStore },\n    } = useStores();\n    const { pools, dataSource } = props;\n    const account = providerStore.providerStatus.account;\n\n    const options = {\n        animation: {\n            duration: 0,\n        },\n        maintainAspectRatio: false,\n        legend: {\n            display: false,\n        },\n        tooltips: {\n            enabled: false,\n        },\n    };\n\n    const renderAssetPercentages = (pool: Pool) => {\n        const sortedTokens = pool.tokens\n            .slice()\n            .sort(\n                (a, b) =>\n                    Number(b.denormWeightProportion) -\n                    Number(a.denormWeightProportion)\n            );\n        return (\n            <React.Fragment>\n                {sortedTokens.map((token, index) => {\n                    const tokenMetadata = contractMetadataStore.getTokenMetadata(\n                        token.address\n                    );\n                    return (\n                        <AssetPercentageContainer key={index}>\n                            <AssetDot\n                                dotColor={contractMetadataStore.getTokenColor(\n                                    token.address\n                                )}\n                            />\n                            <AssetPercentageText>\n                                {formatPercentage(\n                                    token.denormWeightProportion,\n                                    2\n                                )}{' '}\n                                {tokenMetadata.symbol}\n                            </AssetPercentageText>\n                        </AssetPercentageContainer>\n                    );\n                })}\n            </React.Fragment>\n        );\n    };\n\n    const renderPoolsChart = () => {\n        if (marketStore.assetPricesLoaded) {\n            let poolsShown = pools.sort((a, b) => {\n                return (\n                    Number(marketStore.getPortfolioValue(b)) -\n                    Number(marketStore.getPortfolioValue(a))\n                );\n            });\n\n            return (\n                <React.Fragment>\n                    {poolsShown.map(pool => {\n                        let liquidityText = '-';\n                        let userLiquidityText = '-';\n                        let volumeText = '-';\n\n                        const poolLiquidity = marketStore.getPortfolioValue(\n                            pool\n                        );\n                        liquidityText = formatCurrency(poolLiquidity);\n\n                        if (account) {\n                            const userLiquidity = poolStore.calcUserLiquidity(\n                                pool.address,\n                                account\n                            );\n\n                            if (userLiquidity) {\n                                userLiquidityText = formatCurrency(\n                                    userLiquidity\n                                );\n                            }\n                        }\n\n                        // const volume = marketStore.getPoolVolume(pool);\n\n                        volumeText = formatCurrency(pool.lastSwapVolume);\n\n                        return (\n                            <PoolLink\n                                key={pool.address}\n                                to={`/pool/${pool.address}`}\n                            >\n                                <PoolRow>\n                                    <TableCellHideMobile>\n                                        <IdenticonText>\n                                            {shortenAddress(pool.address)}\n                                        </IdenticonText>\n                                    </TableCellHideMobile>\n                                    <AssetCell>\n                                        <PieChartWrapper>\n                                            <Pie\n                                                type={'doughnut'}\n                                                data={formatPoolAssetChartData(\n                                                    pool,\n                                                    contractMetadataStore.contractMetadata\n                                                )}\n                                                options={options}\n                                            />\n                                        </PieChartWrapper>\n                                        <BreakdownContainer>\n                                            {renderAssetPercentages(pool)}\n                                        </BreakdownContainer>\n                                    </AssetCell>\n                                    <TableCellHideMobile>\n                                        {formatFee(pool.swapFee)}\n                                    </TableCellHideMobile>\n                                    <TableCellRight>{`$ ${liquidityText}`}</TableCellRight>\n                                    <TableCellRightHideMobile>{`$ ${userLiquidityText}`}</TableCellRightHideMobile>\n                                    <TableCellRightHideMobile>{`$ ${volumeText}`}</TableCellRightHideMobile>\n                                </PoolRow>\n                            </PoolLink>\n                        );\n                    })}\n                </React.Fragment>\n            );\n        }\n    };\n\n    const renderPools = () => {\n        // Has all token data been loaded\n        if (pools.length > 0) {\n            return renderPoolsChart();\n        }\n        if (dataSource === LiquidityPanelDataSource.ALL) {\n            return <PoolRow>Loading</PoolRow>;\n        }\n        if (!account) {\n            return <PoolRow>{Messages.noAccount}</PoolRow>;\n        }\n        return <PoolRow>{Messages.noAccountPools}</PoolRow>;\n    };\n\n    return (\n        <Wrapper>\n            <HeaderRow>\n                <TableCellHideMobile>Pool Address</TableCellHideMobile>\n                <AssetCell>Assets</AssetCell>\n                <TableCellHideMobile>Swap Fee</TableCellHideMobile>\n                <TableCellRight>Liquidity</TableCellRight>\n                <TableCellRightHideMobile>\n                    My Liquidity\n                </TableCellRightHideMobile>\n                <TableCellRightHideMobile>\n                    Trade Vol. (24h)\n                </TableCellRightHideMobile>\n            </HeaderRow>\n            {renderPools()}\n        </Wrapper>\n    );\n});\n\nexport default LiquidityPanel;\n","import React from 'react';\nimport styled from 'styled-components';\nimport LiquidityPanel, { LiquidityPanelDataSource } from './LiquidityPanel';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom';\nimport { useStores } from '../../contexts/storesContext';\nimport Button from '../Common/Button';\n\nconst Wrapper = styled.div`\n    padding: 8px 0;\n`;\n\nconst HeaderWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n`;\n\nconst Header = styled.div`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    line-height: 19px;\n    color: var(--header-text);\n    padding: 0px 0px 24px 0px;\n`;\n\nconst CreateLink = styled(Link)`\n    text-decoration: none;\n`;\n\nconst MyLiquidity = observer(() => {\n    const {\n        root: { poolStore, providerStore },\n    } = useStores();\n    const account = providerStore.providerStatus.account;\n\n    const contributedPools = poolStore.getContributedPools();\n    const pools = contributedPools.filter(pool => {\n        const userShare = poolStore.getUserShareProportion(\n            pool.address,\n            account\n        );\n\n        return userShare && userShare.gt(0);\n    });\n\n    return (\n        <Wrapper>\n            <HeaderWrapper>\n                <Header>My Liquidity</Header>\n                <CreateLink to={'/pool/new'}>\n                    <Button\n                        text={'Create Pool'}\n                        isActive={!!account}\n                        isPrimary={true}\n                        onClick={e => {}}\n                    />\n                </CreateLink>\n            </HeaderWrapper>\n            <LiquidityPanel\n                pools={pools}\n                dataSource={LiquidityPanelDataSource.ACCOUNT}\n            />\n        </Wrapper>\n    );\n});\n\nexport default MyLiquidity;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useStores } from '../../contexts/storesContext';\nimport { toWei, formatBalance } from '../../utils/helpers';\nimport { ContractTypes } from '../../stores/Provider';\nimport Button from './Button';\nimport { ethers } from 'ethers';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    border-bottom: 1px solid var(--panel-border);\n    padding-bottom: 20px;\n`;\n\nconst ButtonContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst WrapHeader = styled.div`\n    align-items: left;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 18px;\n    padding-left: 30px;\n    padding-top: 14px;\n    color: var(--token-balance-text);\n    text-transform: uppercase;\n`;\n\nconst Advice = styled.div`\n    align-items: left;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 10px;\n    line-height: 18px;\n    padding-left: 16px;\n    padding-top: 5px;\n    color: var(--token-balance-text);\n`;\n\n// padding and width\nconst EthInputWrapper = styled.div`\n    width: 120px;\n    height: 38px;\n    padding: 0px 5px;\n    font-style: normal;\n    font-weight: 500;\n    display: flex;\n    flex-direction: row;\n    justify-content: end;\n    align-items: center;\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    input {\n        width: 85px;\n        text-align: right;\n        color: var(--input-text);\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 16px;\n        letter-spacing: 0.2px;\n        padding-left: 5px;\n        background-color: var(--panel-background);\n        border: none;\n        box-shadow: inset 0 0 0 1px var(--panel-background),\n            inset 0 0 0 70px var(--panel-background);\n        :-webkit-autofill,\n        :-webkit-autofill:hover,\n        :-webkit-autofill:focus,\n        :-webkit-autofill:active,\n        :-internal-autofill-selected {\n            -webkit-text-fill-color: var(--body-text);\n        }\n        ::placeholder {\n            color: var(--input-placeholder-text);\n        }\n        :focus {\n            outline: none;\n        }\n    }\n    border: ${props => (props.errorBorders ? '1px solid var(--error)' : '')};\n    margin-left: ${props => (props.errorBorders ? '-1px' : '0px')}\n    margin-right: ${props => (props.errorBorders ? '-1px' : '0px')}\n    :hover {\n        background-color: var(--input-hover-background);\n        border: ${props =>\n            props.errorBorders\n                ? '1px solid var(--error)'\n                : '1px solid var(--input-hover-border);'};\n        input {\n            background-color: var(--input-hover-background);\n            box-shadow: inset 0 0 0 1px var(--input-hover-background),\n                inset 0 0 0 70px var(--input-hover-background);\n            ::placeholder {\n                color: var(--input-hover-placeholder-text);\n                background-color: var(--input-hover-background);\n            }\n        }\n    }\n`;\n\nconst WethInputWrapper = styled(EthInputWrapper)`\n    justify-content: space-between;\n`;\n\nconst WrapElement = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    color: var(--highlighted-selector-text);\n    padding: 0px 16px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 22px;\n    margin-top: 2px;\n`;\n\nconst MaxLink = styled.div`\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 16px;\n    display: flex;\n    text-decoration-line: underline;\n    color: var(--link-text);\n    cursor: pointer;\n`;\n\nenum ButtonAction {\n    WRAP,\n    UNWRAP,\n}\n\nconst WrapEth = () => {\n    const [ethAmount, setEthAmount] = useState('');\n    const [wethAmount, setWethAmount] = useState('');\n\n    const {\n        root: { providerStore, contractMetadataStore, tokenStore },\n    } = useStores();\n\n    const wethAddress = contractMetadataStore.getWethAddress();\n\n    const handleMaxLinkClick = async () => {\n        const account = providerStore.providerStatus.account;\n        let maxValue = '0.00';\n\n        if (account) {\n            const balance = tokenStore.getBalance(wethAddress, account);\n\n            maxValue = formatBalance(balance, 18, 20);\n        }\n\n        setWethAmount(maxValue);\n        return maxValue;\n    };\n\n    const actionButtonHandler = async (action: ButtonAction) => {\n        if (action === ButtonAction.WRAP) {\n            let overrides = {\n                value: ethers.utils.parseEther(ethAmount),\n            };\n\n            await providerStore.sendTransaction(\n                ContractTypes.Weth,\n                contractMetadataStore.getWethAddress(),\n                'deposit',\n                [],\n                overrides\n            );\n        } else if (action === ButtonAction.UNWRAP) {\n            let amountToUnwrap = toWei(wethAmount);\n\n            await providerStore.sendTransaction(\n                ContractTypes.Weth,\n                contractMetadataStore.getWethAddress(),\n                'withdraw',\n                [amountToUnwrap.toString()]\n            );\n        }\n    };\n\n    return (\n        <Container>\n            <WrapHeader>Eth</WrapHeader>\n            <WrapElement>\n                <EthInputWrapper errorBorders={false}>\n                    <input\n                        name={`input-name-wrap`}\n                        value={ethAmount}\n                        onChange={e => setEthAmount(e.target.value)}\n                        // ref={textInput}\n                        placeholder=\"\"\n                    />\n                </EthInputWrapper>\n\n                <ButtonContainer>\n                    <Button\n                        text={'Wrap'}\n                        isSmall={true}\n                        onClick={e => actionButtonHandler(ButtonAction.WRAP)}\n                    />\n                </ButtonContainer>\n            </WrapElement>\n            <Advice>Keep some ETH unwrapped for transaction fees</Advice>\n\n            <WrapHeader>WETH</WrapHeader>\n            <WrapElement>\n                <WethInputWrapper errorBorders={false}>\n                    <MaxLink\n                        onClick={() => {\n                            handleMaxLinkClick();\n                        }}\n                    >\n                        Max\n                    </MaxLink>\n\n                    <input\n                        name={`input-name-wrap`}\n                        value={wethAmount}\n                        onChange={e => setWethAmount(e.target.value)}\n                        // ref={textInput}\n                        placeholder=\"\"\n                    />\n                </WethInputWrapper>\n                <ButtonContainer>\n                    <Button\n                        text={'Unwrap'}\n                        isSmall={true}\n                        onClick={e => actionButtonHandler(ButtonAction.UNWRAP)}\n                    />\n                </ButtonContainer>\n            </WrapElement>\n        </Container>\n    );\n};\n\nexport default WrapEth;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { formatBalanceTruncated, isAddress, bnum } from '../../utils/helpers';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport WrapEth from './WrapEth';\n\nconst Wrapper = styled.div``;\n\nconst BuildVersion = styled.div`\n    display: flex;\n    flex-direction: row;\n    text-align: center;\n    margin: 20px;\n    font-size: 10px;\n    color: var(--body-text);\n    position: fixed;\n    bottom: 0px;\n`;\n\nconst BuildLink = styled.a`\n    font-size: 10px;\n    color: var(--body-text);\n    text-decoration: none;\n    margin-left: 5px;\n`;\n\nconst BalanceHeader = styled.div`\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 18px;\n    padding-left: 30px;\n    padding-top: 24px;\n    color: var(--token-balance-text);\n    text-transform: uppercase;\n`;\n\nconst BalanceElement = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    color: var(--highlighted-selector-text);\n    padding: 0px 30px 0px 30px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 22px;\n    margin-top: 20px;\n`;\n\nconst IconAndNameContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\n\nconst NotSupported = require('../../assets/images/question.svg') as string;\n\nexport const TokenIconAddress = (address, isSupported) => {\n    if (!isSupported || address === 'unknown') {\n        return NotSupported;\n    }\n    if (address === 'ether') {\n        return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png`;\n    } else {\n        return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${isAddress(\n            address\n        )}/logo.png`;\n    }\n};\n\nconst TokenIcon = styled.img`\n    width: 20px;\n    height: 20px;\n    margin-right: 13px;\n`;\n\nconst TokenName = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst TokenBalance = styled.div`\n    display: flex;\n    align-items: center;\n    text-align: center;\n`;\n\nconst WalletBalances = observer(() => {\n    const {\n        root: { tokenStore, contractMetadataStore, providerStore },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n\n    const buildId = process.env.REACT_APP_COMMIT_REF || '';\n\n    const renderWalletBalances = () => {\n        const whitelistedTokens = contractMetadataStore.getWhitelistedTokenMetadata();\n\n        //Are all balances initially loaded?\n\n        //Load and cache icons upon start - they must be loaded too\n\n        //If not, display loading\n        return (\n            <React.Fragment>\n                {whitelistedTokens.map(token => {\n                    let balanceToDisplay: string;\n                    if (account) {\n                        const userBalance = tokenStore.getBalance(\n                            token.address,\n                            account\n                        );\n                        if (userBalance && userBalance.isGreaterThan(bnum(0))) {\n                            balanceToDisplay = formatBalanceTruncated(\n                                userBalance,\n                                token.decimals,\n                                4,\n                                20\n                            );\n                        }\n                    }\n\n                    let returnBalance;\n\n                    if (account && balanceToDisplay) {\n                        returnBalance = renderBalance(\n                            token.iconAddress,\n                            token.symbol,\n                            token.isSupported,\n                            balanceToDisplay\n                        );\n                    }\n\n                    return returnBalance;\n                })}\n            </React.Fragment>\n        );\n    };\n\n    const renderBalance = (\n        iconUrl: string,\n        tokenName: string,\n        isSupported: boolean,\n        tokenBalance: string\n    ) => {\n        return (\n            <BalanceElement key={tokenName}>\n                <IconAndNameContainer>\n                    <TokenIcon src={TokenIconAddress(iconUrl, isSupported)} />\n                    <TokenName>{tokenName}</TokenName>\n                </IconAndNameContainer>\n                <TokenBalance>{tokenBalance}</TokenBalance>\n            </BalanceElement>\n        );\n    };\n\n    return (\n        <Wrapper>\n            <WrapEth />\n            <BalanceHeader>My Wallet</BalanceHeader>\n            {account ? (\n                renderWalletBalances()\n            ) : (\n                <BalanceElement>Connect wallet to see balances</BalanceElement>\n            )}\n            <BuildVersion>\n                BUILD ID:{' '}\n                <BuildLink\n                    href={`https://github.com/balancer-labs/pool-management/tree/${buildId}`}\n                    target=\"_blank\"\n                >\n                    {buildId.substring(0, 12)}\n                </BuildLink>\n            </BuildVersion>\n        </Wrapper>\n    );\n});\n\nexport default WalletBalances;\n","import React, { useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport styled from 'styled-components';\nimport { useStores } from '../../contexts/storesContext';\nimport { TokenIconAddress } from '../Common/WalletBalances';\nimport {\n    bnum,\n    formatBalanceTruncated,\n    isEmpty,\n    isAddress,\n    toChecksum,\n} from 'utils/helpers';\nimport { isChainIdSupported } from '../../provider/connectors';\nimport { EtherKey } from '../../stores/Token';\nimport { observer } from 'mobx-react';\n\nconst AssetPanelContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    max-height: 329px;\n    overflow: auto; /* Enable scroll if needed */\n    ::-webkit-scrollbar {\n        display: none;\n    }\n`;\n\nconst AssetPanel = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 184px;\n    height: 98px;\n    cursor: pointer;\n    border-right: 1px solid var(--panel-border);\n    border-bottom: 1px solid var(--panel-border);\n    :nth-child(3n + 3) {\n        border-right: none;\n    }\n`;\n\nconst AssetWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    font-style: normal;\n    font-weight: normal;\n`;\n\nconst TokenIcon = styled.img`\n    width: 28px;\n    height: 28px;\n    margin-right: 12px;\n`;\n\nconst TokenName = styled.div`\n    font-size: 16px;\n    line-height: 19px;\n    display: flex;\n    align-items: center;\n`;\n\nconst TokenBalance = styled.div`\n    font-size: 14px;\n    line-height: 16px;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    color: var(--body-text);\n    margin-top: 12px;\n`;\n\nconst ErrorLabel = styled.div`\n    margin-left: 4px;\n    color: var(--error);\n`;\n\ninterface Asset {\n    address: string;\n    iconAddress: string;\n    symbol: string;\n    isSupported: boolean;\n    userBalance: string;\n}\n\nconst AssetOptions = observer((props: RouteComponentProps) => {\n    const {\n        root: { providerStore, proxyStore, contractMetadataStore, tokenStore },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n    const chainId = providerStore.providerStatus.activeChainId;\n\n    const tokens = props.selectedAssets;\n    const assetModalInput = props.search;\n    const proxyAddress = proxyStore.getInstanceAddress();\n\n    useEffect(() => {\n        async function fetchToken() {\n            const address = toChecksum(assetModalInput);\n            if (!contractMetadataStore.hasTokenMetadata(address)) {\n                const tokenMetadata = await contractMetadataStore.fetchTokenMetadata(\n                    address,\n                    account\n                );\n                if (!tokenMetadata) {\n                    return;\n                }\n                contractMetadataStore.addTokenMetadata(address, tokenMetadata);\n                tokenStore.fetchAccountApprovals(\n                    [address],\n                    account,\n                    proxyAddress\n                );\n                tokenStore.fetchTokenBalances(account, [address]);\n            }\n        }\n\n        if (!isEmpty(assetModalInput) && isAddress(assetModalInput)) {\n            fetchToken();\n        }\n    }, [\n        assetModalInput,\n        account,\n        proxyAddress,\n        contractMetadataStore,\n        tokenStore,\n    ]);\n\n    const isInvalidToken = (address): boolean => {\n        const errors = contractMetadataStore.getTokenErrors();\n        const noBool = errors.noBool.includes(address);\n        const transferFee = errors.transferFee.includes(address);\n        return noBool || transferFee;\n    };\n\n    const getAssetOptions = (filter, account): Asset[] => {\n        const filteredWhitelistedTokenMetadata = contractMetadataStore\n            .getFilteredTokenMetadata(filter)\n            .filter(token => {\n                const isEther = token.address === EtherKey;\n                const isSupported =\n                    token.isSupported ||\n                    token.address.toLowerCase() === filter.toLowerCase();\n                const alreadySelected = tokens.includes(token.address);\n                return !isEther && isSupported && !alreadySelected;\n            });\n\n        const filteredWhitelistedTokens = filteredWhitelistedTokenMetadata.map(\n            tokenMetadata => tokenMetadata.address\n        );\n\n        let assetSelectorData: Asset[] = [];\n        let userBalances = {};\n\n        if (account && isChainIdSupported(chainId)) {\n            userBalances = tokenStore.getAccountBalances(\n                filteredWhitelistedTokens,\n                account\n            );\n        }\n\n        assetSelectorData = filteredWhitelistedTokenMetadata.map(value => {\n            const userBalance = formatBalanceTruncated(\n                userBalances[value.address]\n                    ? bnum(userBalances[value.address])\n                    : bnum(0),\n                value.decimals,\n                value.precision,\n                20\n            );\n\n            return {\n                address: value.address,\n                iconAddress: value.iconAddress,\n                symbol: value.symbol,\n                isSupported: value.isSupported,\n                userBalance: userBalance,\n            };\n        });\n\n        return assetSelectorData;\n    };\n\n    const sortAssetOptions = (assets: Asset[], account) => {\n        const buckets = {\n            withBalance: [] as Asset[],\n            withoutBalance: [] as Asset[],\n        };\n        assets.forEach(asset => {\n            const hasBalance = account && bnum(asset.userBalance).gt(0);\n\n            if (hasBalance) {\n                buckets.withBalance.push(asset);\n            } else {\n                buckets.withoutBalance.push(asset);\n            }\n        });\n\n        // We don't introduce a possibility of duplicates and therefore don't need to use Set\n        return [...buckets.withBalance, ...buckets.withoutBalance];\n    };\n\n    const assets = sortAssetOptions(\n        getAssetOptions(assetModalInput, account),\n        account\n    );\n\n    const selectAsset = address => {\n        if (isInvalidToken(address)) {\n            return;\n        }\n        props.onSelectAsset(address);\n    };\n\n    return (\n        <AssetPanelContainer>\n            {assets.map(token => (\n                <AssetPanel\n                    onClick={() => {\n                        selectAsset(token.address);\n                    }}\n                    key={token.address}\n                >\n                    <AssetWrapper>\n                        <TokenIcon\n                            src={TokenIconAddress(\n                                token.iconAddress,\n                                token.isSupported\n                            )}\n                        />\n                        <TokenName>{token.symbol}</TokenName>\n                    </AssetWrapper>\n                    <TokenBalance>\n                        {token.userBalance} {token.symbol}\n                        {isInvalidToken(token.address) ? (\n                            <ErrorLabel>Bad ERC20</ErrorLabel>\n                        ) : (\n                            <div />\n                        )}\n                    </TokenBalance>\n                </AssetPanel>\n            ))}\n        </AssetPanelContainer>\n    );\n});\n\nexport default AssetOptions;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport styled from 'styled-components';\nimport AssetOptions from './AssetOptions';\nimport { observer } from 'mobx-react';\n\nconst Container = styled.div`\n    display: block;\n    position: fixed;\n    z-index: 5;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0, 0, 0);\n    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n`;\n\nconst ModalContent = styled.div`\n    margin: 15% auto;\n    display: flex;\n    flex-direction: column;\n    max-width: 554px;\n    max-height: 449px;\n    background-color: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    color: white;\n`;\n\nconst AssetSelectorHeader = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 68px;\n    padding: 0px 20px;\n    background-color: var(--panel-header-background);\n    color: var(--header-text);\n    border-radius: 4px;\n    border-bottom: 1px solid var(--panel-border);\n`;\n\nconst HeaderContent = styled.div``;\n\nconst ExitComponent = styled.div`\n    color: var(--exit-modal-color);\n    transform: rotate(135deg);\n    font-size: 22px;\n    cursor: pointer;\n`;\n\nconst InputContainer = styled.div`\n    display: flex;\n    align-items: center;\n    height: 60px;\n    padding: 0px 20px;\n    justify-content: space-between;\n    color: var(--body-text);\n    padding-left: 21px;\n    padding-right: 21px;\n    border-bottom: 1px solid var(--panel-border);\n    input {\n        width: 75%;\n        color: var(--body-text);\n        font-size: 16px;\n        line-height: 19px;\n        background-color: var(--panel-background);\n        border: none;\n        box-shadow: inset 0 0 0 1px var(--panel-background),\n            inset 0 0 0 100px var(--panel-background);\n        :-webkit-autofill,\n        :-webkit-autofill:hover,\n        :-webkit-autofill:focus,\n        :-webkit-autofill:active,\n        :-internal-autofill-selected {\n            -webkit-text-fill-color: var(--body-text);\n        }\n        :focus {\n            outline: none;\n        }\n    }\n`;\n\nfunction useOnClickOutside(ref, handler) {\n    useEffect(() => {\n        const handleClick = event => {\n            // Do nothing if clicking ref's element or descendent elements\n            if (!ref.current || ref.current.contains(event.target)) {\n                return;\n            }\n\n            handler(event);\n        };\n\n        const handleKeyUp = event => {\n            if (event.key !== 'Escape') {\n                return;\n            }\n            handler(event);\n        };\n\n        document.addEventListener('mousedown', handleClick);\n        window.addEventListener('keydown', handleKeyUp, false);\n        document.addEventListener('touchstart', handleClick);\n\n        return () => {\n            document.removeEventListener('mousedown', handleClick);\n            window.removeEventListener('keydown', handleKeyUp, false);\n            document.removeEventListener('touchstart', handleClick);\n        };\n    }, [ref, handler]);\n}\n\nconst SelectAssetModal = observer((props: RouteComponentProps) => {\n    const ref = useRef();\n    const [search, setSearch] = useState('');\n\n    useOnClickOutside(ref, () => {\n        props.onClose();\n        setSearch('');\n    });\n\n    const onChange = async event => {\n        const { value } = event.target;\n        setSearch(value);\n    };\n\n    const selectAsset = async asset => {\n        props.onSelectAsset(asset);\n        props.onClose();\n        setSearch('');\n    };\n\n    return (\n        <Container style={{ display: props.open ? 'block' : 'none' }}>\n            <ModalContent ref={ref}>\n                <AssetSelectorHeader>\n                    <HeaderContent>Select Token</HeaderContent>\n                    <ExitComponent onClick={() => props.onClose()}>\n                        +\n                    </ExitComponent>\n                </AssetSelectorHeader>\n                <InputContainer>\n                    <input\n                        ref={input => input && input.focus()}\n                        value={search}\n                        onChange={e => onChange(e)}\n                        placeholder=\"Search Token Name, Symbol, or Address\"\n                    />\n                </InputContainer>\n                <AssetOptions\n                    onSelectAsset={selectAsset}\n                    selectedAssets={props.selectedAssets}\n                    search={search}\n                />\n            </ModalContent>\n        </Container>\n    );\n});\n\nexport default SelectAssetModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport SelectAssetModal from './SelectAssetModal';\nimport { useStores } from '../../contexts/storesContext';\nimport { toAddressStub } from '../../utils/helpers';\nimport { observer } from 'mobx-react';\n\nconst Topic = styled.a`\n    background-color: var(--panel-border);\n    cursor: pointer;\n    font-size: 13px;\n    color: #fff;\n    border: 0;\n    display: inline-block;\n    border-radius: 14px;\n    padding: 0 10px;\n    line-height: 28px;\n    margin-left: 8px;\n`;\n\nconst TopicAction = styled.span`\n    position: relative;\n    background-color: var(--panel-border);\n    padding-right: 30px !important;\n    font-size: 13px;\n    color: #fff;\n    border: 0;\n    display: inline-block;\n    border-radius: 14px;\n    padding: 0 10px;\n    line-height: 28px;\n    margin-left: 8px;\n`;\n\nconst TopicDelete = styled.a`\n    cursor: pointer;\n    display: inline-block;\n    border-radius: 14px;\n    padding: 0 10px;\n    line-height: 28px;\n    padding: 0 6px;\n    line-height: 28px;\n    position: absolute\n    right: 0\n    width: 16px;\n    text-align: center;\n    :hover {\n        background-color: var(--highlighted-selector-border);\n    }\n`;\n\nconst Filters = observer(() => {\n    const {\n        root: { contractMetadataStore, poolStore },\n    } = useStores();\n    const [modalOpen, setModalOpen] = useState(false);\n    const [selectedAssets, setSelectedAssets] = useState(\n        poolStore.selectedAssets || []\n    );\n\n    const handleAddTokenClick = () => {\n        setModalOpen(true);\n    };\n\n    const handleSelectAsset = asset => {\n        if (!selectedAssets.includes(asset)) {\n            const assets = [...selectedAssets, asset];\n            setSelectedAssets(assets);\n            poolStore.setSelectedAssets(assets);\n        }\n        setModalOpen(false);\n    };\n\n    const handleCloseModal = () => {\n        setModalOpen(false);\n    };\n\n    const removeAsset = i => {\n        let assets = selectedAssets;\n        delete assets[i];\n        assets = assets.filter(String);\n        setSelectedAssets(assets);\n        poolStore.setSelectedAssets(assets);\n    };\n\n    const getAssetName = asset => {\n        return (\n            contractMetadataStore.addressToSymbolMap[asset] ||\n            toAddressStub(asset)\n        );\n    };\n\n    return (\n        <div>\n            Filter token(s)\n            {selectedAssets.map((asset, i) => (\n                <TopicAction key={asset}>\n                    {getAssetName(asset)}\n                    <TopicDelete onClick={() => removeAsset(i)}>x</TopicDelete>\n                </TopicAction>\n            ))}\n            <Topic onClick={e => handleAddTokenClick()}>+</Topic>\n            <SelectAssetModal\n                open={modalOpen}\n                onSelectAsset={handleSelectAsset}\n                onClose={handleCloseModal}\n                selectedAssets={selectedAssets}\n            />\n        </div>\n    );\n});\n\nexport default Filters;\n","import React from 'react';\nimport styled from 'styled-components';\nimport LiquidityPanel, { LiquidityPanelDataSource } from './LiquidityPanel';\nimport Button from '../Common/Button';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport { SUBGRAPH_SKIP_STEP } from '../../stores/Pool';\nimport Filters from '../Filters';\n\nconst Wrapper = styled.div`\n    padding: 8px 0;\n`;\n\nconst HeaderWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    color: var(--header-text);\n    align-items: baseline;\n`;\n\nconst Header = styled.div`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    line-height: 19px;\n    color: var(--header-text);\n    padding: 0px 0px 24px 0px;\n`;\n\nconst Pagination = styled.div`\n    margin-top: 16px;\n    display: flex;\n    align-items: center;\n`;\n\nconst Page = styled.div`\n    padding: 0 16px;\n    color: var(--highlighted-selector-text);\n    font-size: 14px;\n`;\n\nconst SharedPools = observer(() => {\n    const {\n        root: { poolStore },\n    } = useStores();\n\n    const pools = poolStore.getPublicPools();\n    const { graphSkip, pageLoading } = poolStore;\n    const page = graphSkip / SUBGRAPH_SKIP_STEP + 1;\n\n    const queryPreviousPage = () => {\n        poolStore.pagePools(false);\n    };\n\n    const queryNextPage = () => {\n        poolStore.pagePools(true);\n    };\n\n    return (\n        <Wrapper>\n            <HeaderWrapper>\n                <Header>Shared Pools</Header>\n                <Filters />\n            </HeaderWrapper>\n            <LiquidityPanel\n                pools={pools}\n                dataSource={LiquidityPanelDataSource.ALL}\n            />\n            <Pagination>\n                <Button\n                    text={'Previous Page'}\n                    isActive={!pageLoading && graphSkip !== 0}\n                    onClick={e => queryPreviousPage()}\n                />\n                <Page>Page {page}</Page>\n                <Button\n                    text={'Next Page'}\n                    isActive={!pageLoading}\n                    onClick={e => queryNextPage()}\n                />\n            </Pagination>\n        </Wrapper>\n    );\n});\n\nexport default SharedPools;\n","import React from 'react';\nimport styled from 'styled-components';\nimport MyLiquidity from '../components/Home/MyLiquidity';\nimport SharedPools from '../components/Home/SharedPools';\n\nconst HomeWrapper = styled.div`\n    position: relative;\n    padding: 32px 30px 0px 30px;\n\n    @media screen and (max-width: 1024px) {\n        padding: 32px 10px 0px 10px;\n    }\n`;\n\nconst Home = () => {\n    return (\n        <HomeWrapper>\n            <MyLiquidity />\n            <SharedPools />\n        </HomeWrapper>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport styled from 'styled-components';\nimport LiquidityPanel, { LiquidityPanelDataSource } from './LiquidityPanel';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\n\nconst Wrapper = styled.div`\n    padding-top: 8px;\n`;\n\nconst Header = styled.div`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    line-height: 19px;\n    color: var(--header-text);\n    padding: 0px 0px 24px 0px;\n`;\n\nconst PrivatePools = observer(() => {\n    const {\n        root: { poolStore },\n    } = useStores();\n\n    const pools = poolStore.getPrivatePools();\n\n    return (\n        <Wrapper>\n            <Header>Private Pools</Header>\n            <LiquidityPanel\n                pools={pools}\n                dataSource={LiquidityPanelDataSource.ALL}\n            />\n        </Wrapper>\n    );\n});\n\nexport default PrivatePools;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PrivatePools from '../components/Home/PrivatePools';\n\nconst PrivateWrapper = styled.div`\n    position: relative;\n    padding: 32px 30px 0px 30px;\n\n    @media screen and (max-width: 1024px) {\n        padding: 32px 10px 0px 10px;\n    }\n`;\n\nconst Private = () => {\n    return (\n        <PrivateWrapper>\n            <PrivatePools />\n        </PrivateWrapper>\n    );\n};\n\nexport default Private;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Pie } from 'react-chartjs-2';\nimport { observer } from 'mobx-react';\nimport { formatPercentage } from '../../utils/helpers';\nimport { formatPoolAssetChartData } from '../../utils/chartFormatter';\nimport { useStores } from '../../contexts/storesContext';\nimport { Pool } from '../../types';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding: 20px 10px 20px 20px;\n    background: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    width: 33%;\n    @media screen and (max-width: 1024px) {\n        width: 100%;\n    }\n    min-width: 246px;\n`;\n\nconst PieChartWrapper = styled.div`\n    width: 125px;\n    height: 125px;\n`;\n\nconst BreakdownContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    margin-left: 5px;\n`;\n\nconst AssetPercentageContainer = styled.div`\n    display: flex;\n    align-items: center;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 18px;\n    margin-left: 12px;\n    width: 86px;\n`;\n\nconst AssetPercentageText = styled.div`\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 18px;\n    color: var(--panel-row-text);\n    margin-left: 6px;\n`;\n\nconst AssetDot = styled.div`\n    height: 4px;\n    width: 4px;\n    border-radius: 6px;\n    background: ${props => props.dotColor};\n`;\n\ninterface Props {\n    poolAddress: string;\n}\n\nconst PoolAssetChartPanel = observer((props: Props) => {\n    const { poolAddress } = props;\n    const {\n        root: { poolStore, contractMetadataStore },\n    } = useStores();\n    const pool = poolStore.getPool(poolAddress);\n\n    const options = {\n        maintainAspectRatio: false,\n        legend: {\n            display: false,\n        },\n        tooltips: {\n            enabled: false,\n        },\n    };\n\n    const renderAssetPercentages = (pool: Pool) => {\n        return (\n            <React.Fragment>\n                {pool.tokens.map((token, index) => {\n                    const tokenMetadata = contractMetadataStore.getTokenMetadata(\n                        token.address\n                    );\n                    return (\n                        <AssetPercentageContainer key={token.address}>\n                            <AssetDot\n                                dotColor={contractMetadataStore.getTokenColor(\n                                    token.address\n                                )}\n                            />\n                            <AssetPercentageText>\n                                {formatPercentage(\n                                    token.denormWeightProportion,\n                                    2\n                                )}{' '}\n                                {tokenMetadata.symbol}\n                            </AssetPercentageText>\n                        </AssetPercentageContainer>\n                    );\n                })}\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <Wrapper>\n            <PieChartWrapper>\n                {pool ? (\n                    <Pie\n                        type={'doughnut'}\n                        data={formatPoolAssetChartData(\n                            pool,\n                            contractMetadataStore.contractMetadata\n                        )}\n                        options={options}\n                    />\n                ) : (\n                    <div></div>\n                )}\n            </PieChartWrapper>\n            <BreakdownContainer>\n                {pool ? renderAssetPercentages(pool) : <div></div>}\n            </BreakdownContainer>\n        </Wrapper>\n    );\n});\n\nexport default PoolAssetChartPanel;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Identicon from '../Common/Identicon';\nimport Button from '../Common/Button';\nimport { getEtherscanLink, shortenAddress } from 'utils/helpers';\nimport { useStores } from '../../contexts/storesContext';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding: 20px;\n    background: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    width: calc(67% - 99px);\n    @media screen and (max-width: 1024px) {\n        width: 100%;\n        margin: 20px 0 0 0;\n        flex-wrap: wrap;\n    }\n    margin-left: 25px;\n`;\n\nconst LeftColumn = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 60%;\n`;\n\nconst RightColumn = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 40%;\n`;\n\nconst Spacer = styled.div`\n    height: 20px;\n`;\n\nconst AddressContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--address-color);\n    width: 60%;\n`;\n\nconst IdenticonText = styled.a`\n    margin-left: 10px;\n    color: var(--body-text);\n    text-decoration: none;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst InformationContainer = styled.div`\n    margin-top: 16px;\n    color: var(--body-text);\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\ninterface Props {\n    poolAddress: string;\n}\n\nconst AddRemovePanel = (props: Props) => {\n    const { poolAddress } = props;\n    const {\n        root: {\n            providerStore,\n            addLiquidityFormStore,\n            removeLiquidityFormStore,\n            poolStore,\n        },\n    } = useStores();\n    const account = providerStore.providerStatus.account;\n    const chainId = providerStore.providerStatus.activeChainId;\n\n    const pool = poolStore.getPool(poolAddress);\n    let userProportion = undefined;\n    let isFinalized = false;\n    let isEmpty = false;\n\n    if (pool) {\n        userProportion = poolStore.getUserShareProportion(\n            pool.address,\n            account\n        );\n        isFinalized = pool.finalized;\n        isEmpty = pool.totalShares.isZero();\n    }\n\n    return (\n        <Wrapper>\n            <LeftColumn>\n                <AddressContainer>\n                    <Identicon address={poolAddress} />\n                    <IdenticonText\n                        href={getEtherscanLink(chainId, poolAddress, 'address')}\n                        target=\"_blank\"\n                    >\n                        {shortenAddress(poolAddress)}\n                    </IdenticonText>\n                </AddressContainer>\n                <InformationContainer></InformationContainer>\n            </LeftColumn>\n            {isFinalized ? (\n                <RightColumn>\n                    <Button\n                        text={'Add Liquidity'}\n                        isActive={!!pool && !isEmpty}\n                        isPrimary={true}\n                        onClick={() => {\n                            if (pool) {\n                                addLiquidityFormStore.openModal(\n                                    poolAddress,\n                                    account,\n                                    pool.tokensList\n                                );\n                            }\n                        }}\n                    />\n                    <Spacer />\n                    <Button\n                        text={'Remove Liquidity'}\n                        isActive={\n                            !!pool &&\n                            account &&\n                            userProportion &&\n                            userProportion.gt(0)\n                        }\n                        onClick={() => {\n                            if (pool) {\n                                removeLiquidityFormStore.openModal(\n                                    poolAddress,\n                                    account,\n                                    pool.tokensList\n                                );\n                            }\n                        }}\n                    />\n                </RightColumn>\n            ) : (\n                <div />\n            )}\n        </Wrapper>\n    );\n};\n\nexport default AddRemovePanel;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 108px;\n    background: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    width: calc(25% - 21px);\n    @media screen and (max-width: 1024px) {\n        width: 100%;\n        margin-left: 0px;\n    }\n    font-style: normal;\n    margin-top: 30px;\n    margin-left: 25px;\n    :first-of-type {\n        margin-left: 0px;\n    }\n`;\n\nconst InfoPanelText = styled.div`\n    font-weight: 500;\n    font-size: 20px;\n    line-height: 23px;\n    color: var(--panel-row-text);\n`;\n\nconst InfoPanelSubText = styled.div`\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n    color: var(--body-text);\n    margin-top: 12px;\n`;\n\nconst InfoPanel = ({ text, subText }) => {\n    return (\n        <Wrapper>\n            <InfoPanelText>{text}</InfoPanelText>\n            <InfoPanelSubText>{subText}</InfoPanelSubText>\n        </Wrapper>\n    );\n};\n\nexport default InfoPanel;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Pie } from 'react-chartjs-2';\nimport { observer } from 'mobx-react';\nimport {\n    formatFee,\n    formatPercentage,\n    shortenAddress,\n} from '../../utils/helpers';\nimport { useStores } from '../../contexts/storesContext';\nimport { Pool, UserShare } from '../../types';\nimport { formatPoolAssetChartData } from '../../utils/chartFormatter';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 20%;\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n    margin-top: 20px;\n    padding: 20px;\n`;\n\nconst Header = styled.div`\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 18px;\n    color: var(--body-text);\n    text-transform: uppercase;\n`;\n\nconst Address = styled.div`\n    color: var(--address-color);\n    margin-top: 14px;\n`;\n\nconst PoolInfo = styled.div`\n    color: var(--panel-row-text);\n    margin-top: 10px;\n`;\n\nconst ChartAndBreakdownWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nconst PieChartWrapper = styled.div`\n    width: 100px;\n    height: 100px;\n    margin-top: 30px;\n`;\n\nconst BreakdownContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-top: 14px;\n`;\n\nconst AssetPercentageContainer = styled.div`\n    display: flex;\n    align-items: center;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 18px;\n    margin-left: 12px;\n    margin-top: 10px;\n`;\n\nconst AssetPercentageText = styled.div`\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 18px;\n    color: var(--panel-row-text);\n    margin-left: 12px;\n`;\n\nconst AssetDot = styled.div`\n    height: 8px;\n    width: 8px;\n    border-radius: 10px;\n    background: ${props => props.dotColor};\n`;\n\ninterface Props {\n    poolAddress: string;\n    userShare: UserShare;\n}\n\nconst PoolOverview = observer((props: Props) => {\n    const { poolAddress, userShare } = props;\n    const {\n        root: { poolStore, contractMetadataStore },\n    } = useStores();\n    const pool = poolStore.getPool(poolAddress);\n\n    const shareText = getUserShareText(userShare);\n    const feeText = pool ? formatFee(pool.swapFee) : '-';\n\n    const options = {\n        maintainAspectRatio: false,\n        legend: {\n            display: false,\n        },\n        tooltips: {\n            enabled: false,\n        },\n    };\n\n    const renderAssetPercentages = (pool: Pool) => {\n        return (\n            <React.Fragment>\n                {pool.tokens.map((token, index) => {\n                    const tokenMetadata = contractMetadataStore.getTokenMetadata(\n                        token.address\n                    );\n                    return (\n                        <AssetPercentageContainer key={token.address}>\n                            <AssetDot\n                                dotColor={contractMetadataStore.getTokenColor(\n                                    token.address\n                                )}\n                            />\n                            <AssetPercentageText>\n                                {formatPercentage(\n                                    token.denormWeightProportion,\n                                    2\n                                )}{' '}\n                                {tokenMetadata.symbol}\n                            </AssetPercentageText>\n                        </AssetPercentageContainer>\n                    );\n                })}\n            </React.Fragment>\n        );\n    };\n\n    const metadata = contractMetadataStore.contractMetadata;\n\n    return (\n        <Wrapper>\n            <Header>Pool Overview</Header>\n            <Address>{shortenAddress(poolAddress)}</Address>\n            <PoolInfo>My share: {shareText}</PoolInfo>\n            <PoolInfo>Swap fee: {feeText}</PoolInfo>\n            <ChartAndBreakdownWrapper>\n                <PieChartWrapper>\n                    {pool ? (\n                        <Pie\n                            type={'doughnut'}\n                            data={formatPoolAssetChartData(pool, metadata)}\n                            options={options}\n                        />\n                    ) : (\n                        <div>Loading</div>\n                    )}\n                </PieChartWrapper>\n                <BreakdownContainer>\n                    {pool ? renderAssetPercentages(pool) : <div>Loading</div>}\n                </BreakdownContainer>\n            </ChartAndBreakdownWrapper>\n        </Wrapper>\n    );\n});\n\nconst getUserShareText = (userShare: UserShare): string => {\n    const { current, future } = userShare;\n    if (!current || current.isNaN()) {\n        return '-';\n    }\n    if (!future || future.isNaN()) {\n        return formatPercentage(current, 2);\n    }\n    const currentShare = formatPercentage(current, 2);\n    const futureShare = formatPercentage(future, 2);\n    return `${currentShare} → ${futureShare}`;\n};\n\nexport default PoolOverview;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n    appearance: none;\n    background-color: var(--panel-background);\n    border: 2px solid var(--error);\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05),\n        inset 0px -15px 10px -12px rgba(0, 0, 0, 0.05);\n    padding: 9px;\n    border-radius: 3px;\n    display: inline-block;\n    position: relative;\n\n    &:active,\n    &:checked:active {\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05),\n            inset 0px 1px 3px rgba(0, 0, 0, 0.1);\n    }\n\n    &:checked {\n        background-color: var(--error);\n        border: 2px solid var(--error);\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05),\n            inset 0px -15px 10px -12px rgba(0, 0, 0, 0.05),\n            inset 15px 10px -12px rgba(255, 255, 255, 0.1);\n        color: #99a1a7;\n    }\n\n    &:checked:after {\n        content: '\\\\00AC';\n        font-size: 24px;\n        position: absolute;\n        top: -3px;\n        left: 5px;\n        color: var(--panel-background);\n        rotate: 135deg;\n    }\n`;\n\nconst Checkbox = ({ checked, onChange }) => {\n    return <Input type=\"checkbox\" checked={checked} onChange={onChange} />;\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DepositType } from '../../stores/AddLiquidityForm';\n\nconst Wrapper = styled.div`\n    margin-top: 20px;\n    display: flex;\n    justify-content: center;\n    font-size: 14px;\n`;\n\nconst OptionBase = styled.div`\n    width: 140px;\n    height: 36px;\n    display: flex;\n    justify-content: center;\n    border: 1px solid #41476b;\n    align-items: center;\n    cursor: pointer;\n\n    :first-child {\n        border-bottom-left-radius: 6px;\n        border-top-left-radius: 6px;\n    }\n\n    :last-child {\n        border-bottom-right-radius: 6px;\n        border-top-right-radius: 6px;\n    }\n`;\n\nconst OptionInactive = styled(OptionBase)`\n    background: rgba(255, 255, 255, 0.06);\n    color: #fafafa;\n`;\n\nconst OptionActive = styled(OptionBase)`\n    background: #41476b;\n`;\n\nconst Option = ({ active, children, onClick }) => {\n    if (active) {\n        return <OptionActive onClick={onClick}>{children}</OptionActive>;\n    } else {\n        return <OptionInactive onClick={onClick}>{children}</OptionInactive>;\n    }\n};\n\nconst SingleMultiToggle = ({ depositType, onSelect }) => {\n    return (\n        <Wrapper>\n            <Option\n                active={depositType === DepositType.MULTI_ASSET}\n                onClick={() => {\n                    onSelect(DepositType.MULTI_ASSET);\n                }}\n            >\n                All Pool Assets\n            </Option>\n            <Option\n                active={depositType === DepositType.SINGLE_ASSET}\n                onClick={() => {\n                    onSelect(DepositType.SINGLE_ASSET);\n                }}\n            >\n                Single Asset\n            </Option>\n        </Wrapper>\n    );\n};\n\nexport default SingleMultiToggle;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    padding: 6px;\n    display: inline-block;\n    position: relative;\n    flex: 0 0 auto;\n    box-sizing: content-box;\n    width: 18px;\n    height: 18px;\n    cursor: pointer;\n`;\n\nconst Input = styled.input`\n    position: absolute;\n    margin: 0;\n    padding: 0;\n    opacity: 0;\n    cursor: inherit;\n    z-index: 1;\n    top: 0px;\n    right: 0px;\n    left: 0px;\n    width: 30px;\n    height: 30px;\n\n    &:enabled:checked + div div {\n        background: #ffffff;\n        border: 4px solid #8c9eff;\n    }\n\n    &:enabled:not(:checked) + div div {\n        border: 1.5px solid #41476b;\n    }\n`;\n\nconst Background = styled.div`\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n    width: 18px;\n    height: 18px;\n\n    :before {\n        position: absolute;\n        transform: scale(0, 0);\n        border-radius: 50%;\n        opacity: 0;\n        pointer-events: none;\n        content: '';\n    }\n`;\n\nconst BackgroundCircle = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    border-width: 2px;\n    border-style: solid;\n    border-radius: 50%;\n`;\n\nconst RadioButton = ({ checked, onChange }) => {\n    return (\n        <Wrapper>\n            <Input\n                type=\"radio\"\n                name=\"radio-group\"\n                checked={checked}\n                onChange={onChange}\n            />\n            <Background>\n                <BackgroundCircle />\n            </Background>\n        </Wrapper>\n    );\n};\n\nexport default RadioButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { TokenIconAddress } from '../Common/WalletBalances';\nimport RadioButton from '../Common/RadioButton';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport { BigNumberMap, Pool } from '../../types';\nimport { formatBalanceTruncated } from '../../utils/helpers';\nimport { BigNumber } from '../../utils/bignumber';\nimport { DepositType } from '../../stores/AddLiquidityForm';\nimport { ValidationStatus } from '../../stores/actions/validators';\n\nconst Wrapper = styled.div`\n    width: calc(80% - 20px);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    background: var(--panel-background);\n    margin-top: 20px;\n    margin-left: 20px;\n`;\n\nconst HeaderRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n    color: var(--body-text);\n    border-bottom: 1px solid var(--panel-border);\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst TableRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--panel-row-text);\n    text-align: left;\n    padding: 16px 20px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n    opacity: ${props => (props.inactive ? 0.6 : 1)};\n`;\n\nconst TableCell = styled.div`\n    display: flex;\n    align-items: center;\n    width: ${props => props.width || '25%'};\n`;\n\nconst TableCellRight = styled(TableCell)`\n    justify-content: flex-end;\n`;\n\nconst TokenIcon = styled.img`\n    width: 20px;\n    height: 20px;\n    margin-right: 13px;\n`;\n\nconst DepositAmount = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 30px;\n    border-radius: 4px;\n`;\n\nconst MaxLink = styled.div`\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 16px;\n    display: flex;\n    text-decoration-line: underline;\n    color: var(--link-text);\n    cursor: pointer;\n`;\n\nconst RadioButtonWrapper = styled.div`\n    margin-right: 8px;\n`;\n\nconst Toggle = styled.label`\n    position: relative;\n    display: inline-block;\n    width: 42px;\n    height: 24px;\n    input {\n        opacity: 0;\n        width: 0;\n        height: 0;\n    }\n`;\n\nconst ToggleInput = styled.input`\n    &:checked + span {\n        background-color: var(--highlighted-selector-background);\n    }\n    &:checked + span:before {\n        -webkit-transform: translateX(18px);\n        -ms-transform: translateX(18px);\n        transform: translateX(18px);\n        background-color: var(--slider-main);\n        background-image: url('Checkbox.svg');\n        background-repeat: no-repeat;\n        background-position: center;\n        background-size: 14px 14px;\n    }\n    &:focus + span {\n        box-shadow: 0 0 1px #2196f3;\n    }\n`;\n\nconst ToggleSlider = styled.span`\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--highlighted-selector-background);\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n    border-radius: 18px;\n    :before {\n        position: absolute;\n        content: '';\n        height: 18px;\n        width: 18px;\n        left: 3px;\n        bottom: 3px;\n        background-color: var(--input-text);\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n        border-radius: 50%;\n    }\n`;\n\nconst InputWrapper = styled.div`\n    height: 30px;\n    padding: 0px 17px;\n    font-style: normal;\n    font-weight: 500;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    input {\n        width: 70px;\n        text-align: right;\n        color: var(--input-text);\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 16px;\n        letter-spacing: 0.2px;\n        padding-left: 5px;\n        background-color: var(--panel-background);\n        border: none;\n        box-shadow: inset 0 0 0 1px var(--panel-background),\n            inset 0 0 0 70px var(--panel-background);\n        :-webkit-autofill,\n        :-webkit-autofill:hover,\n        :-webkit-autofill:focus,\n        :-webkit-autofill:active,\n        :-internal-autofill-selected {\n            -webkit-text-fill-color: var(--body-text);\n        }\n        ::placeholder {\n            color: var(--input-placeholder-text);\n        }\n        :focus {\n            outline: none;\n        }\n    }\n    border: ${props => (props.errorBorders ? '1px solid var(--error)' : '')};\n    margin-left: ${props => (props.errorBorders ? '-1px' : '0px')}\n    margin-right: ${props => (props.errorBorders ? '-1px' : '0px')}\n    :hover {\n        background-color: var(--input-hover-background);\n        border: ${props =>\n            props.errorBorders\n                ? '1px solid var(--error)'\n                : '1px solid var(--input-hover-border);'};\n        margin-left: -1px;\n        margin-right: -1px;\n        input {\n            background-color: var(--input-hover-background);\n            box-shadow: inset 0 0 0 1px var(--input-hover-background),\n                inset 0 0 0 70px var(--input-hover-background);\n            ::placeholder {\n                color: var(--input-hover-placeholder-text);\n                background-color: var(--input-hover-background);\n            }\n        }\n    }\n`;\n\ninterface Props {\n    poolAddress: string;\n}\n\nconst AddAssetTable = observer((props: Props) => {\n    const { poolAddress } = props;\n\n    const {\n        root: {\n            poolStore,\n            tokenStore,\n            providerStore,\n            proxyStore,\n            contractMetadataStore,\n            addLiquidityFormStore,\n        },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n\n    const pool = poolStore.getPool(poolAddress);\n    const proxyAddress = proxyStore.getInstanceAddress();\n    let userBalances: undefined | BigNumberMap;\n    let accountApprovalsLoaded = false;\n\n    if (pool) {\n        userBalances = tokenStore.getAccountBalances(pool.tokensList, account);\n        accountApprovalsLoaded = tokenStore.areAccountApprovalsLoaded(\n            poolStore.getPoolTokens(pool.address),\n            account,\n            proxyAddress\n        );\n    }\n\n    const handleMaxLinkClick = async (\n        tokenAddress: string,\n        balance: BigNumber\n    ) => {\n        let maxValue = '0.00';\n        const userBalance = tokenStore.normalizeBalance(balance, tokenAddress);\n\n        if (userBalance && !userBalance.eq(0)) {\n            maxValue = userBalance.toString();\n        }\n\n        addLiquidityFormStore.setInputValue(tokenAddress, maxValue);\n        addLiquidityFormStore.setActiveInputKey(tokenAddress);\n\n        const ratio = addLiquidityFormStore.calcRatio(\n            pool,\n            tokenAddress,\n            maxValue\n        );\n\n        addLiquidityFormStore.setJoinRatio(ratio);\n        addLiquidityFormStore.refreshInputAmounts(pool, account, ratio);\n    };\n\n    const handleCheckboxChange = async (event, tokenAddress: string) => {\n        const { checked } = event.target;\n\n        addLiquidityFormStore.setApprovalCheckboxTouched(tokenAddress, true);\n        addLiquidityFormStore.setApprovalCheckboxChecked(tokenAddress, checked);\n\n        if (checked) {\n            const response = await tokenStore.approveMax(\n                tokenAddress,\n                proxyAddress\n            );\n\n            // Revert change on metamask error\n            if (response.error) {\n                addLiquidityFormStore.setApprovalCheckboxChecked(\n                    tokenAddress,\n                    !checked\n                );\n            }\n        } else {\n            const response = await tokenStore.revokeApproval(\n                tokenAddress,\n                proxyAddress\n            );\n\n            // Revert change on metamask error\n            if (response.error) {\n                addLiquidityFormStore.setApprovalCheckboxChecked(\n                    tokenAddress,\n                    !checked\n                );\n            }\n        }\n    };\n\n    const handleInputChange = async (event, tokenAddress: string) => {\n        const { value } = event.target;\n        addLiquidityFormStore.setInputValue(tokenAddress, value);\n        addLiquidityFormStore.setActiveInputKey(tokenAddress);\n\n        const ratio = addLiquidityFormStore.calcRatio(\n            pool,\n            tokenAddress,\n            value\n        );\n        addLiquidityFormStore.setJoinRatio(ratio);\n        addLiquidityFormStore.refreshInputAmounts(pool, account, ratio);\n    };\n\n    const renderAssetTable = (\n        pool: Pool,\n        userBalances: undefined | BigNumberMap\n    ) => {\n        return (\n            <React.Fragment>\n                {pool.tokensList.map(tokenAddress => {\n                    const token = pool.tokens.find(token => {\n                        return token.address === tokenAddress;\n                    });\n\n                    const tokenMetadata = contractMetadataStore.getTokenMetadata(\n                        tokenAddress\n                    );\n\n                    const checkbox = addLiquidityFormStore.getCheckbox(\n                        tokenAddress\n                    );\n                    const input = addLiquidityFormStore.getInput(tokenAddress);\n\n                    let hasMaxApproval = false;\n\n                    if (accountApprovalsLoaded) {\n                        hasMaxApproval = tokenStore.hasMaxApproval(\n                            tokenAddress,\n                            account,\n                            proxyAddress\n                        );\n                    }\n\n                    let visuallyChecked;\n\n                    if (checkbox.touched) {\n                        visuallyChecked = checkbox.checked;\n                    } else if (accountApprovalsLoaded) {\n                        visuallyChecked = hasMaxApproval;\n                    } else {\n                        visuallyChecked = false;\n                    }\n\n                    let normalizedUserBalance = '0';\n                    let userBalanceToDisplay = '-';\n\n                    if (userBalances && userBalances[tokenAddress]) {\n                        normalizedUserBalance = formatBalanceTruncated(\n                            userBalances[tokenAddress],\n                            tokenMetadata.decimals,\n                            tokenMetadata.precision,\n                            20\n                        );\n\n                        userBalanceToDisplay = normalizedUserBalance;\n                    }\n\n                    const inactiveToken =\n                        addLiquidityFormStore.depositType ===\n                            DepositType.SINGLE_ASSET &&\n                        addLiquidityFormStore.activeToken !== token.address;\n\n                    let hasError =\n                        input.validation ===\n                        ValidationStatus.INSUFFICIENT_BALANCE;\n\n                    if (\n                        addLiquidityFormStore.activeInputKey === token.address\n                    ) {\n                        hasError =\n                            input.validation !== ValidationStatus.VALID &&\n                            input.validation !== ValidationStatus.EMPTY;\n                    }\n\n                    return (\n                        <TableRow key={token.address} inactive={inactiveToken}>\n                            <TableCell>\n                                {addLiquidityFormStore.depositType ===\n                                DepositType.SINGLE_ASSET ? (\n                                    <RadioButtonWrapper>\n                                        <RadioButton\n                                            checked={\n                                                addLiquidityFormStore.activeToken ===\n                                                token.address\n                                            }\n                                            onChange={e =>\n                                                addLiquidityFormStore.setActiveToken(\n                                                    tokenAddress\n                                                )\n                                            }\n                                        />\n                                    </RadioButtonWrapper>\n                                ) : (\n                                    <div />\n                                )}\n                                <TokenIcon\n                                    src={TokenIconAddress(\n                                        tokenMetadata.iconAddress,\n                                        tokenMetadata.isSupported\n                                    )}\n                                />\n                                {tokenMetadata.symbol}\n                            </TableCell>\n                            <TableCell>\n                                <Toggle>\n                                    <ToggleInput\n                                        type=\"checkbox\"\n                                        checked={visuallyChecked}\n                                        disabled={!account}\n                                        onChange={e =>\n                                            handleCheckboxChange(\n                                                e,\n                                                tokenAddress\n                                            )\n                                        }\n                                    />\n                                    <ToggleSlider></ToggleSlider>\n                                </Toggle>\n                            </TableCell>\n                            <TableCell>\n                                {userBalanceToDisplay} {token.symbol}\n                            </TableCell>\n                            <TableCellRight>\n                                {addLiquidityFormStore.depositType ===\n                                    DepositType.MULTI_ASSET ||\n                                addLiquidityFormStore.activeToken ===\n                                    tokenAddress ? (\n                                    <DepositAmount>\n                                        <InputWrapper errorBorders={hasError}>\n                                            {userBalances &&\n                                            userBalances[tokenAddress] ? (\n                                                <MaxLink\n                                                    onClick={() => {\n                                                        handleMaxLinkClick(\n                                                            tokenAddress,\n                                                            userBalances[\n                                                                tokenAddress\n                                                            ]\n                                                        );\n                                                    }}\n                                                >\n                                                    Max\n                                                </MaxLink>\n                                            ) : (\n                                                <div />\n                                            )}\n                                            <input\n                                                id={`input-${tokenAddress}`}\n                                                name={`input-name-${tokenAddress}`}\n                                                value={\n                                                    addLiquidityFormStore.getInput(\n                                                        tokenAddress\n                                                    ).value\n                                                }\n                                                onChange={e => {\n                                                    handleInputChange(\n                                                        e,\n                                                        tokenAddress\n                                                    );\n                                                }}\n                                                // ref={textInput}\n                                                placeholder=\"\"\n                                            />\n                                        </InputWrapper>\n                                    </DepositAmount>\n                                ) : (\n                                    <div />\n                                )}\n                            </TableCellRight>\n                        </TableRow>\n                    );\n                })}\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <Wrapper>\n            <HeaderRow>\n                <TableCell>Asset</TableCell>\n                <TableCell>Unlock</TableCell>\n                <TableCell>Wallet Balance</TableCell>\n                <TableCellRight>Deposit Amount</TableCellRight>\n            </HeaderRow>\n            {pool ? (\n                renderAssetTable(pool, userBalances)\n            ) : (\n                <TableRow>Loading</TableRow>\n            )}\n        </Wrapper>\n    );\n});\n\nexport default AddAssetTable;\n","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport PoolOverview from '../Common/PoolOverview';\nimport Button from '../Common/Button';\nimport Checkbox from '../Common/Checkbox';\nimport SingleMultiToggle from '../Common/SingleMultiToggle';\nimport AddAssetTable from './AddAssetTable';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport { Pool, PoolToken, UserShare } from '../../types';\nimport { DepositType } from '../../stores/AddLiquidityForm';\nimport { ValidationStatus } from '../../stores/actions/validators';\nimport { EtherKey } from '../../stores/Token';\nimport { bnum, formatPercentage, isTxReverted } from '../../utils/helpers';\nimport { calcPoolOutGivenSingleIn } from '../../utils/math';\nimport { BigNumber } from '../../utils/bignumber';\n\nconst Container = styled.div`\n    display: block;\n    position: fixed;\n    z-index: 5;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0, 0, 0);\n    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n`;\n\nconst ModalContent = styled.div`\n    position: relative;\n    margin: 60px auto 0;\n    display: flex;\n    flex-direction: column;\n    max-width: 862px;\n    background-color: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    color: white;\n`;\n\nconst AddLiquidityHeader = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 68px;\n    padding: 0px 20px;\n    background-color: var(--panel-header-background);\n    color: var(--header-text);\n    border-bottom: 1px solid var(--panel-border);\n    padding: 0px 20px 0px 20px;\n`;\n\nconst AddLiquidityBody = styled.div`\n    padding: 0px 20px 32px 20px;\n`;\n\nconst HeaderContent = styled.div``;\n\nconst ExitComponent = styled.div`\n    color: var(--exit-modal-color);\n    transform: rotate(135deg);\n    font-size: 22px;\n    cursor: pointer;\n`;\n\nconst AddLiquidityContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 20px;\n`;\n\nconst Message = styled.div`\n    margin-top: 16px;\n    padding: 16px;\n    display: flex;\n    align-items: center;\n    border: 1px solid var(--error);\n    border-radius: 4px;\n    font-size: 14px;\n`;\n\nconst Error = styled(Message)`\n    border-color: var(--error);\n    color: var(--error);\n`;\n\nconst Warning = styled(Message)`\n    border-color: var(--warning);\n    color: var(--warning);\n`;\n\nconst Notification = styled(Message)`\n    border-color: var(--panel-border);\n`;\n\nconst Check = styled(Error)``;\n\nconst Icon = styled.img`\n    width: 26px;\n    height: 24px;\n    margin-right: 20px;\n`;\n\nconst Content = styled.div``;\n\nconst LowerAmountLink = styled.span`\n    margin-left: 4px;\n    font-weight: 500;\n    text-decoration-line: underline;\n    color: var(--link-text);\n    cursor: pointer;\n`;\n\nconst Link = styled.a`\n    color: color: var(--warning);\n    margin: 0 4px;\n`;\n\nconst CheckboxWrapper = styled.div`\n    margin-right: 16px;\n`;\n\nconst ButtonWrapper = styled.div`\n    margin-top: 16px;\n`;\n\nenum ButtonAction {\n    UNLOCK,\n    ADD_LIQUIDITY,\n    REMOVE_LIQUIDITY,\n}\n\ninterface Props {\n    poolAddress: string;\n}\n\nconst BALANCE_BUFFER = 0.01;\n\nfunction useOnClickOutside(ref, handler) {\n    useEffect(() => {\n        const handleClick = event => {\n            // Do nothing if clicking ref's element or descendent elements\n            if (!ref.current || ref.current.contains(event.target)) {\n                return;\n            }\n\n            handler(event);\n        };\n\n        const handleKeyUp = event => {\n            if (event.key !== 'Escape') {\n                return;\n            }\n            handler(event);\n        };\n\n        document.addEventListener('mousedown', handleClick);\n        window.addEventListener('keydown', handleKeyUp, false);\n        document.addEventListener('touchstart', handleClick);\n\n        return () => {\n            document.removeEventListener('mousedown', handleClick);\n            window.removeEventListener('keydown', handleKeyUp, false);\n            document.removeEventListener('touchstart', handleClick);\n        };\n    }, [ref, handler]);\n}\n\nconst AddLiquidityModal = observer((props: Props) => {\n    const findLockedToken = (\n        pool: Pool,\n        account: string\n    ): PoolToken | undefined => {\n        if (addLiquidityFormStore.depositType === DepositType.MULTI_ASSET) {\n            return pool.tokens.find(token => {\n                return !tokenStore.hasApproval(\n                    token.address,\n                    account,\n                    proxyAddress\n                );\n            });\n        } else {\n            const tokenAddress = addLiquidityFormStore.activeToken;\n            const token = pool.tokens.find(\n                token => token.address === tokenAddress\n            );\n            if (tokenStore.hasApproval(tokenAddress, account, proxyAddress)) {\n                return;\n            } else {\n                return token;\n            }\n        }\n    };\n\n    const findFrontrunnableToken = (\n        pool: Pool,\n        account: string\n    ): PoolToken | undefined => {\n        if (!hasValidInput) {\n            return;\n        }\n        let maxAmountToBalanceRatio = bnum(0);\n        let maxRatioToken = undefined;\n        const balances = tokenStore.getAccountBalances(\n            pool.tokensList,\n            account\n        );\n        for (const token of pool.tokens) {\n            const address = token.address;\n            const amount = bnum(addLiquidityFormStore.getInput(address).value);\n            const denormAmount = tokenStore.denormalizeBalance(amount, address);\n            const balance = balances[address];\n            const amountToBalanceRatio = denormAmount.div(balance);\n            if (amountToBalanceRatio.gt(maxAmountToBalanceRatio)) {\n                maxAmountToBalanceRatio = amountToBalanceRatio;\n                maxRatioToken = token;\n            }\n        }\n        return maxRatioToken;\n    };\n\n    const calculateUserShare = (\n        pool: Pool,\n        account: string,\n        hasValidInput: boolean\n    ): UserShare => {\n        const currentTotal = tokenStore.getTotalSupply(pool.address);\n        const userBalance = tokenStore.getBalance(pool.address, account);\n\n        let currentShare;\n        let futureShare;\n\n        if (account) {\n            currentShare = poolStore.getUserShareProportion(\n                pool.address,\n                account\n            );\n        }\n\n        if (pool && currentTotal) {\n            let addedTokens = bnum(0);\n            if (hasValidInput) {\n                if (\n                    addLiquidityFormStore.depositType ===\n                    DepositType.MULTI_ASSET\n                ) {\n                    addedTokens = poolStore.calcPoolTokensByRatio(\n                        pool,\n                        addLiquidityFormStore.joinRatio\n                    );\n                } else {\n                    const tokenInAddress = addLiquidityFormStore.activeToken;\n                    const tokenIn = pool.tokens.find(\n                        token => token.address === tokenInAddress\n                    );\n                    const amount = new BigNumber(\n                        addLiquidityFormStore.getInput(tokenInAddress).value\n                    );\n\n                    const tokenBalanceIn = tokenStore.denormalizeBalance(\n                        tokenIn.balance,\n                        tokenInAddress\n                    );\n                    const tokenWeightIn = tokenIn.denormWeight;\n                    const poolSupply = tokenStore.denormalizeBalance(\n                        pool.totalShares,\n                        EtherKey\n                    );\n                    const totalWeight = pool.totalWeight;\n                    const tokenAmountIn = tokenStore\n                        .denormalizeBalance(amount, tokenInAddress)\n                        .integerValue(BigNumber.ROUND_UP);\n                    const swapFee = pool.swapFee;\n\n                    addedTokens = calcPoolOutGivenSingleIn(\n                        tokenBalanceIn,\n                        tokenWeightIn,\n                        poolSupply,\n                        totalWeight,\n                        tokenAmountIn,\n                        swapFee\n                    );\n                }\n            }\n\n            const futureTotal = currentTotal.plus(addedTokens);\n            futureShare = addedTokens.plus(userBalance).div(futureTotal);\n        }\n\n        return {\n            current: currentShare,\n            future: futureShare,\n        };\n    };\n\n    const hasSnx = (pool: Pool): boolean => {\n        return hasToken(pool, 'SNX');\n    };\n\n    const hasSynth = (pool: Pool): boolean => {\n        const synths = ['sUSD', 'sBTC', 'sETH', 'sXAU'];\n        return synths.some(synth => hasToken(pool, synth));\n    };\n\n    const hasAToken = (pool: Pool): boolean => {\n        const aTokens = [\n            'aDAI',\n            'aUSDT',\n            'aUSDC',\n            'aSUSD',\n            'aTUSD',\n            'aBUSD',\n            'aBAT',\n            'aETH',\n            'aKNC',\n            'aLEND',\n            'aLINK',\n            'aMANA',\n            'aMKR',\n            'aREP',\n            'aSNX',\n            'aWBTC',\n            'aZRX',\n        ];\n        return aTokens.some(aToken => hasToken(pool, aToken));\n    };\n\n    const hasCToken = (pool: Pool): boolean => {\n        const cTokens = [\n            'cUSDC',\n            'cDAI',\n            'cETH',\n            'cUSDT',\n            'cREP',\n            'cZRX',\n            'cBAT',\n            'cWBTC',\n        ];\n        return cTokens.some(cToken => hasToken(pool, cToken));\n    };\n\n    const hasToken = (pool: Pool, symbol: string): boolean => {\n        const tokenAddress = contractMetadataStore.symbolToAddressMap[symbol];\n        return pool.tokensList.includes(tokenAddress);\n    };\n\n    const { poolAddress } = props;\n    const {\n        root: {\n            poolStore,\n            tokenStore,\n            providerStore,\n            proxyStore,\n            addLiquidityFormStore,\n            contractMetadataStore,\n        },\n    } = useStores();\n\n    const history = useHistory();\n    const hasProxyInstance = proxyStore.hasInstance();\n\n    useEffect(() => {\n        if (!hasProxyInstance) {\n            addLiquidityFormStore.closeModal();\n            history.push('/setup');\n        }\n    }, [hasProxyInstance, addLiquidityFormStore, history]);\n\n    const account = providerStore.providerStatus.account;\n\n    const pool = poolStore.getPool(poolAddress);\n    const proxyAddress = proxyStore.getInstanceAddress();\n\n    const validationStatus = addLiquidityFormStore.validationStatus;\n    const hasValidInput = addLiquidityFormStore.hasValidInput();\n\n    const confirmationCheckbox = addLiquidityFormStore.confirmation;\n    const hasConfirmed = confirmationCheckbox.checked;\n\n    const hasTransactionError = addLiquidityFormStore.hasTransactionError;\n\n    const tokenErrors = contractMetadataStore.getTokenErrors();\n    const hasTokenError = pool.tokens.some(token => {\n        return tokenErrors.transferFee.includes(token.address);\n    });\n\n    const userShare = calculateUserShare(pool, account, hasValidInput);\n\n    let loading = true;\n    let lockedToken: PoolToken | undefined = undefined;\n\n    if (pool && !account) {\n        loading = false;\n    }\n\n    if (pool && account) {\n        const accountApprovalsLoaded = tokenStore.areAccountApprovalsLoaded(\n            poolStore.getPoolTokens(pool.address),\n            account,\n            proxyAddress\n        );\n\n        if (accountApprovalsLoaded) {\n            loading = false;\n            lockedToken = findLockedToken(pool, account);\n        }\n    }\n\n    const actionButtonHandler = async (\n        action: ButtonAction,\n        token?: PoolToken\n    ) => {\n        if (action === ButtonAction.UNLOCK) {\n            await tokenStore.approveMax(token.address, proxyAddress);\n        } else if (action === ButtonAction.ADD_LIQUIDITY) {\n            // Add Liquidity\n\n            if (addLiquidityFormStore.depositType === DepositType.MULTI_ASSET) {\n                const poolTokens = poolStore.calcPoolTokensByRatio(\n                    pool,\n                    addLiquidityFormStore.joinRatio\n                );\n\n                const poolTotal = tokenStore.getTotalSupply(pool.address);\n\n                let tokenAmountsIn: string[] = [];\n                pool.tokensList.forEach(tokenAddress => {\n                    const token = pool.tokens.find(\n                        token => token.address === tokenAddress\n                    );\n\n                    const inputAmountIn = tokenStore\n                        .denormalizeBalance(\n                            addLiquidityFormStore.joinRatio.times(\n                                token.balance\n                            ),\n                            token.address\n                        )\n                        .div(1 - BALANCE_BUFFER)\n                        .integerValue(BigNumber.ROUND_UP);\n                    const balanceAmountIn = tokenStore.getBalance(\n                        token.address,\n                        account\n                    );\n                    const tokenAmountIn = BigNumber.min(\n                        inputAmountIn,\n                        balanceAmountIn\n                    );\n                    tokenAmountsIn.push(tokenAmountIn.toString());\n                });\n\n                console.debug('joinPool', {\n                    joinRatio: addLiquidityFormStore.joinRatio.toString(),\n                    poolTokens: poolTokens.toString(),\n                    inputs: addLiquidityFormStore.formatInputsForJoin(),\n                    poolTotal: tokenStore\n                        .getTotalSupply(pool.address)\n                        .toString(),\n                    ratioCalc: poolTokens.div(poolTotal).toString(),\n                    tokenAmountsIn,\n                });\n\n                const response = await poolStore.joinPool(\n                    pool.address,\n                    poolTokens.toString(),\n                    tokenAmountsIn\n                );\n\n                if (isTxReverted(response)) {\n                    addLiquidityFormStore.setTransactionError();\n                }\n            } else {\n                const tokenInAddress = addLiquidityFormStore.activeToken;\n                const amount = new BigNumber(\n                    addLiquidityFormStore.getInput(tokenInAddress).value\n                );\n                const tokenAmountIn = tokenStore\n                    .denormalizeBalance(amount, tokenInAddress)\n                    .integerValue(BigNumber.ROUND_UP);\n                const minPoolAmountOut = '0';\n\n                console.debug('joinswapExternAmountIn', {\n                    tokenInAddress,\n                    amount,\n                    tokenAmountIn: tokenAmountIn.toString(),\n                    minPoolAmountOut,\n                });\n\n                const response = await poolStore.joinswapExternAmountIn(\n                    pool.address,\n                    tokenInAddress,\n                    tokenAmountIn.toString(),\n                    minPoolAmountOut\n                );\n\n                if (isTxReverted(response)) {\n                    addLiquidityFormStore.setTransactionError();\n                }\n            }\n        }\n    };\n\n    const handleLowerAmountButton = () => {\n        const frontrunningThreshold = 1 - BALANCE_BUFFER;\n        const token = findFrontrunnableToken(pool, account);\n        const address = token.address;\n\n        const balance = tokenStore.getBalance(address, account);\n        const safeAmount = balance.times(frontrunningThreshold);\n        const normalizedAmount = tokenStore.normalizeBalance(\n            safeAmount,\n            address\n        );\n\n        addLiquidityFormStore.setInputValue(\n            address,\n            normalizedAmount.toString()\n        );\n        addLiquidityFormStore.setActiveInputKey(address);\n\n        const ratio = addLiquidityFormStore.calcRatio(\n            pool,\n            address,\n            normalizedAmount.toString()\n        );\n\n        addLiquidityFormStore.setJoinRatio(ratio);\n        addLiquidityFormStore.refreshInputAmounts(pool, account, ratio);\n    };\n\n    const renderError = () => {\n        if (hasValidInput || hasTokenError) {\n            return;\n        }\n\n        function getText(status: ValidationStatus) {\n            if (status === ValidationStatus.EMPTY)\n                return \"Values can't be empty\";\n            if (status === ValidationStatus.ZERO) return \"Values can't be zero\";\n            if (status === ValidationStatus.NOT_FLOAT)\n                return 'Values should be numbers';\n            if (status === ValidationStatus.NEGATIVE)\n                return 'Values should be positive numbers';\n            if (status === ValidationStatus.INSUFFICIENT_BALANCE)\n                return 'Insufficient balance';\n            if (status === ValidationStatus.INSUFFICIENT_LIQUIDITY)\n                return 'Insufficient liquidity';\n            return '';\n        }\n\n        const errorText = getText(validationStatus);\n        return (\n            <Error>\n                <Icon src=\"ErrorSign.svg\" />\n                <Content>{errorText}</Content>\n            </Error>\n        );\n    };\n\n    const renderTransferError = () => {\n        if (!hasTransactionError) {\n            return;\n        }\n\n        let message =\n            'Adding liquidity failed as one of the underlying tokens blocked the transfer. ';\n        if (hasSnx(pool)) {\n            message =\n                'Adding liquidity failed as your SNX is locked in staking. ';\n        }\n        if (hasSynth(pool)) {\n            message =\n                'Adding liquidity failed as your Synthetix position might go underwater. ';\n        }\n        if (hasAToken(pool)) {\n            message =\n                'Adding liquidity failed as your Aave position might go underwater. ';\n        }\n        if (hasCToken(pool)) {\n            message =\n                'Adding liquidity failed as your Compound position might go underwater. ';\n        }\n\n        return (\n            <Error>\n                <Icon src=\"ErrorSign.svg\" />\n                <Content>\n                    {message}\n                    Reach out to our\n                    <Link\n                        href=\"https://discord.gg/ARJWaeF\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Discord\n                    </Link>\n                    for help.\n                </Content>\n            </Error>\n        );\n    };\n\n    const renderTokenError = () => {\n        if (!hasTokenError) {\n            return;\n        }\n\n        return (\n            <Error>\n                <Icon src=\"ErrorSign.svg\" />\n                <Content>\n                    This pool contains a deflationary token that is likely to\n                    cause loss of funds. Do not deposit.\n                    <Link\n                        href=\"https://medium.com/balancer-protocol/incident-with-non-standard-erc20-deflationary-tokens-95a0f6d46dea\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Learn more\n                    </Link>\n                </Content>\n            </Error>\n        );\n    };\n\n    const renderConfirmation = () => {\n        if (!hasValidInput || hasTokenError) {\n            return;\n        }\n\n        const safePool = pool.tokensList.every(tokenAddress => {\n            const hasMetadata = contractMetadataStore.hasTokenMetadata(\n                tokenAddress\n            );\n            if (!hasMetadata) {\n                return false;\n            }\n            const metadata = contractMetadataStore.getTokenMetadata(\n                tokenAddress\n            );\n            return metadata.isSupported;\n        });\n        if (safePool) {\n            if (!hasConfirmed) {\n                addLiquidityFormStore.toggleConfirmation();\n            }\n            return;\n        }\n\n        return (\n            <Check>\n                <CheckboxWrapper>\n                    <Checkbox\n                        checked={hasConfirmed}\n                        onChange={e => {\n                            addLiquidityFormStore.toggleConfirmation();\n                        }}\n                    />\n                </CheckboxWrapper>\n                <div>\n                    <div>\n                        • Do not add <b>deflationary tokens</b> or tokens with\n                        transfer fees.\n                    </div>\n                    <div>\n                        • Do not add tokens with <b>no bool return values</b>.\n                    </div>\n                    <div>\n                        • Any other <b>non-compliance from ERC20</b> may cause\n                        issues. DYOR!\n                    </div>\n                </div>\n            </Check>\n        );\n    };\n\n    const renderTokenWarning = () => {\n        if (!hasValidInput || hasTokenError) {\n            return;\n        }\n        const tokenWarnings = contractMetadataStore.getTokenWarnings();\n\n        const warning = pool.tokens.some(token => {\n            return tokenWarnings.includes(token.address);\n        });\n        if (!warning) {\n            return;\n        }\n\n        return (\n            <Warning>\n                <Icon src=\"WarningSign.svg\" />\n                <Content>\n                    This pool contains a non-standard token that may cause\n                    potential balance issues or unknown arbitrage opportunites.{' '}\n                    <Link\n                        href=\"https://docs.balancer.finance/protocol/limitations#erc20-tokens\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Learn more\n                    </Link>\n                </Content>\n            </Warning>\n        );\n    };\n\n    const renderFrontrunningWarning = () => {\n        if (!hasValidInput || hasTokenError) {\n            return;\n        }\n        if (addLiquidityFormStore.depositType === DepositType.SINGLE_ASSET) {\n            return;\n        }\n\n        const frontrunningThreshold = 1 - BALANCE_BUFFER;\n\n        const token = findFrontrunnableToken(pool, account);\n        if (!token) {\n            return;\n        }\n\n        const address = token.address;\n        const amount = bnum(addLiquidityFormStore.getInput(address).value);\n        const denormAmount = tokenStore.denormalizeBalance(amount, address);\n        const balance = tokenStore.getBalance(address, account);\n        const amountToBalanceRatio = denormAmount.div(balance);\n        if (\n            amountToBalanceRatio.lte(frontrunningThreshold) ||\n            amountToBalanceRatio.gt(1)\n        ) {\n            return;\n        }\n\n        return (\n            <Warning>\n                <Icon src=\"WarningSign.svg\" />\n                <Content>\n                    Adding liquidity might fail due to using max balance and a\n                    trade occuring before transaction is mined. Use high gas\n                    price or\n                    <LowerAmountLink onClick={e => handleLowerAmountButton()}>\n                        lower amounts\n                    </LowerAmountLink>\n                    .\n                </Content>\n            </Warning>\n        );\n    };\n\n    const renderLiquidityWarning = () => {\n        if (!hasValidInput || hasTokenError) {\n            return;\n        }\n        if (addLiquidityFormStore.depositType === DepositType.MULTI_ASSET) {\n            return;\n        }\n        const slippageThreshold = 0.01;\n        const tokenInAddress = addLiquidityFormStore.activeToken;\n        const tokenIn = pool.tokens.find(\n            token => token.address === tokenInAddress\n        );\n        const amount = new BigNumber(\n            addLiquidityFormStore.getInput(tokenInAddress).value\n        );\n\n        const tokenBalanceIn = tokenStore.denormalizeBalance(\n            tokenIn.balance,\n            tokenInAddress\n        );\n        const tokenWeightIn = tokenIn.denormWeight;\n        const poolSupply = tokenStore.denormalizeBalance(\n            pool.totalShares,\n            EtherKey\n        );\n        const totalWeight = pool.totalWeight;\n        const tokenAmountIn = tokenStore\n            .denormalizeBalance(amount, tokenInAddress)\n            .integerValue(BigNumber.ROUND_UP);\n        const swapFee = pool.swapFee;\n\n        const poolAmountOut = calcPoolOutGivenSingleIn(\n            tokenBalanceIn,\n            tokenWeightIn,\n            poolSupply,\n            totalWeight,\n            tokenAmountIn,\n            swapFee\n        );\n        const expectedPoolAmountOut = tokenAmountIn\n            .times(tokenWeightIn)\n            .times(poolSupply)\n            .div(tokenBalanceIn)\n            .div(totalWeight);\n        const one = new BigNumber(1);\n        const slippage = one.minus(poolAmountOut.div(expectedPoolAmountOut));\n\n        if (slippage.isNaN()) {\n            return;\n        }\n        if (slippage.lt(slippageThreshold)) {\n            return;\n        }\n\n        return (\n            <Warning>\n                <Icon src=\"WarningSign.svg\" />\n                <Content>\n                    Adding liquidity will incur {formatPercentage(slippage, 2)}{' '}\n                    of slippage\n                </Content>\n            </Warning>\n        );\n    };\n\n    const renderNotification = () => {\n        if (!account) {\n            return <Notification>Connect wallet to add liquidity</Notification>;\n        }\n    };\n\n    const renderActionButton = () => {\n        if (lockedToken) {\n            return (\n                <ButtonWrapper>\n                    <Button\n                        text={`Unlock ${lockedToken.symbol}`}\n                        isActive={!!account}\n                        isPrimary={true}\n                        onClick={e =>\n                            actionButtonHandler(\n                                ButtonAction.UNLOCK,\n                                lockedToken\n                            )\n                        }\n                    />\n                </ButtonWrapper>\n            );\n        } else {\n            return (\n                <ButtonWrapper>\n                    <Button\n                        text={`Add Liquidity`}\n                        isActive={\n                            account &&\n                            hasValidInput &&\n                            !hasTransactionError &&\n                            !hasTokenError &&\n                            hasConfirmed\n                        }\n                        isPrimary={true}\n                        onClick={e =>\n                            actionButtonHandler(ButtonAction.ADD_LIQUIDITY)\n                        }\n                    />\n                </ButtonWrapper>\n            );\n        }\n    };\n\n    const modalOpen = addLiquidityFormStore.modalOpen;\n\n    const ref = useRef();\n\n    useOnClickOutside(ref, () => addLiquidityFormStore.closeModal());\n\n    return (\n        <Container style={{ display: modalOpen ? 'block' : 'none' }}>\n            <ModalContent ref={ref}>\n                <AddLiquidityHeader>\n                    <HeaderContent>Add Liquidity</HeaderContent>\n                    <ExitComponent\n                        onClick={() => addLiquidityFormStore.closeModal()}\n                    >\n                        +\n                    </ExitComponent>\n                </AddLiquidityHeader>\n                <AddLiquidityBody>\n                    <SingleMultiToggle\n                        depositType={addLiquidityFormStore.depositType}\n                        onSelect={depositType => {\n                            addLiquidityFormStore.setActiveInputKey(undefined);\n                            addLiquidityFormStore.initializeInputs(\n                                pool.tokensList\n                            );\n                            addLiquidityFormStore.setDepositType(depositType);\n                        }}\n                    />\n                    <AddLiquidityContent>\n                        <PoolOverview\n                            poolAddress={poolAddress}\n                            userShare={userShare}\n                        />\n                        <AddAssetTable poolAddress={poolAddress} />\n                    </AddLiquidityContent>\n                    {loading ? (\n                        <div>Loading</div>\n                    ) : (\n                        <React.Fragment>\n                            {renderError()}\n                            {renderTransferError()}\n                            {renderTokenError()}\n                            {renderConfirmation()}\n\n                            {renderTokenWarning()}\n                            {renderFrontrunningWarning()}\n                            {renderLiquidityWarning()}\n\n                            {renderNotification()}\n                            {renderActionButton()}\n                        </React.Fragment>\n                    )}\n                </AddLiquidityBody>\n            </ModalContent>\n        </Container>\n    );\n});\n\nexport default AddLiquidityModal;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { TokenIconAddress } from '../Common/WalletBalances';\nimport RadioButton from '../Common/RadioButton';\nimport { DepositType } from '../../stores/RemoveLiquidityForm';\nimport { ValidationStatus } from '../../stores/actions/validators';\nimport { EtherKey } from '../../stores/Token';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport { BigNumberMap, Pool } from '../../types';\nimport { calcSingleOutGivenPoolIn } from '../../utils/math';\nimport {\n    formatNormalizedTokenValue,\n    fromPercentage,\n    bnum,\n} from '../../utils/helpers';\n\nconst Wrapper = styled.div`\n    width: calc(80% - 20px);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    background: var(--panel-background);\n    margin-top: 20px;\n    margin-left: 20px;\n`;\n\nconst HeaderRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n    color: var(--body-text);\n    border-bottom: 1px solid var(--panel-border);\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst TableRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--panel-row-text);\n    text-align: left;\n    padding: 16px 20px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n    opacity: ${props => (props.inactive ? 0.6 : 1)};\n`;\n\nconst TableCell = styled.div`\n    display: flex;\n    align-items: center;\n    width: ${props => props.width || '30%'};\n`;\n\nconst TableCellRight = styled(TableCell)`\n    justify-content: flex-end;\n`;\n\nconst TokenIcon = styled.img`\n    width: 20px;\n    height: 20px;\n    margin-right: 13px;\n`;\n\nconst MaxLink = styled.div`\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 16px;\n    display: flex;\n    text-decoration-line: underline;\n    color: var(--link-text);\n    cursor: pointer;\n`;\n\nconst RadioButtonWrapper = styled.div`\n    margin-right: 8px;\n`;\n\nconst WithdrawAmount = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 30px;\n    border-radius: 4px;\n`;\n\nconst WithdrawWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: right;\n    background: var(--panel-background);\n    padding: 16px 20px;\n    align-self: flex-end;\n`;\n\nconst WithdrawAmountWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    align-items: center;\n    width: 100%;\n`;\n\nconst InputWrapper = styled.div`\n    height: 30px;\n    padding: 0px 10px;\n    font-style: normal;\n    font-weight: 500;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    margin: 0px 5px 0px 10px;\n    input {\n        width: 50px;\n        text-align: right;\n        color: var(--input-text);\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 16px;\n        letter-spacing: 0.2px;\n        padding-left: 5px;\n        background-color: var(--panel-background);\n        border: none;\n        box-shadow: inset 0 0 0 1px var(--panel-background),\n            inset 0 0 0 70px var(--panel-background);\n        :-webkit-autofill,\n        :-webkit-autofill:hover,\n        :-webkit-autofill:focus,\n        :-webkit-autofill:active,\n        :-internal-autofill-selected {\n            -webkit-text-fill-color: var(--body-text);\n        }\n        ::placeholder {\n            color: var(--input-placeholder-text);\n        }\n        :focus {\n            outline: none;\n        }\n    }\n    border: ${props => (props.errorBorders ? '1px solid var(--error)' : '')};\n    :hover {\n        background-color: var(--input-hover-background);\n        border: ${props =>\n            props.errorBorders\n                ? '1px solid var(--error)'\n                : '1px solid var(--input-hover-border);'};\n        input {\n            background-color: var(--input-hover-background);\n            box-shadow: inset 0 0 0 1px var(--input-hover-background),\n                inset 0 0 0 70px var(--input-hover-background);\n            ::placeholder {\n                color: var(--input-hover-placeholder-text);\n                background-color: var(--input-hover-background);\n            }\n        }\n    }\n`;\n\ninterface Props {\n    poolAddress: string;\n}\n\nconst RemoveAssetsTable = observer((props: Props) => {\n    const { poolAddress } = props;\n\n    const {\n        root: {\n            poolStore,\n            tokenStore,\n            providerStore,\n            contractMetadataStore,\n            removeLiquidityFormStore,\n        },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n\n    const input = removeLiquidityFormStore.shareToWithdraw;\n    const hasError =\n        input.validation !== ValidationStatus.VALID &&\n        input.validation !== ValidationStatus.EMPTY;\n\n    const pool = poolStore.getPool(poolAddress);\n    let userBalances: undefined | BigNumberMap;\n\n    if (pool) {\n        userBalances = tokenStore.getAccountBalances(pool.tokensList, account);\n    }\n\n    const handleShareToWithdrawChange = event => {\n        const { value } = event.target;\n        removeLiquidityFormStore.setShareToWithdraw(value);\n        // if (account && removeLiquidityFormStore.hasValidInput()) {\n        //     removeLiquidityFormStore.validateUserShareInput(\n        //         pool.address,\n        //         account\n        //     );\n        // }\n    };\n\n    const handleMaxLinkClick = async () => {\n        const userShare = poolStore.getUserShareProportion(\n            pool.address,\n            account\n        );\n        let maxValue = '0.00';\n\n        if (userShare && userShare.gt(0)) {\n            maxValue = '100';\n        }\n\n        removeLiquidityFormStore.setShareToWithdraw(maxValue);\n        // if (removeLiquidityFormStore.hasValidInput()) {\n        //     removeLiquidityFormStore.validateUserShareInput(\n        //         pool.address,\n        //         account\n        //     );\n        // }\n    };\n\n    const renderWithdrawInput = () => {\n        let existingShare = account\n            ? poolStore.getUserShareProportion(pool.address, account)\n            : bnum(0);\n\n        if (!existingShare) {\n            existingShare = bnum(0);\n        }\n\n        const showMaxLink = account && existingShare.gt(0);\n\n        return (\n            <WithdrawWrapper>\n                <WithdrawAmountWrapper>\n                    Percent of my liquidity to withdraw\n                    <InputWrapper errorBorders={hasError}>\n                        {showMaxLink ? (\n                            <MaxLink\n                                onClick={() => {\n                                    handleMaxLinkClick();\n                                }}\n                            >\n                                Max\n                            </MaxLink>\n                        ) : (\n                            <div />\n                        )}\n                        <input\n                            id={`input-remove-liquidity`}\n                            name={`input-name-tokenAddress`}\n                            value={removeLiquidityFormStore.getShareToWithdraw()}\n                            onChange={e => {\n                                handleShareToWithdrawChange(e);\n                            }}\n                            placeholder=\"\"\n                        />\n                    </InputWrapper>\n                    %\n                </WithdrawAmountWrapper>\n            </WithdrawWrapper>\n        );\n    };\n\n    const renderAssetTable = (\n        pool: Pool,\n        userBalances: undefined | BigNumberMap\n    ) => {\n        return (\n            <React.Fragment>\n                {pool.tokensList.map(tokenAddress => {\n                    const token = poolStore.getPoolToken(\n                        poolAddress,\n                        tokenAddress\n                    );\n\n                    const tokenMetadata = contractMetadataStore.getTokenMetadata(\n                        tokenAddress\n                    );\n\n                    let poolBalanceToDisplay = '-';\n                    let withdrawPreviewBalanceText = '-';\n\n                    const precision = contractMetadataStore.getTokenPrecision(\n                        token.address\n                    );\n                    const userLiquidityContribution = poolStore.getUserLiquidityContribution(\n                        pool.address,\n                        token.address,\n                        account\n                    );\n\n                    poolBalanceToDisplay = formatNormalizedTokenValue(\n                        userLiquidityContribution,\n                        precision\n                    );\n\n                    if (removeLiquidityFormStore.hasValidInput()) {\n                        const shareToWithdraw = removeLiquidityFormStore.getShareToWithdraw();\n                        if (\n                            removeLiquidityFormStore.depositType ===\n                            DepositType.MULTI_ASSET\n                        ) {\n                            const tokensToWithdraw = userLiquidityContribution.times(\n                                fromPercentage(shareToWithdraw)\n                            );\n\n                            withdrawPreviewBalanceText = formatNormalizedTokenValue(\n                                tokensToWithdraw,\n                                precision\n                            );\n                        } else {\n                            const tokenOutAddress =\n                                removeLiquidityFormStore.activeToken;\n                            if (token.address === tokenOutAddress) {\n                                const tokenOut = pool.tokens.find(\n                                    token => token.address === tokenOutAddress\n                                );\n                                const amount = poolStore.getUserTokenPercentage(\n                                    pool.address,\n                                    account,\n                                    shareToWithdraw\n                                );\n\n                                const tokenBalanceOut = tokenStore.denormalizeBalance(\n                                    tokenOut.balance,\n                                    tokenOutAddress\n                                );\n                                const tokenWeightOut = tokenOut.denormWeight;\n                                const poolSupply = tokenStore.denormalizeBalance(\n                                    pool.totalShares,\n                                    EtherKey\n                                );\n                                const totalWeight = pool.totalWeight;\n                                const swapFee = pool.swapFee;\n\n                                const tokenAmountOut = calcSingleOutGivenPoolIn(\n                                    tokenBalanceOut,\n                                    tokenWeightOut,\n                                    poolSupply,\n                                    totalWeight,\n                                    amount,\n                                    swapFee\n                                );\n                                const tokenAmountNormalized = tokenStore.normalizeBalance(\n                                    tokenAmountOut,\n                                    tokenOutAddress\n                                );\n                                withdrawPreviewBalanceText = formatNormalizedTokenValue(\n                                    tokenAmountNormalized,\n                                    precision\n                                );\n                            }\n                        }\n                    }\n\n                    const inactiveToken =\n                        removeLiquidityFormStore.depositType ===\n                            DepositType.SINGLE_ASSET &&\n                        removeLiquidityFormStore.activeToken !== token.address;\n\n                    return (\n                        <TableRow key={token.address} inactive={inactiveToken}>\n                            <TableCell>\n                                {removeLiquidityFormStore.depositType ===\n                                DepositType.SINGLE_ASSET ? (\n                                    <RadioButtonWrapper>\n                                        <RadioButton\n                                            checked={\n                                                removeLiquidityFormStore.activeToken ===\n                                                token.address\n                                            }\n                                            onChange={e => {\n                                                removeLiquidityFormStore.setActiveToken(\n                                                    token.address\n                                                );\n                                            }}\n                                        />\n                                    </RadioButtonWrapper>\n                                ) : (\n                                    <div />\n                                )}\n                                <TokenIcon\n                                    src={TokenIconAddress(\n                                        tokenMetadata.iconAddress,\n                                        tokenMetadata.isSupported\n                                    )}\n                                />\n                                {token.symbol}\n                            </TableCell>\n                            <TableCell>\n                                {poolBalanceToDisplay} {token.symbol}\n                            </TableCell>\n                            <TableCellRight width=\"40%\">\n                                <WithdrawAmount>\n                                    <div>\n                                        {withdrawPreviewBalanceText}{' '}\n                                        {token.symbol}\n                                    </div>\n                                </WithdrawAmount>\n                            </TableCellRight>\n                        </TableRow>\n                    );\n                })}\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <Wrapper>\n            <HeaderRow>\n                <TableCell>Asset</TableCell>\n                <TableCell>My Pool Balance</TableCell>\n                <TableCellRight width=\"40%\">Withdraw Amount</TableCellRight>\n            </HeaderRow>\n            {pool ? (\n                renderAssetTable(pool, userBalances)\n            ) : (\n                <TableRow>Loading</TableRow>\n            )}\n            {renderWithdrawInput()}\n        </Wrapper>\n    );\n});\n\nexport default RemoveAssetsTable;\n","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport PoolOverview from '../Common/PoolOverview';\nimport Button from '../Common/Button';\nimport SingleMultiToggle from '../Common/SingleMultiToggle';\nimport RemoveAssetTable from './RemoveAssetTable';\nimport { DepositType } from '../../stores/RemoveLiquidityForm';\nimport { ValidationStatus } from '../../stores/actions/validators';\nimport { EtherKey } from '../../stores/Token';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport { calcSingleOutGivenPoolIn } from '../../utils/math';\nimport { bnum, formatPercentage } from '../../utils/helpers';\nimport { Pool, UserShare } from '../../types';\n\nconst Container = styled.div`\n    display: block;\n    position: fixed;\n    z-index: 5;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0, 0, 0);\n    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n`;\n\nconst ModalContent = styled.div`\n    position: relative;\n    margin: 60px auto 0;\n    display: flex;\n    flex-direction: column;\n    max-width: 862px;\n    background-color: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    color: white;\n`;\n\nconst RemoveLiquidityHeader = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 68px;\n    padding: 0px 20px;\n    background-color: var(--panel-header-background);\n    color: var(--header-text);\n    border-bottom: 1px solid var(--panel-border);\n    padding: 0px 20px 0px 20px;\n`;\n\nconst RemoveLiquidityBody = styled.div`\n    padding: 0px 20px 32px 20px;\n`;\n\nconst HeaderContent = styled.div``;\n\nconst ExitComponent = styled.div`\n    color: var(--exit-modal-color);\n    transform: rotate(135deg);\n    font-size: 22px;\n    cursor: pointer;\n`;\n\nconst RemoveLiquidityContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 20px;\n`;\n\nconst Message = styled.div`\n    margin-top: 16px;\n    padding: 16px;\n    display: flex;\n    align-items: center;\n    border: 1px solid var(--error);\n    border-radius: 4px;\n    font-size: 14px;\n`;\n\nconst Error = styled(Message)`\n    border-color: var(--error);\n    color: var(--error);\n`;\n\nconst Warning = styled(Message)`\n    border-color: var(--warning);\n    color: var(--warning);\n`;\n\nconst Notification = styled(Message)`\n    border-color: var(--panel-border);\n`;\n\nconst Icon = styled.img`\n    width: 26px;\n    height: 24px;\n    margin-right: 20px;\n`;\n\nconst Content = styled.div``;\n\nconst Link = styled.a`\n    color: color: var(--warning);\n`;\n\nconst ButtonWrapper = styled.div`\n    margin-top: 16px;\n`;\n\ninterface Props {\n    poolAddress: string;\n}\n\nfunction useOnClickOutside(ref, handler) {\n    useEffect(() => {\n        const handleClick = event => {\n            // Do nothing if clicking ref's element or descendent elements\n            if (!ref.current || ref.current.contains(event.target)) {\n                return;\n            }\n\n            handler(event);\n        };\n\n        const handleKeyUp = event => {\n            if (event.key !== 'Escape') {\n                return;\n            }\n            handler(event);\n        };\n\n        document.addEventListener('mousedown', handleClick);\n        window.addEventListener('keydown', handleKeyUp, false);\n        document.addEventListener('touchstart', handleClick);\n\n        return () => {\n            document.removeEventListener('mousedown', handleClick);\n            window.removeEventListener('keydown', handleKeyUp, false);\n            document.removeEventListener('touchstart', handleClick);\n        };\n    }, [ref, handler]);\n}\n\nconst RemoveLiquidityModal = observer((props: Props) => {\n    const calculateUserShare = (\n        pool: Pool,\n        account: string,\n        hasValidInput: boolean\n    ): UserShare => {\n        const currentTotal = tokenStore.getTotalSupply(pool.address);\n        const userBalance = tokenStore.getBalance(pool.address, account);\n\n        let currentShare;\n        let futureShare;\n\n        if (account) {\n            currentShare = poolStore.getUserShareProportion(\n                pool.address,\n                account\n            );\n        }\n\n        if (pool && currentTotal) {\n            const removedTokens = hasValidInput\n                ? poolStore.getUserTokenPercentage(\n                      pool.address,\n                      account,\n                      removeLiquidityFormStore.getShareToWithdraw()\n                  )\n                : bnum(0);\n\n            const futureTotal = currentTotal.minus(removedTokens);\n            futureShare = futureTotal.isZero()\n                ? bnum(0)\n                : userBalance.minus(removedTokens).div(futureTotal);\n        }\n\n        return {\n            current: currentShare,\n            future: futureShare,\n        };\n    };\n\n    const { poolAddress } = props;\n    const {\n        root: {\n            poolStore,\n            tokenStore,\n            providerStore,\n            contractMetadataStore,\n            removeLiquidityFormStore,\n        },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n\n    const pool = poolStore.getPool(poolAddress);\n\n    const validationStatus = removeLiquidityFormStore.validationStatus;\n    const hasValidInput = removeLiquidityFormStore.hasValidInput();\n\n    const userShare = calculateUserShare(pool, account, hasValidInput);\n\n    let loading = true;\n\n    if (pool && !account) {\n        loading = false;\n    }\n\n    const currentTotal = tokenStore.getTotalSupply(pool.address);\n    const requiredDataPresent = pool && currentTotal;\n\n    if (requiredDataPresent) {\n        loading = false;\n    }\n\n    const handleRemoveLiquidity = async () => {\n        const shareToWithdraw = removeLiquidityFormStore.getShareToWithdraw();\n        const poolTokens = poolStore.getUserTokenPercentage(\n            pool.address,\n            account,\n            shareToWithdraw\n        );\n        if (removeLiquidityFormStore.depositType === DepositType.MULTI_ASSET) {\n            await poolStore.exitPool(\n                pool.address,\n                poolTokens.integerValue().toString(),\n                poolStore.formatZeroMinAmountsOut(pool.address)\n            );\n        } else {\n            const tokenOutAddress = removeLiquidityFormStore.activeToken;\n            const minTokenAmountOut = '0';\n            await poolStore.exitswapPoolAmountIn(\n                pool.address,\n                tokenOutAddress,\n                poolTokens.integerValue().toString(),\n                minTokenAmountOut\n            );\n        }\n    };\n\n    const renderError = () => {\n        if (hasValidInput) {\n            return;\n        }\n\n        function getText(status: ValidationStatus) {\n            if (status === ValidationStatus.EMPTY)\n                return \"Values can't be empty \";\n            if (status === ValidationStatus.ZERO) return \"Values can't be zero\";\n            if (status === ValidationStatus.NOT_FLOAT)\n                return 'Values should be numbers';\n            if (status === ValidationStatus.NEGATIVE)\n                return 'Values should be positive numbers';\n            if (status === ValidationStatus.INSUFFICIENT_BALANCE)\n                return 'Insufficient balance';\n            if (status === ValidationStatus.INSUFFICIENT_LIQUIDITY)\n                return 'Insufficient liquidity';\n            return '';\n        }\n\n        const errorText = getText(validationStatus);\n        return (\n            <Error>\n                <Icon src=\"ErrorSign.svg\" />\n                <Content>{errorText}</Content>\n            </Error>\n        );\n    };\n\n    const renderTokenWarning = () => {\n        if (!hasValidInput) {\n            return;\n        }\n        let warning = false;\n        const tokenWarnings = contractMetadataStore.getTokenWarnings();\n\n        pool.tokens.forEach(token => {\n            if (tokenWarnings.includes(token.address)) warning = true;\n        });\n\n        if (warning) {\n            return (\n                <Warning>\n                    <Icon src=\"WarningSign.svg\" />\n                    <Content>\n                        This pool contains a non-standard token that may cause\n                        potential balance issues or unknown arbitrage\n                        opportunites.{' '}\n                        <Link\n                            href=\"https://docs.balancer.finance/protocol/limitations#erc20-tokens\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Learn more\n                        </Link>\n                    </Content>\n                </Warning>\n            );\n        }\n    };\n\n    const renderLiquidityWarning = () => {\n        if (!hasValidInput) {\n            return;\n        }\n        if (removeLiquidityFormStore.depositType === DepositType.MULTI_ASSET) {\n            return;\n        }\n        const slippageThreshold = 0.01;\n        const tokenOutAddress = removeLiquidityFormStore.activeToken;\n        const tokenOut = pool.tokens.find(\n            token => token.address === tokenOutAddress\n        );\n        const shareToWithdraw = removeLiquidityFormStore.getShareToWithdraw();\n        const amount = poolStore.getUserTokenPercentage(\n            pool.address,\n            account,\n            shareToWithdraw\n        );\n\n        const tokenBalanceOut = tokenStore.denormalizeBalance(\n            tokenOut.balance,\n            tokenOutAddress\n        );\n        const tokenWeightOut = tokenOut.denormWeight;\n        const poolSupply = tokenStore.denormalizeBalance(\n            pool.totalShares,\n            EtherKey\n        );\n        const totalWeight = pool.totalWeight;\n        const swapFee = pool.swapFee;\n\n        const tokenAmountOut = calcSingleOutGivenPoolIn(\n            tokenBalanceOut,\n            tokenWeightOut,\n            poolSupply,\n            totalWeight,\n            amount,\n            swapFee\n        );\n        const expectedTokenAmountOut = amount\n            .times(totalWeight)\n            .times(tokenBalanceOut)\n            .div(poolSupply)\n            .div(tokenWeightOut);\n        const one = bnum(1);\n        const slippage = one.minus(tokenAmountOut.div(expectedTokenAmountOut));\n\n        if (slippage.isNaN()) {\n            return;\n        }\n        if (slippage.lt(slippageThreshold)) {\n            return;\n        }\n\n        return (\n            <Warning>\n                <Icon src=\"WarningSign.svg\" />\n                <Content>\n                    Removing liquidity will incur{' '}\n                    {formatPercentage(slippage, 2)} of slippage\n                </Content>\n            </Warning>\n        );\n    };\n\n    const renderNotification = () => {\n        if (!account) {\n            return (\n                <Notification>Connect wallet to remove liquidity</Notification>\n            );\n        }\n    };\n\n    const renderActionButton = () => {\n        const hasSupply = !!tokenStore.getTotalSupply(pool.address);\n        return (\n            <ButtonWrapper>\n                <Button\n                    text={`Remove Liquidity`}\n                    isActive={account && pool && hasValidInput && hasSupply}\n                    isPrimary={true}\n                    onClick={e => handleRemoveLiquidity()}\n                />\n            </ButtonWrapper>\n        );\n    };\n\n    const modalOpen = removeLiquidityFormStore.modalOpen;\n\n    const ref = useRef();\n\n    useOnClickOutside(ref, () => removeLiquidityFormStore.closeModal());\n\n    return (\n        <Container style={{ display: modalOpen ? 'block' : 'none' }}>\n            <ModalContent ref={ref}>\n                <RemoveLiquidityHeader>\n                    <HeaderContent>Remove Liquidity</HeaderContent>\n                    <ExitComponent\n                        onClick={() => removeLiquidityFormStore.closeModal()}\n                    >\n                        +\n                    </ExitComponent>\n                </RemoveLiquidityHeader>\n                <RemoveLiquidityBody>\n                    <SingleMultiToggle\n                        depositType={removeLiquidityFormStore.depositType}\n                        onSelect={depositType => {\n                            removeLiquidityFormStore.setDepositType(\n                                depositType\n                            );\n                        }}\n                    />\n                    <RemoveLiquidityContent>\n                        <PoolOverview\n                            poolAddress={poolAddress}\n                            userShare={userShare}\n                        />\n                        <RemoveAssetTable poolAddress={poolAddress} />\n                    </RemoveLiquidityContent>\n                    {loading ? (\n                        <div>Loading</div>\n                    ) : (\n                        <React.Fragment>\n                            {renderError()}\n\n                            {renderTokenWarning()}\n                            {renderLiquidityWarning()}\n\n                            {renderNotification()}\n\n                            {renderActionButton()}\n                        </React.Fragment>\n                    )}\n                </RemoveLiquidityBody>\n            </ModalContent>\n        </Container>\n    );\n});\n\nexport default RemoveLiquidityModal;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { TokenIconAddress } from '../Common/WalletBalances';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport { BigNumber } from 'utils/bignumber';\nimport { Pool } from '../../types';\nimport {\n    formatPercentage,\n    formatNormalizedTokenValue,\n    formatCurrency,\n    getEtherscanLink,\n} from '../../utils/helpers';\n\nconst Wrapper = styled.div`\n    width: 100%;\n`;\n\nconst TableWrapper = styled.div`\n    border: 1px solid var(--panel-border);\n    border-radius: 0 4px 4px 4px;\n    background: var(--panel-background);\n`;\n\nconst HeaderRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--body-text);\n    border-bottom: 1px solid var(--panel-border);\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst StyledLink = styled.a`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 22px;\n    text-decoration: none;\n    color: var(--highlighted-selector-text);\n`;\n\nconst TableRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--panel-row-text);\n    text-align: left;\n    border-bottom: 1px solid var(--panel-border);\n    :last-of-type {\n        border-bottom: none;\n    }\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst TableCell = styled.div`\n    display: flex;\n    align-items: center;\n    width: ${props => props.width || '20%'};\n    @media screen and (max-width: 1024px) {\n        width: 30%;\n    }\n`;\n\nconst TableCellHideMobile = styled(TableCell)`\n    @media screen and (max-width: 1024px) {\n        display: none;\n        width: 0%;\n    }\n`;\n\nconst TableCellRight = styled(TableCell)`\n    justify-content: flex-end;\n`;\n\nconst TableCellRightHideMobile = styled(TableCellRight)`\n    @media screen and (max-width: 1024px) {\n        display: none;\n        width: 0%;\n    }\n`;\n\nconst TokenIcon = styled.img`\n    width: 20px;\n    height: 20px;\n    margin-right: 13px;\n`;\n\ninterface Props {\n    poolAddress: string;\n}\n\nconst BalancesTable = observer((props: Props) => {\n    const { poolAddress } = props;\n\n    const {\n        root: {\n            poolStore,\n            tokenStore,\n            providerStore,\n            contractMetadataStore,\n            marketStore,\n        },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n    const chainId = providerStore.providerStatus.activeChainId;\n\n    const pool = poolStore.getPool(poolAddress);\n    let userPoolTokens: undefined | BigNumber;\n    let totalPoolTokens: undefined | BigNumber;\n\n    if (pool) {\n        userPoolTokens = tokenStore.getBalance(poolAddress, account);\n        totalPoolTokens = tokenStore.getTotalSupply(poolAddress);\n    }\n\n    const renderBalanceTable = (\n        pool: Pool,\n        userPoolTokens: undefined | BigNumber,\n        totalPoolTokens: undefined | BigNumber\n    ) => {\n        return (\n            <React.Fragment>\n                {pool.tokensList.map(tokenAddress => {\n                    const token = poolStore.getPoolToken(\n                        pool.address,\n                        tokenAddress\n                    );\n\n                    const tokenMetadata = contractMetadataStore.getTokenMetadata(\n                        tokenAddress\n                    );\n\n                    const balanceToDisplay: string =\n                        userPoolTokens && totalPoolTokens\n                            ? formatNormalizedTokenValue(\n                                  token.balance.times(\n                                      userPoolTokens.div(totalPoolTokens)\n                                  ),\n                                  4,\n                                  20\n                              )\n                            : '-';\n\n                    let valueToDisplay = '-';\n                    if (\n                        userPoolTokens &&\n                        totalPoolTokens &&\n                        marketStore.assetPricesLoaded\n                    ) {\n                        if (tokenMetadata.isSupported) {\n                            // TODO: Scale this using token decimals\n                            const userBalanceValue = marketStore.getValue(\n                                tokenMetadata.symbol,\n                                token.balance.times(\n                                    userPoolTokens.div(totalPoolTokens)\n                                )\n                            );\n\n                            valueToDisplay = formatCurrency(userBalanceValue);\n                        } else {\n                            valueToDisplay = '(Untracked)';\n                        }\n                    }\n\n                    const isSupported = tokenMetadata.isSupported;\n\n                    return (\n                        <TableRow key={tokenAddress}>\n                            <TableCell>\n                                <TokenIcon\n                                    src={TokenIconAddress(\n                                        tokenMetadata.iconAddress,\n                                        tokenMetadata.isSupported\n                                    )}\n                                />\n                                <StyledLink\n                                    href={getEtherscanLink(\n                                        chainId,\n                                        tokenMetadata.address,\n                                        'address'\n                                    )}\n                                    target=\"_blank\"\n                                >\n                                    {tokenMetadata.symbol}\n                                </StyledLink>\n                            </TableCell>\n                            <TableCell>\n                                {formatPercentage(\n                                    token.denormWeightProportion,\n                                    2\n                                )}\n                            </TableCell>\n                            <TableCell>\n                                {formatNormalizedTokenValue(\n                                    token.balance,\n                                    tokenMetadata.precision\n                                )}{' '}\n                                {isSupported ? tokenMetadata.symbol : ''}\n                            </TableCell>\n                            <TableCellHideMobile>\n                                {balanceToDisplay}{' '}\n                                {isSupported ? tokenMetadata.symbol : ''}\n                            </TableCellHideMobile>\n                            <TableCellRightHideMobile>\n                                $ {valueToDisplay}\n                            </TableCellRightHideMobile>\n                        </TableRow>\n                    );\n                })}\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <Wrapper>\n            <TableWrapper>\n                <HeaderRow>\n                    <TableCell>Token</TableCell>\n                    <TableCell>Weight</TableCell>\n                    <TableCell>Pool Balance</TableCell>\n                    <TableCellHideMobile>My Pool Balance</TableCellHideMobile>\n                    <TableCellRightHideMobile>\n                        My Asset Value\n                    </TableCellRightHideMobile>\n                </HeaderRow>\n                {pool ? (\n                    renderBalanceTable(pool, userPoolTokens, totalPoolTokens)\n                ) : (\n                    <TableRow>Loading</TableRow>\n                )}\n            </TableWrapper>\n        </Wrapper>\n    );\n});\n\nexport default BalancesTable;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { padToDecimalPlaces } from '../../utils/helpers';\nimport { getEtherscanLink } from '../../utils/helpers';\nimport { useStores } from '../../contexts/storesContext';\nimport { TokenIconAddress } from '../Common/WalletBalances';\nimport { getAddress } from 'ethers/utils';\nconst ExternalLink = require('../../assets/images/external-link.svg') as string;\n\nconst formatDate = timestamp => {\n    const date = new Date(timestamp * 1000);\n    let z = date.getTimezoneOffset() * 60 * 1000;\n    let tLocal = new Date(timestamp * 1000 - z);\n    let iso = tLocal.toISOString();\n    iso = iso.slice(0, 19).replace('T', ' ');\n    return iso;\n};\n\ninterface Props {\n    poolAddress: string;\n}\n\nconst Wrapper = styled.div`\n    width: 100%;\n`;\n\nconst TableWrapper = styled.div`\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    background: var(--panel-background);\n`;\n\nconst TableRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--panel-row-text);\n    text-align: left;\n    border-bottom: 1px solid var(--panel-border);\n    :last-of-type {\n        border-bottom: none;\n    }\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst HeaderRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--body-text);\n    border-bottom: 1px solid var(--panel-border);\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst TableCell = styled.div`\n    display: flex;\n    align-items: center;\n    width: ${props => props.width || '20%'};\n`;\n\nconst TableCellHideMobile = styled(TableCell)`\n    @media screen and (max-width: 1024px) {\n        display: none;\n        width: 0%;\n    }\n`;\n\nconst TableRowLoad = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--panel-row-text);\n    text-align: center;\n    border-bottom: 1px solid var(--panel-border);\n    :last-of-type {\n        border-bottom: none;\n    }\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n    justify-content: center;\n`;\n\nconst TableCellLoad = styled.div`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    text-align: center;\n    vertical-align: middle;\n    justify-content: center;\n    cursor: pointer;\n`;\n\nconst TableCellTokenHeader = styled.div`\n    display: flex;\n    width: ${props => props.width || '30%'};\n    align-items: center;\n    justify-content: center;\n`;\n\nconst TableCellTokenIn = styled.div`\n    display: flex;\n    width: ${props => props.width || '10%'};\n    align-items: center;\n    justify-content: flex-end;\n`;\n\nconst TableCellTokenOut = styled.div`\n    display: flex;\n    width: ${props => props.width || '10%'};\n    align-items: center;\n    justify-content: flex-start;\n`;\n\nconst TokenIconOut = styled.img`\n    width: 20px;\n    height: 20px;\n    margin-left: 7px;\n    margin-right: 7px;\n`;\n\nconst TokenIconIn = styled.img`\n    width: 20px;\n    height: 20px;\n    margin-right: 7px;\n    margin-left: 7px;\n`;\n\nconst TokenSymbol = styled.div`\n    @media screen and (max-width: 1024px) {\n        display: none;\n        width: 0%;\n    }\n`;\n\nconst TableCellAmountIn = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    width: ${props => props.width || '20%'};\n    @media screen and (max-width: 1024px) {\n        width: 40%;\n    }\n`;\n\nconst TableCellAmountOut = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    width: ${props => props.width || '17%'};\n    @media screen and (max-width: 1024px) {\n        width: 40%;\n    }\n`;\n\nconst TableCellTxHeader = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    width: ${props => props.width || '20%'};\n`;\n\nconst TableCellTxDetails = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    width: ${props => props.width || '23%'};\n`;\n\nconst StyledLink = styled.a`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 22px;\n    text-decoration: none;\n    color: var(--highlighted-selector-text);\n`;\n\nconst ExternalIcon = styled.img`\n    width: 20px;\n    height: 20px;\n    margin-right: 7px;\n    margin-left: 7px;\n    filter: invert(67%) sepia(15%) saturate(333%) hue-rotate(155deg)\n        brightness(94%) contrast(88%);\n`;\n\nconst SwapsTable = observer((props: Props) => {\n    const { poolAddress } = props;\n\n    const {\n        root: { swapsTableStore, contractMetadataStore, providerStore },\n    } = useStores();\n\n    const chainId = providerStore.providerStatus.activeChainId;\n\n    const pageGraph = () => {\n        swapsTableStore.pagePoolSwaps(poolAddress);\n    };\n\n    const swapsLoaded = swapsTableStore.isLoaded;\n    const swaps = swapsTableStore.swaps;\n\n    if (!swapsLoaded) {\n        swapsTableStore.fetchPoolSwaps(poolAddress);\n    }\n\n    const renderBottomRow = swaps => {\n        if (swapsLoaded) {\n            if (swaps.length > 0) {\n                return (\n                    <TableRowLoad key={'more'}>\n                        <TableCellLoad onClick={e => pageGraph()}>\n                            LOAD MORE\n                        </TableCellLoad>\n                    </TableRowLoad>\n                );\n            } else {\n                return (\n                    <TableRowLoad key={'no-swaps'}>\n                        <TableCellLoad>NO SWAPS</TableCellLoad>\n                    </TableRowLoad>\n                );\n            }\n        } else {\n            return (\n                <TableRowLoad key={'loading'}>\n                    <TableCellLoad>Loading...</TableCellLoad>\n                </TableRowLoad>\n            );\n        }\n    };\n\n    const renderSwapsTable = (swaps, contractMetadataStore) => {\n        let bottomRow = renderBottomRow(swaps);\n\n        return (\n            <React.Fragment>\n                {swaps.map((swap, index) => {\n                    const tokenInMetadata = contractMetadataStore.getTokenMetadata(\n                        getAddress(swap.tokenIn)\n                    );\n                    const tokenOutMetadata = contractMetadataStore.getTokenMetadata(\n                        getAddress(swap.tokenOut)\n                    );\n\n                    let tokenInIcon,\n                        tokenOutIcon = '';\n                    try {\n                        tokenInIcon = TokenIconAddress(\n                            tokenInMetadata.iconAddress,\n                            tokenInMetadata.isSupported\n                        );\n\n                        tokenOutIcon = TokenIconAddress(\n                            tokenOutMetadata.iconAddress,\n                            tokenOutMetadata.isSupported\n                        );\n                    } catch (err) {\n                        console.log(`[SwapsTable] Error Loading Token Icon.`);\n                    }\n\n                    const tx = swap.id.split('-')[0];\n                    const amountOut = padToDecimalPlaces(\n                        swap.tokenAmountOut,\n                        tokenOutMetadata.decimals\n                    );\n                    const amountIn = padToDecimalPlaces(\n                        swap.tokenAmountIn,\n                        tokenInMetadata.decimals\n                    );\n\n                    return (\n                        <TableRow key={index}>\n                            <TableCellHideMobile>\n                                {formatDate(swap.timestamp)}\n                            </TableCellHideMobile>\n                            <TableCellAmountIn>{amountIn}</TableCellAmountIn>\n                            <TableCellTokenIn>\n                                <TokenSymbol>{swap.tokenInSym}</TokenSymbol>\n                                <TokenIconIn src={tokenInIcon} />\n                            </TableCellTokenIn>\n                            <TableCellTokenOut>\n                                <TokenIconOut src={tokenOutIcon} />\n                                <TokenSymbol>{swap.tokenOutSym}</TokenSymbol>\n                            </TableCellTokenOut>\n                            <TableCellAmountOut>{amountOut}</TableCellAmountOut>\n                            <TableCellTxDetails>\n                                <StyledLink\n                                    href={getEtherscanLink(\n                                        chainId,\n                                        tx,\n                                        'transaction'\n                                    )}\n                                    target=\"_blank\"\n                                >\n                                    <ExternalIcon src={ExternalLink} alt=\"^\" />\n                                </StyledLink>\n                            </TableCellTxDetails>\n                        </TableRow>\n                    );\n                })}\n\n                {bottomRow}\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <Wrapper>\n            <TableWrapper>\n                <HeaderRow>\n                    <TableCellHideMobile>Time</TableCellHideMobile>\n                    <TableCellTokenHeader>Trade In</TableCellTokenHeader>\n                    <TableCellTokenHeader>Trade Out</TableCellTokenHeader>\n                    <TableCellTxHeader>Tx Details</TableCellTxHeader>\n                </HeaderRow>\n                {renderSwapsTable(swaps, contractMetadataStore)}\n            </TableWrapper>\n        </Wrapper>\n    );\n});\n\nexport default SwapsTable;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport BalancesTable from './BalancesTable';\nimport SwapsTable from './SwapsTable';\nimport { observer } from 'mobx-react';\n\nconst STabs = styled(Tabs)`\n    -webkit-tap-highlight-color: transparent;\n    width: 100%;\n    padding-top: 8px;\n    padding-bottom: 16px;\n`;\n\nconst STabList = styled(TabList)`\n    margin: 20px 0 0 0;\n    padding: 0;\n`;\n\nconst STab = styled(Tab)`\n    display: inline-block;\n    border-bottom: none;\n    bottom: -1px;\n    position: relative;\n    list-style: none;\n    padding: 10px 15px;\n    cursor: pointer;\n    color: var(--body-text);\n    &.react-tabs__tab--selected {\n        background: var(--highlighted-selector-background);\n        border-color: var(--panel-border);\n        color: var(--header-text);\n        border-radius: 4px 4px 0 0;\n    }\n    &.react-tabs__tab--disabled {\n        color: GrayText;\n        cursor: default;\n    }\n    &.react-tabs__tab:focus {\n        box-shadow: 0 0 5px hsl(208, 99%, 50%);\n        border-color: hsl(208, 99%, 50%);\n        outline: none;\n    }\n    &.react-tabs__tab:focus:after {\n        content: '';\n        position: absolute;\n        height: 5px;\n        left: -4px;\n        right: -4px;\n        bottom: -5px;\n        background: #fff;\n    }\n`;\n\nconst STabPanel = styled(TabPanel)`\n    display: none;\n    &.react-tabs__tab-panel--selected {\n        display: block;\n    }\n`;\n\ninterface Props {\n    poolAddress: string;\n}\n\nconst PoolTabs = observer((props: Props) => {\n    const { poolAddress } = props;\n\n    return (\n        <STabs>\n            <STabList>\n                <STab>Balances</STab>\n                <STab>Swaps</STab>\n            </STabList>\n\n            <STabPanel>\n                <BalancesTable poolAddress={poolAddress} />\n            </STabPanel>\n            <STabPanel>\n                <SwapsTable poolAddress={poolAddress} />\n            </STabPanel>\n        </STabs>\n    );\n});\n\nexport default PoolTabs;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport PoolAssetChartPanel from '../components/Pool/PoolAssetChartPanel';\nimport AddRemovePanel from '../components/Pool/AddRemovePanel';\nimport InfoPanel from '../components/Pool/InfoPanel';\nimport AddLiquidityModal from '../components/AddLiquidity/AddLiquidityModal';\nimport RemoveLiquidityModal from '../components/RemoveLiquidity/RemoveLiquidityModal';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../contexts/storesContext';\nimport {\n    formatFee,\n    formatPercentage,\n    isAddress,\n    toChecksum,\n    formatCurrency,\n} from '../utils/helpers';\nimport { BigNumber } from '../utils/bignumber';\nimport { Pool } from '../types';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport PoolTabs from '../components/Pool/PoolTabs';\n\nconst PoolViewWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 27px 25px 0px 25px;\n`;\n\nconst ErrorMessage = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 32px;\n    color: var(--panel-row-text);\n    width: 100%;\n    height: calc(100vh - 108px);\n`;\n\nconst ExitComponent = styled.div`\n    color: var(--exit-modal-color);\n    transform: rotate(135deg);\n    font-size: 22px;\n    cursor: pointer;\n    width: 25px;\n    position: absolute;\n    right: 20px;\n`;\n\nconst Icon = styled.img`\n    width: 26px;\n    height: 24px;\n    margin-right: 20px;\n`;\n\nconst Container = styled.div`\n    display: block;\n    position: fixed;\n    z-index: 5;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0, 0, 0);\n    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n`;\n\nconst ModalContent = styled.div`\n    position: relative;\n    margin: 120px auto 0;\n    display: flex;\n    flex-direction: column;\n    max-width: 862px;\n    padding: 25px;\n    background-color: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    color: white;\n`;\n\nconst Message = styled.div`\n    margin-top: 16px;\n    padding: 16px;\n    display: flex;\n    align-items: center;\n    border: 1px solid var(--error);\n    border-radius: 4px;\n    font-size: 14px;\n`;\n\nconst Error = styled(Message)`\n    border-color: var(--error);\n    color: var(--error);\n`;\n\nconst InfoPanelWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    width: 100%;\n    justify-content: flex-start;\n`;\n\nconst PoolView = observer((props: RouteComponentProps) => {\n    const getUserShareText = (\n        pool: Pool,\n        account: string,\n        totalPoolTokens: BigNumber | undefined,\n        userPoolTokens: BigNumber | undefined\n    ): string => {\n        let shareText = '-';\n\n        if (account && userPoolTokens && totalPoolTokens) {\n            const userShare = userPoolTokens.div(totalPoolTokens);\n            if (userShare) {\n                shareText = formatPercentage(userShare, 2);\n            } else {\n                shareText = '0%';\n            }\n        }\n\n        return shareText;\n    };\n\n    const poolAddress = toChecksum(props.match.params.poolAddress);\n    const {\n        root: {\n            poolStore,\n            providerStore,\n            marketStore,\n            appSettingsStore,\n            blockchainFetchStore,\n            addLiquidityFormStore,\n            removeLiquidityFormStore,\n            tokenStore,\n            swapsTableStore,\n        },\n    } = useStores();\n\n    const pool = poolStore.getPool(poolAddress);\n    const account = providerStore.providerStatus.account;\n\n    const [warningModalOpen, setWarningModalOpen] = useState(true);\n\n    const handleCloseModal = () => {\n        setWarningModalOpen(false);\n    };\n\n    useEffect(() => {\n        return function cleanup() {\n            swapsTableStore.clearPoolSwaps();\n        };\n    }, [poolAddress, swapsTableStore]);\n\n    useEffect(() => {\n        poolStore.fetchActivePool(poolAddress);\n        tokenStore.fetchTotalSupplies([poolAddress]);\n        if (account) {\n            tokenStore.fetchTokenBalances(account, [poolAddress]);\n        }\n    }, [account, poolAddress, poolStore, tokenStore]);\n\n    if (!isAddress(poolAddress)) {\n        return (\n            <PoolViewWrapper>\n                <ErrorMessage>Please input a valid Pool address</ErrorMessage>\n            </PoolViewWrapper>\n        );\n    }\n\n    if (!pool) {\n        return (\n            <PoolViewWrapper>\n                <ErrorMessage>\n                    Pool with specified address not found\n                </ErrorMessage>\n            </PoolViewWrapper>\n        );\n    }\n\n    if (pool) {\n        if (appSettingsStore.activePoolAddress !== poolAddress) {\n            console.debug(['Set Active Pool Address']);\n            appSettingsStore.setActivePoolAddress(poolAddress);\n            blockchainFetchStore.onActivePoolChanged();\n        }\n    }\n\n    let userPoolTokens = undefined;\n    const totalPoolTokens = tokenStore.getTotalSupply(poolAddress);\n\n    if (account) {\n        userPoolTokens = tokenStore.getBalance(poolAddress, account);\n    }\n\n    const feeText = pool ? formatFee(pool.swapFee) : '-';\n    const shareText = getUserShareText(\n        pool,\n        account,\n        totalPoolTokens,\n        userPoolTokens\n    );\n\n    const liquidityText =\n        marketStore.assetPricesLoaded && pool\n            ? formatCurrency(marketStore.getPortfolioValue(pool))\n            : '-';\n\n    let volumeText = '-';\n    if (pool) {\n        volumeText = formatCurrency(pool.lastSwapVolume);\n    }\n\n    return (\n        <PoolViewWrapper>\n            {addLiquidityFormStore.modalOpen ? (\n                <AddLiquidityModal poolAddress={poolAddress} />\n            ) : (\n                <div />\n            )}\n            {removeLiquidityFormStore.modalOpen ? (\n                <RemoveLiquidityModal poolAddress={poolAddress} />\n            ) : (\n                <div />\n            )}\n            {pool.tokensList.includes(\n                '0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'\n            ) ? (\n                <Container\n                    style={{ display: warningModalOpen ? 'block' : 'none' }}\n                >\n                    <ModalContent>\n                        <ExitComponent onClick={() => handleCloseModal()}>\n                            +\n                        </ExitComponent>\n                        <Error>\n                            <Icon src=\"ErrorSign.svg\" />\n                            This is an extremely risky pool. A liquidity pool is\n                            only as good as its weakest token. If the YFI token\n                            is infinitely minted, a huge percent of the entire\n                            pool supply can be stolen. PLEASE SLOW DOWN AND\n                            DYOR.\n                        </Error>\n                    </ModalContent>\n                </Container>\n            ) : (\n                <div />\n            )}\n            <PoolAssetChartPanel poolAddress={poolAddress} />\n            <AddRemovePanel poolAddress={poolAddress} />\n            <InfoPanelWrapper>\n                <InfoPanel text={`$ ${liquidityText}`} subText=\"Liquidity\" />\n                <InfoPanel\n                    text={`$ ${volumeText}`}\n                    subText=\"Trade Volume (24hr)\"\n                />\n                <InfoPanel text={feeText} subText=\"Pool Swap Fee\" />\n                <InfoPanel text={shareText} subText=\"My Pool Share\" />\n            </InfoPanelWrapper>\n            <PoolTabs poolAddress={poolAddress} />\n        </PoolViewWrapper>\n    );\n});\n\nexport default withRouter(PoolView);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { TokenIconAddress } from '../Common/WalletBalances';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport { bnum, formatCurrency, formatPercentage } from '../../utils/helpers';\nimport { ValidationStatus } from '../../stores/actions/validators';\nconst Cross = require('../../assets/images/x.svg') as string;\nconst Dropdown = require('../../assets/images/dropdown.svg') as string;\n\nconst Wrapper = styled.div`\n    width: 90%;\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    background: var(--panel-background);\n`;\n\nconst HeaderRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n    color: var(--body-text);\n    border-bottom: 1px solid var(--panel-border);\n    padding: 20px 25px 20px 25px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst TableRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: var(--panel-row-text);\n    text-align: left;\n    padding: 16px 20px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 16px;\n`;\n\nconst TableCell = styled.div`\n    display: flex;\n    align-items: center;\n    width: ${props => props.width || '10%'};\n`;\n\nconst TableCellRight = styled(TableCell)`\n    justify-content: flex-end;\n`;\n\nconst TokenIcon = styled.img`\n    width: 20px;\n    height: 20px;\n    margin-right: 13px;\n`;\n\nconst WeightAmount = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 30px;\n    border-radius: 4px;\n`;\n\nconst DepositAmount = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 30px;\n    border-radius: 4px;\n`;\n\nconst Toggle = styled.label`\n    position: relative;\n    display: inline-block;\n    width: 42px;\n    height: 24px;\n    input {\n        opacity: 0;\n        width: 0;\n        height: 0;\n    }\n`;\n\nconst ToggleInput = styled.input`\n    &:checked + span {\n        background-color: var(--highlighted-selector-background);\n    }\n    &:checked + span:before {\n        -webkit-transform: translateX(18px);\n        -ms-transform: translateX(18px);\n        transform: translateX(18px);\n        background-color: var(--slider-main);\n        background-image: url('Checkbox.svg');\n        background-repeat: no-repeat;\n        background-position: center;\n        background-size: 14px 14px;\n    }\n    &:focus + span {\n        box-shadow: 0 0 1px #2196f3;\n    }\n`;\n\nconst ToggleSlider = styled.span`\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--highlighted-selector-background);\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n    border-radius: 18px;\n    :before {\n        position: absolute;\n        content: '';\n        height: 18px;\n        width: 18px;\n        left: 3px;\n        bottom: 3px;\n        background-color: var(--input-text);\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n        border-radius: 50%;\n    }\n`;\n\nconst InputWrapper = styled.div`\n    height: 30px;\n    padding: 0px 17px;\n    font-style: normal;\n    font-weight: 500;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    input {\n        width: 70px;\n        text-align: right;\n        color: var(--input-text);\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 16px;\n        letter-spacing: 0.2px;\n        padding-left: 5px;\n        background-color: var(--panel-background);\n        border: none;\n        box-shadow: inset 0 0 0 1px var(--panel-background),\n            inset 0 0 0 70px var(--panel-background);\n        :-webkit-autofill,\n        :-webkit-autofill:hover,\n        :-webkit-autofill:focus,\n        :-webkit-autofill:active,\n        :-internal-autofill-selected {\n            -webkit-appearance: none;\n            margin: 0;\n            -webkit-text-fill-color: var(--body-text);\n        }\n        ::placeholder {\n            color: var(--input-placeholder-text);\n        }\n        :focus {\n            outline: none;\n        }\n        :-webkit-outer-spin-button,\n        :-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n    }\n    border: ${props => (props.errorBorders ? '1px solid var(--error)' : '')};\n    margin-left: ${props => (props.errorBorders ? '-1px' : '0px')}\n    margin-right: ${props => (props.errorBorders ? '-1px' : '0px')}\n    :hover {\n        background-color: var(--input-hover-background);\n        border: ${props =>\n            props.errorBorders\n                ? '1px solid var(--error)'\n                : '1px solid var(--input-hover-border);'};\n        margin-left: -1px;\n        margin-right: -1px;\n        input {\n            background-color: var(--input-hover-background);\n            box-shadow: inset 0 0 0 1px var(--input-hover-background),\n                inset 0 0 0 70px var(--input-hover-background);\n            ::placeholder {\n                color: var(--input-hover-placeholder-text);\n                background-color: var(--input-hover-background);\n            }\n        }\n    }\n`;\n\nconst ValueLabel = styled.span``;\n\nconst ExternalIcon = styled.img`\n    cursor: pointer;\n    filter: invert(67%) sepia(15%) saturate(333%) hue-rotate(155deg)\n        brightness(94%) contrast(88%);\n`;\n\nconst DropdownIcon = styled(ExternalIcon)`\n    width: 12px;\n    height: 12px;\n    padding: 8px;\n`;\n\nconst CloseIcon = styled(ExternalIcon)`\n    width: 16px;\n    height: 16px;\n`;\n\nconst CreatePoolTable = observer(() => {\n    const {\n        root: {\n            tokenStore,\n            providerStore,\n            proxyStore,\n            marketStore,\n            contractMetadataStore,\n            createPoolFormStore,\n        },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n\n    let accountApprovalsLoaded = false;\n    const tokens = createPoolFormStore.tokens;\n    const proxyAddress = proxyStore.getInstanceAddress();\n\n    accountApprovalsLoaded = tokenStore.areAccountApprovalsLoaded(\n        tokens,\n        account,\n        proxyAddress\n    );\n\n    const handleCheckboxChange = async (event, tokenAddress: string) => {\n        const { checked } = event.target;\n\n        createPoolFormStore.setApprovalCheckboxTouched(tokenAddress, true);\n        createPoolFormStore.setApprovalCheckboxChecked(tokenAddress, checked);\n\n        if (checked) {\n            const response = await tokenStore.approveMax(\n                tokenAddress,\n                proxyAddress\n            );\n\n            // Revert change on metamask error\n            if (response.error) {\n                createPoolFormStore.setApprovalCheckboxChecked(\n                    tokenAddress,\n                    !checked\n                );\n            }\n        } else {\n            const response = await tokenStore.revokeApproval(\n                tokenAddress,\n                proxyAddress\n            );\n\n            // Revert change on metamask error\n            if (response.error) {\n                createPoolFormStore.setApprovalCheckboxChecked(\n                    tokenAddress,\n                    !checked\n                );\n            }\n        }\n    };\n\n    const handleWeightInputChange = async (event, tokenAddress: string) => {\n        const { value } = event.target;\n        createPoolFormStore.setTokenWeight(tokenAddress, value);\n        createPoolFormStore.setActiveInputKey(tokenAddress);\n        createPoolFormStore.refreshWeights(tokenAddress);\n        createPoolFormStore.refreshAmounts(tokenAddress, account);\n    };\n\n    const handleAmountInputChange = async (event, tokenAddress: string) => {\n        const { value } = event.target;\n        createPoolFormStore.setTokenAmount(tokenAddress, value);\n        createPoolFormStore.setActiveInputKey(tokenAddress);\n        createPoolFormStore.refreshAmounts(tokenAddress, account);\n    };\n\n    const handleChangeClick = async (tokenAddress: string) => {\n        createPoolFormStore.openModal(tokenAddress);\n    };\n\n    const handleRemoveClick = async (tokenAddress: string) => {\n        createPoolFormStore.removeToken(tokenAddress);\n    };\n\n    const formatRelativeWeight = (tokenAddress: string) => {\n        const relativeWeight = createPoolFormStore.getRelativeWeight(\n            tokenAddress\n        );\n        if (relativeWeight.isNaN()) {\n            return '-';\n        }\n        return formatPercentage(relativeWeight, 2);\n    };\n\n    const renderAssetTable = (tokens: string[]) => {\n        const tokenValues = {};\n        for (const token of tokens) {\n            const amountInput = createPoolFormStore.getAmountInput(token);\n            const amount = bnum(amountInput.value);\n            const tokenMetadata = contractMetadataStore.getTokenMetadata(token);\n            const tokenValue = marketStore.hasAssetPrice(tokenMetadata.ticker)\n                ? marketStore.getValue(tokenMetadata.ticker, amount)\n                : bnum(NaN);\n            tokenValues[token] = tokenValue;\n        }\n\n        return (\n            <React.Fragment>\n                {tokens.map(token => {\n                    const tokenMetadata = contractMetadataStore.getTokenMetadata(\n                        token\n                    );\n\n                    const checkbox = createPoolFormStore.getCheckbox(token);\n                    const weightInput = createPoolFormStore.getWeightInput(\n                        token\n                    );\n                    const amountInput = createPoolFormStore.getAmountInput(\n                        token\n                    );\n\n                    let hasMaxApproval = false;\n\n                    if (accountApprovalsLoaded) {\n                        hasMaxApproval = tokenStore.hasMaxApproval(\n                            token,\n                            account,\n                            proxyAddress\n                        );\n                    }\n\n                    let visuallyChecked;\n\n                    if (checkbox.touched) {\n                        visuallyChecked = checkbox.checked;\n                    } else if (accountApprovalsLoaded) {\n                        visuallyChecked = hasMaxApproval;\n                    } else {\n                        visuallyChecked = false;\n                    }\n\n                    const valueText = tokenValues[token].isNaN()\n                        ? '-'\n                        : `$ ${formatCurrency(tokenValues[token])}`;\n\n                    const hasWeightError =\n                        weightInput.validation !== ValidationStatus.VALID &&\n                        weightInput.validation !== ValidationStatus.EMPTY;\n                    const hasAmountError =\n                        amountInput.validation !== ValidationStatus.VALID &&\n                        amountInput.validation !== ValidationStatus.EMPTY;\n\n                    return (\n                        <TableRow key={token}>\n                            <TableCell width={'15%'}>\n                                <TokenIcon\n                                    src={TokenIconAddress(\n                                        tokenMetadata.iconAddress,\n                                        tokenMetadata.isSupported\n                                    )}\n                                />\n                                {tokenMetadata.symbol}\n                                <DropdownIcon\n                                    src={Dropdown}\n                                    alt=\"v\"\n                                    onClick={e => {\n                                        handleChangeClick(token);\n                                    }}\n                                />\n                            </TableCell>\n                            <TableCell>\n                                <Toggle>\n                                    <ToggleInput\n                                        type=\"checkbox\"\n                                        checked={visuallyChecked}\n                                        disabled={!account}\n                                        onChange={e =>\n                                            handleCheckboxChange(e, token)\n                                        }\n                                    />\n                                    <ToggleSlider></ToggleSlider>\n                                </Toggle>\n                            </TableCell>\n                            <TableCellRight width={'20%'}>\n                                <WeightAmount>\n                                    <InputWrapper errorBorders={hasWeightError}>\n                                        <input\n                                            id={`input-weight-${token}`}\n                                            name={`input-weight-name-${token}`}\n                                            value={weightInput.value}\n                                            onChange={e => {\n                                                handleWeightInputChange(\n                                                    e,\n                                                    token\n                                                );\n                                            }}\n                                            placeholder=\"\"\n                                        />\n                                    </InputWrapper>\n                                </WeightAmount>\n                            </TableCellRight>\n                            <TableCellRight>\n                                {formatRelativeWeight(token)}\n                            </TableCellRight>\n                            <TableCellRight width={'20%'}>\n                                <DepositAmount>\n                                    <InputWrapper errorBorders={hasAmountError}>\n                                        <input\n                                            id={`input-amount-${token}`}\n                                            name={`input-amount-name-${token}`}\n                                            value={amountInput.value}\n                                            onChange={e => {\n                                                handleAmountInputChange(\n                                                    e,\n                                                    token\n                                                );\n                                            }}\n                                            placeholder=\"\"\n                                        />\n                                    </InputWrapper>\n                                </DepositAmount>\n                            </TableCellRight>\n                            <TableCellRight width={'15%'}>\n                                <ValueLabel>{valueText}</ValueLabel>\n                            </TableCellRight>\n                            <TableCellRight>\n                                <CloseIcon\n                                    src={Cross}\n                                    alt=\"x\"\n                                    onClick={e => {\n                                        handleRemoveClick(token);\n                                    }}\n                                />\n                            </TableCellRight>\n                        </TableRow>\n                    );\n                })}\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <Wrapper>\n            <HeaderRow>\n                <TableCell width={'15%'}>Asset</TableCell>\n                <TableCell>Unlock</TableCell>\n                <TableCellRight width={'30%'}>\n                    Weight (total max: 100)\n                </TableCellRight>\n                <TableCellRight width={'20%'}>Amount</TableCellRight>\n                <TableCellRight width={'15%'}>Value</TableCellRight>\n                <TableCellRight>Remove</TableCellRight>\n            </HeaderRow>\n            {renderAssetTable(tokens)}\n        </Wrapper>\n    );\n});\n\nexport default CreatePoolTable;\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useStores } from '../../contexts/storesContext';\nimport { TokenIconAddress } from '../Common/WalletBalances';\nimport {\n    bnum,\n    formatBalanceTruncated,\n    isEmpty,\n    isAddress,\n    toChecksum,\n} from 'utils/helpers';\nimport { isChainIdSupported } from '../../provider/connectors';\nimport { EtherKey } from '../../stores/Token';\nimport { observer } from 'mobx-react';\n\nconst AssetPanelContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    max-height: 329px;\n    overflow: auto; /* Enable scroll if needed */\n    ::-webkit-scrollbar {\n        display: none;\n    }\n`;\n\nconst AssetPanel = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 184px;\n    height: 98px;\n    cursor: pointer;\n    border-right: 1px solid var(--panel-border);\n    border-bottom: 1px solid var(--panel-border);\n    :nth-child(3n + 3) {\n        border-right: none;\n    }\n`;\n\nconst AssetWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    font-style: normal;\n    font-weight: normal;\n`;\n\nconst TokenIcon = styled.img`\n    width: 28px;\n    height: 28px;\n    margin-right: 12px;\n`;\n\nconst TokenName = styled.div`\n    font-size: 16px;\n    line-height: 19px;\n    display: flex;\n    align-items: center;\n`;\n\nconst TokenBalance = styled.div`\n    font-size: 14px;\n    line-height: 16px;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    color: var(--body-text);\n    margin-top: 12px;\n`;\n\nconst ErrorLabel = styled.div`\n    margin-left: 4px;\n    color: var(--error);\n`;\n\ninterface Asset {\n    address: string;\n    iconAddress: string;\n    symbol: string;\n    isSupported: boolean;\n    userBalance: string;\n}\n\nconst AssetOptions = observer(() => {\n    const {\n        root: {\n            providerStore,\n            proxyStore,\n            contractMetadataStore,\n            createPoolFormStore,\n            tokenStore,\n        },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n    const chainId = providerStore.providerStatus.activeChainId;\n\n    const tokens = createPoolFormStore.tokens;\n    const assetModalInput = createPoolFormStore.assetModal.inputValue;\n    const proxyAddress = proxyStore.getInstanceAddress();\n\n    useEffect(() => {\n        async function fetchToken() {\n            const address = toChecksum(assetModalInput);\n            if (!contractMetadataStore.hasTokenMetadata(address)) {\n                const tokenMetadata = await contractMetadataStore.fetchTokenMetadata(\n                    address,\n                    account\n                );\n                if (!tokenMetadata) {\n                    return;\n                }\n                contractMetadataStore.addTokenMetadata(address, tokenMetadata);\n                tokenStore.fetchAccountApprovals(\n                    [address],\n                    account,\n                    proxyAddress\n                );\n                tokenStore.fetchTokenBalances(account, [address]);\n            }\n        }\n\n        if (!isEmpty(assetModalInput) && isAddress(assetModalInput)) {\n            fetchToken();\n        }\n    }, [\n        assetModalInput,\n        account,\n        proxyAddress,\n        contractMetadataStore,\n        tokenStore,\n    ]);\n\n    const isInvalidToken = (address): boolean => {\n        const errors = contractMetadataStore.getTokenErrors();\n        const noBool = errors.noBool.includes(address);\n        const transferFee = errors.transferFee.includes(address);\n        return noBool || transferFee;\n    };\n\n    const getAssetOptions = (filter, account): Asset[] => {\n        const filteredWhitelistedTokenMetadata = contractMetadataStore\n            .getFilteredTokenMetadata(filter)\n            .filter(token => {\n                const isEther = token.address === EtherKey;\n                const isSupported =\n                    token.isSupported ||\n                    token.address.toLowerCase() === filter.toLowerCase();\n                const alreadySelected = tokens.includes(token.address);\n                return !isEther && isSupported && !alreadySelected;\n            });\n\n        const filteredWhitelistedTokens = filteredWhitelistedTokenMetadata.map(\n            tokenMetadata => tokenMetadata.address\n        );\n\n        let assetSelectorData: Asset[] = [];\n        let userBalances = {};\n\n        if (account && isChainIdSupported(chainId)) {\n            userBalances = tokenStore.getAccountBalances(\n                filteredWhitelistedTokens,\n                account\n            );\n        }\n\n        assetSelectorData = filteredWhitelistedTokenMetadata.map(value => {\n            const userBalance = formatBalanceTruncated(\n                userBalances[value.address]\n                    ? bnum(userBalances[value.address])\n                    : bnum(0),\n                value.decimals,\n                value.precision,\n                20\n            );\n\n            return {\n                address: value.address,\n                iconAddress: value.iconAddress,\n                symbol: value.symbol,\n                isSupported: value.isSupported,\n                userBalance: userBalance,\n            };\n        });\n\n        return assetSelectorData;\n    };\n\n    const sortAssetOptions = (assets: Asset[], account) => {\n        const buckets = {\n            withBalance: [] as Asset[],\n            withoutBalance: [] as Asset[],\n        };\n        assets.forEach(asset => {\n            const hasBalance = account && bnum(asset.userBalance).gt(0);\n\n            if (hasBalance) {\n                buckets.withBalance.push(asset);\n            } else {\n                buckets.withoutBalance.push(asset);\n            }\n        });\n\n        // We don't introduce a possibility of duplicates and therefore don't need to use Set\n        return [...buckets.withBalance, ...buckets.withoutBalance];\n    };\n\n    const assets = sortAssetOptions(\n        getAssetOptions(assetModalInput, account),\n        account\n    );\n\n    const selectAsset = address => {\n        if (isInvalidToken(address)) {\n            return;\n        }\n        createPoolFormStore.setToken(address);\n        createPoolFormStore.closeModal();\n    };\n\n    return (\n        <AssetPanelContainer>\n            {assets.map(token => (\n                <AssetPanel\n                    onClick={() => {\n                        selectAsset(token.address);\n                    }}\n                    key={token.address}\n                >\n                    <AssetWrapper>\n                        <TokenIcon\n                            src={TokenIconAddress(\n                                token.iconAddress,\n                                token.isSupported\n                            )}\n                        />\n                        <TokenName>{token.symbol}</TokenName>\n                    </AssetWrapper>\n                    <TokenBalance>\n                        {token.userBalance} {token.symbol}\n                        {isInvalidToken(token.address) ? (\n                            <ErrorLabel>Bad ERC20</ErrorLabel>\n                        ) : (\n                            <div />\n                        )}\n                    </TokenBalance>\n                </AssetPanel>\n            ))}\n        </AssetPanelContainer>\n    );\n});\n\nexport default AssetOptions;\n","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport AssetOptions from './AssetOptions';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\n\nconst Container = styled.div`\n    display: block;\n    position: fixed;\n    z-index: 5;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0, 0, 0);\n    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n`;\n\nconst ModalContent = styled.div`\n    margin: 15% auto;\n    display: flex;\n    flex-direction: column;\n    max-width: 554px;\n    max-height: 449px;\n    background-color: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n    color: white;\n`;\n\nconst AssetSelectorHeader = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 68px;\n    padding: 0px 20px;\n    background-color: var(--panel-header-background);\n    color: var(--header-text);\n    border-radius: 4px;\n    border-bottom: 1px solid var(--panel-border);\n`;\n\nconst HeaderContent = styled.div``;\n\nconst ExitComponent = styled.div`\n    color: var(--exit-modal-color);\n    transform: rotate(135deg);\n    font-size: 22px;\n    cursor: pointer;\n`;\n\nconst InputContainer = styled.div`\n    display: flex;\n    align-items: center;\n    height: 60px;\n    padding: 0px 20px;\n    justify-content: space-between;\n    color: var(--body-text);\n    padding-left: 21px;\n    padding-right: 21px;\n    border-bottom: 1px solid var(--panel-border);\n    input {\n        width: 75%;\n        color: var(--body-text);\n        font-size: 16px;\n        line-height: 19px;\n        background-color: var(--panel-background);\n        border: none;\n        box-shadow: inset 0 0 0 1px var(--panel-background),\n            inset 0 0 0 100px var(--panel-background);\n        :-webkit-autofill,\n        :-webkit-autofill:hover,\n        :-webkit-autofill:focus,\n        :-webkit-autofill:active,\n        :-internal-autofill-selected {\n            -webkit-text-fill-color: var(--body-text);\n        }\n        :focus {\n            outline: none;\n        }\n    }\n`;\n\nfunction useOnClickOutside(ref, handler) {\n    useEffect(() => {\n        const handleClick = event => {\n            // Do nothing if clicking ref's element or descendent elements\n            if (!ref.current || ref.current.contains(event.target)) {\n                return;\n            }\n\n            handler(event);\n        };\n\n        const handleKeyUp = event => {\n            if (event.key !== 'Escape') {\n                return;\n            }\n            handler(event);\n        };\n\n        document.addEventListener('mousedown', handleClick);\n        window.addEventListener('keydown', handleKeyUp, false);\n        document.addEventListener('touchstart', handleClick);\n\n        return () => {\n            document.removeEventListener('mousedown', handleClick);\n            window.removeEventListener('keydown', handleKeyUp, false);\n            document.removeEventListener('touchstart', handleClick);\n        };\n    }, [ref, handler]);\n}\n\nconst SelectAssetModal = observer(() => {\n    const {\n        root: { createPoolFormStore },\n    } = useStores();\n\n    const ref = useRef();\n\n    useOnClickOutside(ref, () => createPoolFormStore.closeModal());\n\n    const { assetModal } = createPoolFormStore;\n\n    const onChange = async event => {\n        const { value } = event.target;\n        createPoolFormStore.setModalInputValue(value);\n    };\n\n    return (\n        <Container style={{ display: assetModal.open ? 'block' : 'none' }}>\n            <ModalContent ref={ref}>\n                <AssetSelectorHeader>\n                    <HeaderContent>Select Token</HeaderContent>\n                    <ExitComponent\n                        onClick={() => {\n                            createPoolFormStore.closeModal();\n                        }}\n                    >\n                        +\n                    </ExitComponent>\n                </AssetSelectorHeader>\n                <InputContainer>\n                    <input\n                        value={assetModal.inputValue}\n                        onChange={e => onChange(e)}\n                        placeholder=\"Search Token Name, Symbol, or Address\"\n                    />\n                </InputContainer>\n                <AssetOptions />\n            </ModalContent>\n        </Container>\n    );\n});\n\nexport default SelectAssetModal;\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { useHistory } from 'react-router-dom';\nimport { bnum, toWei } from 'utils/helpers';\nimport { ContractTypes } from '../../stores/Provider';\nimport { EtherKey } from '../../stores/Token';\nimport { ValidationStatus } from '../../stores/actions/validators';\nimport { useStores } from '../../contexts/storesContext';\nimport CreatePoolTable from '../CreatePool/CreatePoolTable';\nimport SelectAssetModal from '../CreatePool/SelectAssetModal';\nimport Button from '../Common/Button';\nimport Checkbox from '../Common/Checkbox';\nimport { BigNumber } from 'utils/bignumber';\n\nconst Wrapper = styled.div`\n    padding-top: 8px;\n`;\n\nconst Header = styled.div`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    line-height: 19px;\n    color: var(--header-text);\n    padding: 0px 0px 24px 0px;\n`;\n\nconst SingleElement = styled.div`\n    display: flex;\n`;\n\nconst Section = styled.div`\n    margin-top: 16px;\n`;\n\nconst InputWrapper = styled.div`\n    height: 30px;\n    padding: 0px 17px;\n    font-style: normal;\n    font-weight: 500;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    color: var(--input-text);\n    border: 1px solid var(--panel-border);\n    background-color: var(--panel-background);\n    border-radius: 4px;\n    input {\n        width: 70px;\n        text-align: right;\n        color: var(--input-text);\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 16px;\n        letter-spacing: 0.2px;\n        padding-left: 5px;\n        background-color: var(--panel-background);\n        border: none;\n        box-shadow: inset 0 0 0 1px var(--panel-background),\n            inset 0 0 0 70px var(--panel-background);\n        :-webkit-autofill,\n        :-webkit-autofill:hover,\n        :-webkit-autofill:focus,\n        :-webkit-autofill:active,\n        :-internal-autofill-selected {\n            -webkit-text-fill-color: var(--body-text);\n        }\n        ::placeholder {\n            color: var(--input-placeholder-text);\n        }\n        :focus {\n            outline: none;\n        }\n    }\n    border: ${props => (props.errorBorders ? '1px solid var(--error)' : '')};\n    margin-left: ${props => (props.errorBorders ? '-1px' : '0px')}\n    margin-right: ${props => (props.errorBorders ? '-1px' : '0px')}\n    :hover {\n        background-color: var(--input-hover-background);\n        border: ${props =>\n            props.errorBorders\n                ? '1px solid var(--error)'\n                : '1px solid var(--input-hover-border);'};\n        margin-left: -1px;\n        margin-right: -1px;\n        input {\n            background-color: var(--input-hover-background);\n            box-shadow: inset 0 0 0 1px var(--input-hover-background),\n                inset 0 0 0 70px var(--input-hover-background);\n            ::placeholder {\n                color: var(--input-hover-placeholder-text);\n                background-color: var(--input-hover-background);\n            }\n        }\n    }\n`;\n\nconst Message = styled.div`\n    width: 87%;\n    padding: 16px;\n    display: flex;\n    align-items: center;\n    border: 1px solid var(--error);\n    border-radius: 4px;\n    font-size: 14px;\n`;\n\nconst Error = styled(Message)`\n    border-color: var(--error);\n    color: var(--error);\n`;\n\nconst Warning = styled(Message)`\n    border-color: var(--warning);\n    color: var(--warning);\n    margin-bottom: 16px;\n`;\n\nconst Check = styled(Error)``;\n\nconst Icon = styled.img`\n    width: 26px;\n    height: 24px;\n    margin-right: 20px;\n`;\n\nconst CheckboxWrapper = styled.div`\n    margin-right: 16px;\n`;\n\nconst Content = styled.div``;\n\nconst NewPool = observer(() => {\n    const findLockedToken = (\n        tokens: string[],\n        account: string\n    ): string | undefined => {\n        return tokens.find(token => {\n            return !tokenStore.hasMaxApproval(token, account, proxyAddress);\n        });\n    };\n\n    const {\n        root: {\n            contractMetadataStore,\n            createPoolFormStore,\n            providerStore,\n            proxyStore,\n            tokenStore,\n        },\n    } = useStores();\n\n    const account = providerStore.providerStatus.account;\n    const history = useHistory();\n    const hasProxyInstance = proxyStore.hasInstance();\n    const proxyAddress = proxyStore.getInstanceAddress();\n\n    const feeInput = createPoolFormStore.fee;\n    const hasFeeError = feeInput.validation === ValidationStatus.BAD_FEE;\n    const hasValidInput = createPoolFormStore.hasValidInput();\n    const confirmationCheckbox = createPoolFormStore.confirmation;\n    const hasConfirmed = confirmationCheckbox.checked;\n\n    const validationStatus = createPoolFormStore.validationStatus;\n\n    const tokens = createPoolFormStore.tokens;\n    let lockedToken;\n    if (account) {\n        const accountApprovalsLoaded = tokenStore.areAccountApprovalsLoaded(\n            tokens,\n            account,\n            proxyAddress\n        );\n        if (accountApprovalsLoaded) {\n            lockedToken = findLockedToken(tokens, account);\n        }\n    }\n\n    useEffect(() => {\n        if (!hasProxyInstance) {\n            history.push('/setup');\n        }\n    }, [hasProxyInstance, history]);\n\n    const handleAddButtonClick = async () => {\n        const trackedTokenAddresses = contractMetadataStore.getTrackedTokenAddresses();\n        const tokens = createPoolFormStore.tokens;\n        const newToken = trackedTokenAddresses.find(token => {\n            const isEther = token === EtherKey;\n            const alreadyExists = tokens.includes(token);\n            return !isEther && !alreadyExists;\n        });\n        createPoolFormStore.addToken(newToken);\n    };\n\n    const handleCreateButtonClick = async () => {\n        const dsProxyAddress = proxyStore.getInstanceAddress();\n        const bActions = contractMetadataStore.getBActionsAddress();\n        const factory = contractMetadataStore.getBFactoryAddress();\n        const tokens = createPoolFormStore.tokens;\n        const balances = tokens.map(token => {\n            const amountInput = createPoolFormStore.amounts[token];\n            const amount = bnum(amountInput.value);\n            return tokenStore\n                .denormalizeBalance(amount, token)\n                .integerValue(BigNumber.ROUND_DOWN)\n                .toString();\n        });\n        const denorms = tokens.map(token => {\n            const weightInput = createPoolFormStore.weights[token];\n            const weight = weightInput.value;\n            return toWei(weight)\n                .div(2)\n                .toString();\n        });\n        const swapFee = toWei(createPoolFormStore.fee.value)\n            .div(100)\n            .toString();\n        const finalize = true;\n        const data = proxyStore.wrapTransaction(\n            ContractTypes.BActions,\n            'create',\n            [factory, tokens, balances, denorms, swapFee, finalize]\n        );\n        await providerStore.sendTransaction(\n            ContractTypes.DSProxy,\n            dsProxyAddress,\n            'execute',\n            [bActions, data]\n        );\n    };\n\n    const handleUnlockButtonClick = async () => {\n        await tokenStore.approveMax(lockedToken, proxyAddress);\n    };\n\n    const handleInputChange = async event => {\n        const { value } = event.target;\n        createPoolFormStore.setFee(value);\n    };\n\n    const renderAddButton = () => {\n        return (\n            <Button\n                text={`Add Token`}\n                isActive={account && createPoolFormStore.tokens.length !== 8}\n                onClick={e => handleAddButtonClick()}\n            />\n        );\n    };\n\n    const renderCreateButton = () => {\n        return (\n            <Button\n                text={`Create`}\n                isActive={account && hasValidInput && hasConfirmed}\n                isPrimary={true}\n                onClick={e => handleCreateButtonClick()}\n            />\n        );\n    };\n\n    const renderUnlockButton = () => {\n        const token = contractMetadataStore.getTokenMetadata(lockedToken);\n        return (\n            <Button\n                text={`Unlock ${token.symbol}`}\n                isActive={account && lockedToken}\n                isPrimary={true}\n                onClick={e => handleUnlockButtonClick()}\n            />\n        );\n    };\n\n    const renderError = () => {\n        if (hasValidInput) {\n            return;\n        }\n\n        function getText(status: ValidationStatus) {\n            if (status === ValidationStatus.EMPTY)\n                return \"Values can't be empty \";\n            if (status === ValidationStatus.ZERO) return \"Values can't be zero\";\n            if (status === ValidationStatus.NOT_FLOAT)\n                return 'Values should be numbers';\n            if (status === ValidationStatus.NEGATIVE)\n                return 'Values should be positive numbers';\n            if (status === ValidationStatus.INSUFFICIENT_BALANCE)\n                return 'Insufficient balance';\n            if (status === ValidationStatus.MINIMUM_BALANCE)\n                return 'Token balance in wei form needs to be at least 10^6. For example WBTC has 8 decimals so the min is 0.01 WBTC';\n            if (status === ValidationStatus.BAD_WEIGHT)\n                return 'Weights should be numbers from 2 to 98. Total weight should not exceed 100.';\n            if (status === ValidationStatus.BAD_FEE)\n                return 'Fee should be from 0.0001% to 10%';\n            return '';\n        }\n\n        const errorText = getText(validationStatus);\n        return (\n            <Error>\n                <Icon src=\"ErrorSign.svg\" />\n                <Content>{errorText}</Content>\n            </Error>\n        );\n    };\n\n    const renderConfirmation = () => {\n        if (!hasValidInput) {\n            return;\n        }\n\n        const safePool = tokens.every(tokenAddress => {\n            const hasMetadata = contractMetadataStore.hasTokenMetadata(\n                tokenAddress\n            );\n            if (!hasMetadata) {\n                return false;\n            }\n            const metadata = contractMetadataStore.getTokenMetadata(\n                tokenAddress\n            );\n            return metadata.isSupported;\n        });\n        if (safePool) {\n            if (!hasConfirmed) {\n                createPoolFormStore.toggleConfirmation();\n            }\n            return;\n        }\n\n        return (\n            <Check>\n                <CheckboxWrapper>\n                    <Checkbox\n                        checked={hasConfirmed}\n                        onChange={e => {\n                            createPoolFormStore.toggleConfirmation();\n                        }}\n                    />\n                </CheckboxWrapper>\n                <div>\n                    <div>\n                        • Do not add <b>deflationary tokens</b> or tokens with\n                        transfer fees.\n                    </div>\n                    <div>\n                        • Do not add tokens with <b>no bool return values</b>.\n                    </div>\n                    <div>\n                        • Any other <b>non-compliance from ERC20</b> may cause\n                        issues. DYOR!\n                    </div>\n                </div>\n            </Check>\n        );\n    };\n\n    return (\n        <Wrapper>\n            <Warning>\n                <Icon src=\"WarningSign.svg\" />\n                <Content>\n                    This feature is in beta. Currently, only creating shared\n                    pools is supported. Make sure tokens are ERC20-compliant\n                    otherwise funds can get stuck. The default list in the asset\n                    selector has been vetted.\n                </Content>\n            </Warning>\n\n            <Header>Tokens</Header>\n            <CreatePoolTable />\n            <Section>\n                <SingleElement>{renderAddButton()}</SingleElement>\n            </Section>\n\n            <Section>\n                <Header>Swap fee</Header>\n                <SingleElement>\n                    <InputWrapper errorBorders={hasFeeError}>\n                        <input\n                            value={feeInput.value}\n                            onChange={e => {\n                                handleInputChange(e);\n                            }}\n                            placeholder=\"\"\n                        />\n                        %\n                    </InputWrapper>\n                </SingleElement>\n            </Section>\n\n            <Section>\n                {renderError()}\n                {renderConfirmation()}\n            </Section>\n\n            <Section>\n                <SingleElement>\n                    {lockedToken ? renderUnlockButton() : renderCreateButton()}\n                </SingleElement>\n            </Section>\n            <SelectAssetModal />\n        </Wrapper>\n    );\n});\n\nexport default NewPool;\n","import React from 'react';\nimport styled from 'styled-components';\nimport NewPool from '../components/Home/NewPool';\n\nconst NewWrapper = styled.div`\n    position: relative;\n    padding: 32px 30px 0px 30px;\n\n    @media screen and (max-width: 1024px) {\n        padding: 32px 10px 0px 10px;\n    }\n`;\n\nconst Private = () => {\n    return (\n        <NewWrapper>\n            <NewPool />\n        </NewWrapper>\n    );\n};\n\nexport default Private;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../contexts/storesContext';\nimport Button from '../components/Common/Button';\nimport { ContractTypes } from '../stores/Provider';\n\nconst SetupWrapper = styled.div`\n    position: relative;\n    padding: 32px 30px 0px 30px;\n    height: 100%;\n    box-sizing: border-box;\n    color: var(--body-text);\n\n    @media screen and (max-width: 1024px) {\n        padding: 32px 10px 0px 10px;\n    }\n`;\n\nconst SectionWrapper = styled.div`\n    height: 70%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Section = styled.div`\n    width: 306px;\n    padding: 8px 32px 32px 32px;\n    background: var(--panel-background);\n    border: 1px solid var(--panel-border);\n    border-radius: 4px;\n`;\n\nconst Header = styled.div`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    line-height: 19px;\n    color: var(--header-text);\n    padding: 24px 0px;\n`;\n\nconst Explainer = styled.div`\n    font-size: 14px;\n`;\n\nconst ButtonWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 32px 0 16px 0;\n`;\n\nconst Setup = observer(() => {\n    const {\n        root: { providerStore, proxyStore, contractMetadataStore },\n    } = useStores();\n\n    const isDeploying = proxyStore.isDeploying();\n    const hasInstance = proxyStore.hasInstance();\n    const history = useHistory();\n\n    const handleButtonClick = async () => {\n        if (isInstanceReady()) {\n            history.goBack();\n        } else {\n            const tx = await providerStore.sendTransaction(\n                ContractTypes.DSProxyRegistry,\n                contractMetadataStore.getDsProxyRegistryAddress(),\n                'build',\n                []\n            );\n            if (tx.error) {\n                return;\n            }\n            proxyStore.setDeploying(true);\n            await tx.txResponse.wait(10);\n            proxyStore.setDeploying(false);\n        }\n    };\n\n    const isInstanceReady = () => {\n        return hasInstance && !isDeploying;\n    };\n\n    return (\n        <SetupWrapper>\n            <SectionWrapper>\n                <Section>\n                    <Header>Setup Proxy</Header>\n                    <Explainer>\n                        Create proxy contract to manage liquidity on Balancer.\n                    </Explainer>\n                    <ButtonWrapper>\n                        <Button\n                            isActive={!isDeploying}\n                            isPrimary={true}\n                            text={isInstanceReady() ? 'Next' : 'Setup'}\n                            onClick={e => handleButtonClick()}\n                        />\n                    </ButtonWrapper>\n                    {isDeploying ? (\n                        <Explainer>\n                            Waiting for 10 block confirmations…\n                        </Explainer>\n                    ) : (\n                        <div />\n                    )}\n                </Section>\n            </SectionWrapper>\n        </SetupWrapper>\n    );\n});\n\nexport default Setup;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nconst Wrapper = styled.div`\n    height: 150px;\n    border-bottom: 1px solid var(--panel-border);\n`;\n\nconst NavContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-top: 20px;\n`;\n\nconst StyledLink = styled(NavLink)`\n    display: flex;\n    align-items: center;\n    height: 40px;\n    padding-left: 30px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 22px;\n    text-decoration: none;\n    color: var(--highlighted-selector-text);\n    padding-left: 27px;\n\n    &.selected {\n        background-color: var(--highlighted-selector-background);\n        border-left: 3px solid var(--highlighted-selector-border);\n    }\n`;\n\nconst LeftNav = () => {\n    return (\n        <Wrapper>\n            <NavContainer>\n                <StyledLink exact activeClassName=\"selected\" to={`/`}>\n                    Shared Pools\n                </StyledLink>\n                <StyledLink activeClassName=\"selected\" to={`/private`}>\n                    Private Pools\n                </StyledLink>\n            </NavContainer>\n        </Wrapper>\n    );\n};\n\nexport default LeftNav;\n","import React from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport './App.css';\nimport Web3Manager from 'components/Web3Manager';\nimport Header from 'components/Common/Header';\nimport Home from 'views/Home';\nimport Private from 'views/Private';\nimport Pool from 'views/Pool';\nimport New from 'views/New';\nimport Setup from 'views/Setup';\nimport LeftNav from 'components/Common/LeftNav';\nimport WalletBalances from 'components/Common/WalletBalances';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\n\nconst LeftContainer = styled.div`\n    @media screen and (max-width: 1024px) {\n        display: none;\n    }\n    flex-direction: column;\n    width: 300px;\n    border-right: 1px solid var(--panel-border);\n    background-color: var(--panel-background);\n`;\n\nconst App = () => {\n    const renderViews = () => {\n        return (\n            <div className=\"app-shell\">\n                <Switch>\n                    <Route path=\"/pool/new\" component={New} />\n                    <Route path=\"/pool/:poolAddress\" component={Pool} />\n                    <Route path=\"/private\" component={Private} />\n                    <Route path=\"/setup\" component={Setup} />\n                    <Redirect from=\"/list\" to=\"/\" />\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </div>\n        );\n    };\n\n    return (\n        <Web3Manager>\n            <HashRouter>\n                <Header />\n                <Container>\n                    <LeftContainer>\n                        <LeftNav />\n                        <WalletBalances />\n                    </LeftContainer>\n                    {renderViews()}\n                </Container>\n            </HashRouter>\n        </Web3Manager>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Root = (\n    <>\n        <App />\n    </>\n);\nReactDOM.render(Root, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}